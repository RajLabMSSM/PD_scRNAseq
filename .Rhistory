"\n\n",
# Mod 2
"Mod2 name: ",Module2.name,
"\n  Top Term: ",Module2.top.term))
corr.stat <- cor(jaccard.corr$Jaccard.index.gene, jaccard.corr$Jaccard.index.term, method="pearson")
# Scatterplot
sp <- ggplot(jaccard.corr, aes(x=Jaccard.index.gene, y=Jaccard.index.term, text=Label)) +
geom_point() +
# ggrepel::geom_text_repel(data = label.dat, aes(label=Label)) +
geom_smooth(method=lm, se=T) +
labs(title = "Correlation between gene-level vs.term-level module-module Jaccard similarities",
subtitle = paste("Pearson's r =",round(corr.stat,3)))
ggplotly(sp, tooltip ="text" )
## Correlation scatterplot
jaccard.corr <- jaccard.corr %>%
# label.dat <- subset(jaccard.corr, (Jaccard.index.gene >= .05| Jaccard.index.term >=.2) ) %>%
dplyr::mutate(Label=paste0("x: ",round(Jaccard.index.gene,2),
"\ny: ",round(Jaccard.index.term,2),
"\n\n",
# Mod 1
"Mod1 name: ",Module1.name,
"\nTop Term: ",Module1.top.term,
"\n\n",
# Mod 2
"Mod2 name: ",Module2.name,
"\nTop Term: ",Module2.top.term))
corr.stat <- cor(jaccard.corr$Jaccard.index.gene, jaccard.corr$Jaccard.index.term, method="pearson")
# Scatterplot
sp <- ggplot(jaccard.corr, aes(x=Jaccard.index.gene, y=Jaccard.index.term, text=Label)) +
geom_point() +
# ggrepel::geom_text_repel(data = label.dat, aes(label=Label)) +
geom_smooth(method=lm, se=T) +
labs(title = "Correlation between gene-level vs.term-level module-module Jaccard similarities",
subtitle = paste("Pearson's r =",round(corr.stat,3)))
ggplotly(sp, tooltip ="text" )
## Correlation scatterplot
jaccard.corr <- jaccard.corr %>%
# label.dat <- subset(jaccard.corr, (Jaccard.index.gene >= .05| Jaccard.index.term >=.2) ) %>%
dplyr::mutate(Label=paste0("x: ",round(Jaccard.index.gene,2),
"\ny: ",round(Jaccard.index.term,2),
"\n\n",
# Mod 1
"Mod1 name: ",Module1.name,
"\nTop Term: ",Module1.top.term,
"\n\n",
# Mod 2
"Mod2 name: ",Module2.name,
"\nTop Term: ",Module2.top.term),
Jaccard.sum = Jaccard.index.gene + Jaccard.index.term)
# Scatterplot
sp <- ggplot(jaccard.corr, aes(x=Jaccard.index.gene, y=Jaccard.index.term, text=Label, fill=Jaccard.sum)) +
geom_point() +
# ggrepel::geom_text_repel(data = label.dat, aes(label=Label)) +
geom_smooth(method=lm, se=T) +
labs(title = "Correlation between gene-level vs.term-level module-module Jaccard similarities",
subtitle = paste("Pearson's r =",round(corr.stat,3)))
ggplotly(sp, tooltip ="text" )
## Correlation scatterplot
jaccard.corr <- jaccard.corr %>%
# label.dat <- subset(jaccard.corr, (Jaccard.index.gene >= .05| Jaccard.index.term >=.2) ) %>%
dplyr::mutate(Label=paste0("x: ",round(Jaccard.index.gene,2),
"\ny: ",round(Jaccard.index.term,2),
"\n\n",
# Mod 1
"Mod1 name: ",Module1.name,
"\nTop Term: ",Module1.top.term,
"\n\n",
# Mod 2
"Mod2 name: ",Module2.name,
"\nTop Term: ",Module2.top.term),
Jaccard.sum = Jaccard.index.gene + Jaccard.index.term)
jaccard.corr$Jaccard.sum
# Scatterplot
sp <- ggplot(jaccard.corr, aes(x=Jaccard.index.gene, y=Jaccard.index.term, text=Label, fill=Jaccard.sum)) +
geom_point() +
# ggrepel::geom_text_repel(data = label.dat, aes(label=Label)) +
geom_smooth(method=lm, se=T) +
labs(title = "Correlation between gene-level vs.term-level module-module Jaccard similarities",
subtitle = paste("Pearson's r =",round(corr.stat,3)))
ggplotly(sp, tooltip ="text" )
# Scatterplot
sp <- ggplot(jaccard.corr, aes(x=Jaccard.index.gene, y=Jaccard.index.term, text=Label, color=Jaccard.sum)) +
geom_point() +
# ggrepel::geom_text_repel(data = label.dat, aes(label=Label)) +
geom_smooth(method=lm, se=T) +
labs(title = "Correlation between gene-level vs.term-level module-module Jaccard similarities",
subtitle = paste("Pearson's r =",round(corr.stat,3)))
ggplotly(sp, tooltip ="text" )
createDT(mm.overlap)
# Prepare dataframe
jaccard.corr <- merge(x = MOD.dt[,c("Module1.name","Module2.name","Jaccard.index")]  %>%
dplyr::rename(Jaccard.index.gene=Jaccard.index),
y = mm.overlap[,c("Module1.name","Module2.name","Jaccard.index",
"Module1.top.term","Module2.top.term")] %>%
dplyr::rename(Jaccard.index.term=Jaccard.index),
by=c("Module1.name","Module2.name"))
# Remove zeros
# jaccard.corr <- subset(jaccard.corr, Jaccard.index.gene > 0 & Jaccard.index.term > 0)
## Histogram
ggplot(jaccard.corr) +
geom_histogram(aes(Jaccard.index.gene, fill="Jaccard.index.gene"), alpha=.5) +
geom_histogram(aes(Jaccard.index.term, fill="Jaccard.index.term"), alpha=.5)
## Correlation scatterplot
jaccard.corr <- jaccard.corr %>%
# label.dat <- subset(jaccard.corr, (Jaccard.index.gene >= .05| Jaccard.index.term >=.2) ) %>%
dplyr::mutate(Label=paste0("x: ",round(Jaccard.index.gene,2),
"\ny: ",round(Jaccard.index.term,2),
"\n\n",
# Mod 1
"Mod1 name: ",Module1.name,
"\nTop Term: ",Module1.top.term,
"\n\n",
# Mod 2
"Mod2 name: ",Module2.name,
"\nTop Term: ",Module2.top.term),
Jaccard.sum = Jaccard.index.gene + Jaccard.index.term)
corr.stat <- cor(jaccard.corr$Jaccard.index.gene, jaccard.corr$Jaccard.index.term, method="pearson")
# Scatterplot
sp <- ggplot(jaccard.corr, aes(x=Jaccard.index.gene, y=Jaccard.index.term, text=Label, color=Jaccard.sum)) +
geom_point() +
# ggrepel::geom_text_repel(data = label.dat, aes(label=Label)) +
geom_smooth(method=lm, se=T) +
labs(title = "Correlation between gene-level vs.term-level module-module Jaccard similarities",
subtitle = paste("Pearson's r =",round(corr.stat,3)))
ggplotly(sp, tooltip ="text" )
?colData
# Create pheatmap table
cell_group_df = tibble::tibble(cell=row.names(SummarizedExperiment::colData(cds)),
cell_group=clusters(cds)[colnames(cds)])
# Create pheatmap table
cell_group_df = tibble::tibble(cell=row.names(SummarizedExperiment::colData(cds)),
cell_group=monocle3::clusters(cds)[colnames(cds)])
agg_mat = aggregate_gene_expression(cds, gene_module_df, cell_group_df)
row.names(agg_mat) = stringr::str_c("Module ", row.names(agg_mat))
colnames(agg_mat) = stringr::str_c("Cluster ", colnames(agg_mat))
data.table::fwrite(data.table::data.table(data.frame(agg_mat), keep.rownames = "Module"),
"./Results/sc.modules_by_cluster.txt", sep="\t" )
# Plot
pheatmap::pheatmap(agg_mat, cluster_rows=TRUE, cluster_cols=TRUE,
scale="column", clustering_method="ward.D2",
fontsize=6)
# Plot
ph <- pheatmap::pheatmap(agg_mat, cluster_rows=TRUE, cluster_cols=TRUE,
scale="column", clustering_method="ward.D2",
fontsize=6)
# Plot
ph <- pheatmap::pheatmap(agg_mat, cluster_rows=TRUE, cluster_cols=TRUE,
scale="column", clustering_method="ward.D2",
fontsize=6)
ggplotly(ph)
?aggregate_gene_expression
# Create pheatmap table
cell_group_df = tibble::tibble(cell=row.names(SummarizedExperiment::colData(cds)),
cell_group=monocle3::clusters(cds)[colnames(cds)])
agg_mat = monocle3::aggregate_gene_expression(cds, gene_module_df, cell_group_df)
row.names(agg_mat) = stringr::str_c("Module ", row.names(agg_mat))
colnames(agg_mat) = stringr::str_c("Cluster ", colnames(agg_mat))
data.table::fwrite(data.table::data.table(data.frame(agg_mat), keep.rownames = "Module"),
"./Results/sc.modules_by_cluster.txt", sep="\t" )
# Plot
pheatmap::pheatmap(agg_mat, cluster_rows=TRUE, cluster_cols=TRUE,
scale="column", clustering_method="ward.D2",
fontsize=6)
agg_mat
as.data.frame(agg_mat)
data.frame(agg_mat)
as.matrix(agg_mat)
# Create pheatmap table
cell_group_df = tibble::tibble(cell=row.names(SummarizedExperiment::colData(cds)),
cell_group=monocle3::clusters(cds)[colnames(cds)])
agg_mat = monocle3::aggregate_gene_expression(cds, gene_module_df, cell_group_df)
row.names(agg_mat) = stringr::str_c("Module ", row.names(agg_mat))
colnames(agg_mat) = stringr::str_c("Cluster ", colnames(agg_mat))
data.table::fwrite(data.table::data.table(data.frame(as.matrix(agg_mat)), keep.rownames = "Module"),
"./Results/sc.modules_by_cluster.txt", sep="\t" )
# Plot
pheatmap::pheatmap(agg_mat, cluster_rows=TRUE, cluster_cols=TRUE,
scale="column", clustering_method="ward.D2",
fontsize=6)
?fData
gostres <- gprofiler2::gost(query = subset(mod.df, module==mod)$gene.symbol, organism = "hsapiens")
mod.df=bulk.modules
mod
mod.df=sc.modules
mod4
mod=4
gostres <- gprofiler2::gost(query = subset(mod.df, module==mod)$gene.symbol, organism = "hsapiens")
gostres
res <- gprofiler2::gost(query = c("NothingToSeeHere"))
res
is.null(res)
enrich.res <- gostres$result
enrich.res <- cbind(dataset=dataset, module=mod, enrich.res)
dataset="test"
module=mod
enrich.res <- cbind(dataset=dataset, module=mod, enrich.res)
enrich.res
gprofiler2.module_enrichment <- function(mod.df, dataset=""){
start.enrich <- Sys.time()
mod.enrich <- lapply(unique(mod.df$module), function(mod){
print(paste("gprofiler2:: Running enrichment on module:",mod))
gostres <- gprofiler2::gost(query = subset(mod.df, module==mod)$gene.symbol, organism = "hsapiens")
res <- gprofiler2::gost(query = c("NothingToSeeHere"))
if(is.null(gostres)){
enrich.res <- data.frame(dataset=dataset, module=mod)
} else{
enrich.res <- gostres$result
enrich.res <- cbind(dataset=dataset, module=mod, enrich.res)
}
return(enrich.res)
}) %>% data.table::rbindlist(fill = T)
end.enrich <- Sys.time()
print(paste("gprofiler2::",length(unique(mod.df$module)),
"tested for ontological enrichment in",round(end.enrich-start.enrich,2),"seconds"))
return(mod.enrich)
}
# if(file.exists(mod.enrich.path)){
#   mod.enrich <- data.table::fread()
# } else {
bulk.mod.enrich <- gprofiler2.module_enrichment(bulk.modules, dataset = "bulk-RNA-seq")
gprofiler2.module_enrichment <- function(mod.df, dataset=""){
start.enrich <- Sys.time()
mod.enrich <- lapply(unique(mod.df$module), function(mod){
print(paste("gprofiler2:: Running enrichment on module:",mod))
gostres <- gprofiler2::gost(query = subset(mod.df, module==mod)$gene.symbol, organism = "hsapiens")
if(is.null(gostres)){
enrich.res <- data.frame(dataset=dataset, module=mod)
} else{
enrich.res <- gostres$result
enrich.res <- cbind(dataset=dataset, module=mod, enrich.res)
}
return(enrich.res)
}) %>% data.table::rbindlist(fill = T)
end.enrich <- Sys.time()
print(paste("gprofiler2::",length(unique(mod.df$module)),
"tested for ontological enrichment in",round(end.enrich-start.enrich,2),"seconds"))
return(mod.enrich)
}
bulk.mod.enrich
# if(file.exists(mod.enrich.path)){
#   mod.enrich <- data.table::fread()
# } else {
bulk.mod.enrich <- gprofiler2.module_enrichment(bulk.modules, dataset = "bulk-RNA-seq")
sc.mod.enrich <- gprofiler2.module_enrichment(sc.modules, dataset = "sc-RNA-seq")
# Merge
mod.enrich <- rbind(bulk.mod.enrich, sc.mod.enrich)
# Correct for multiple tests
mod.enrich <- mod.enrich %>% dplyr::mutate(FDR = p.adjust(p_value, method="fdr"),
Bonferroni = p.adjust(p_value, method="bonferroni"))
data.table::fwrite(mod.enrich, mod.enrich.path, sep="\t")
colname(mod.enrich)
colnames(mod.enrich)
typeof(sc.mod.enrich)
data.table(sc.mod.enrich)
data.table::data.table(sc.mod.enrich)
typeof(sc.mod.enrich)
sc.mod.enrich
# Merge
mod.enrich <- data.table::rbindlist(list(bulk.mod.enrich, sc.mod.enrich))
mod.enrich
# Correct for multiple tests
mod.enrich <- mod.enrich %>% dplyr::mutate(FDR = p.adjust(p_value, method="fdr"),
Bonferroni = p.adjust(p_value, method="bonferroni"))
data.table::fwrite(mod.enrich, mod.enrich.path, sep="\t")
mod.enrich
data.table::fwrite(mod.enrich, mod.enrich.path")
data.table::fwrite(mod.enrich, mod.enrich.path)
data.table::fwrite(mod.enrich, mod.enrich.path)
mod.enrich[9132,]
is.null(mod.enrich)
# Correct for multiple tests
mod.enrich <- mod.enrich %>% dplyr::mutate(FDR = p.adjust(p_value, method="fdr"),
Bonferroni = p.adjust(p_value, method="bonferroni")) %?% data.frame()
# Correct for multiple tests
mod.enrich <- mod.enrich %>% dplyr::mutate(FDR = p.adjust(p_value, method="fdr"),
Bonferroni = p.adjust(p_value, method="bonferroni")) %>% data.frame()
is.null(mod.enrich)
mod.enrich
mod.enrich
is.null(mod.enrich)
mod.enrich[9132,]
is.null(mod.enrich$parents)
?is.null
mod.enrich==NULL
mod.enrich$parents==NULL
mod.enrich$parents==NULL
View(mod.enrich)
mod.enrich==<NULL>
mod.enrich=="<NULL>"
mod.enrich[9132,]=="<NULL>"
mod.enrich[9132,]==NULL
is.null(mod.enrich[9132,])
mod.enrich[9132,]
mod.enrich[is.null(mod.enrich) ] <- NA
mod.enrich
mod.enrich[9132,]
mod.enrich[is.null(mod.enrich)] <- 0
mod.enrich[9132,]
mod.enrich == "NULL"
mod.enrich[9132,]=="NULL"
is.na(mod.enrich) <- mod.enrich == "NULL"
mod.enrich[9132,]=="NULL"
mod.enrich
mod.enrich[9132,]
data.table::fwrite(mod.enrich, mod.enrich.path, sep="\t")
# Merge
mod.enrich <- data.table::rbindlist(list(bulk.mod.enrich, sc.mod.enrich))
# Correct for multiple tests
mod.enrich <- mod.enrich %>% dplyr::mutate(FDR = p.adjust(p_value, method="fdr"),
Bonferroni = p.adjust(p_value, method="bonferroni")) %>% data.frame()
mod.enrich[mod.enrich == "NULL"] <- NA
mod.enrich[9132,]
data.table::fwrite(mod.enrich, mod.enrich.path, sep="\t")
file.exists(mod.enrich.path)
mod.enrich <- data.table::fread(mod.enrich.path)
mod.enrich
mod.enrich.path <- "./Results/gprofiler2.module.enrichment.txt"
if(file.exists(mod.enrich.path)){
mod.enrich <- data.table::fread(mod.enrich.path)
} else {
bulk.mod.enrich <- gprofiler2.module_enrichment(bulk.modules, dataset = "bulk-RNA-seq")
sc.mod.enrich <- gprofiler2.module_enrichment(sc.modules, dataset = "sc-RNA-seq")
# Merge
mod.enrich <- data.table::rbindlist(list(bulk.mod.enrich, sc.mod.enrich))
# Correct for multiple tests
mod.enrich <- mod.enrich %>% dplyr::mutate(FDR = p.adjust(p_value, method="fdr"),
Bonferroni = p.adjust(p_value, method="bonferroni")) %>% data.frame()
mod.enrich[mod.enrich == "NULL"] <- NA # is.na(mod.enrich) <- mod.enrich == "NULL"
data.table::fwrite(mod.enrich, mod.enrich.path, sep="\t")
}
mod.enrich.sig <- subset(mod.enrich, Bonferroni <= 0.05)
createDT(head(mod.enrich.sig))
print(paste("Module GO Enrichment file detected. Importing...",mod.enrich.path))
htmltools::tag(hm)
htmltools::tagList(setNames(list(hm), NULL))
# library(heatmaply)
mod.cast <- reshape2::acast(MOD.dt,
Module1.name~Module2.name,
value.var="Jaccard.index")
hm <- heatmaply::heatmaply(mod.cast,
k_row = 5, k_col = 5,
height = 10,
column_text_angle = 0,
xlab = "scRNA-seq Louvain Modules",
ylab = "bulk RNA-seq WGCNA Modules",
cexRow = .7,
key.title = "Jaccard Index",
file = "module-module.heatmap.html")
# shiny::includeHTML("module-module.heatmap.html")
htmltools::tagList(setNames(list(hm), NULL))
htmltools::tagList(setNames(list(p.3d), NULL))
ggp <- plotly::ggplotly(sp, tooltip ="text" )
htmltools::tagList(setNames(list(ggp), NULL))
htmltools::tagList(list(ggp))
plot_cells_3d
start_time <- Sys.time()
#### #### Load Objects & Functions #### ####
######################################################
# Import functions
root = "./"
source(file.path(root,"MAIN.R"))
import_parameters(params)
# load("Results/Current_Pipeline/scRNAseq_results.RData")
load(file.path(resultsPath, "3-11-2019/scRNAseq_results.RData"))
# load(file.path("Data", "monocle3_CDS.RData"))
######################################################
#### #### PACKAGES #### ####
######################################################
print("Written using: Seurat version* 2.3.4 2018-07-17")
# https://satijalab.org/seurat/install.html
# source("http://bit.ly/archived-seurat")
library(Seurat)
paste("Seurat", packageVersion("Seurat"))
# library(monocle) # BiocManager::install("monocle")
# paste("monocle", packageVersion("monocle"))
library(monocle3)
paste("monocle3", packageVersion("monocle3"))
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
paste("garnett", packageVersion("garnett"))
library(cowplot)
library(ggplot2)
library(dplyr)
library(data.table)
library(readxl)
library(reshape2)
library(ggrepel)
library(plotly)
library(GeneOverlap) # BiocManager::install("GeneOverlap")
######################################################
# Exporting 3D plots
knitr::knit_hooks$set(webgl = rgl::hook_webgl)
dge_limit <- F # 100
nCores <- 4#parallel::detectCores()
set.seed(2019)
start_time <- Sys.time()
#### #### Load Objects & Functions #### ####
######################################################
# Import functions
root = "./"
source(file.path(root,"MAIN.R"))
import_parameters(params)
# load("Results/Current_Pipeline/scRNAseq_results.RData")
load(file.path(resultsPath, "3-11-2019/scRNAseq_results.RData"))
# load(file.path("Data", "monocle3_CDS.RData"))
######################################################
#### #### PACKAGES #### ####
######################################################
print("Written using: Seurat version* 2.3.4 2018-07-17")
# https://satijalab.org/seurat/install.html
# source("http://bit.ly/archived-seurat")
library(Seurat)
paste("Seurat", packageVersion("Seurat"))
# library(monocle) # BiocManager::install("monocle")
# paste("monocle", packageVersion("monocle"))
library(monocle3)
paste("monocle3", packageVersion("monocle3"))
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
paste("garnett", packageVersion("garnett"))
library(cowplot)
library(ggplot2)
library(dplyr)
library(data.table)
library(readxl)
library(reshape2)
library(ggrepel)
library(plotly)
######################################################
# Exporting 3D plots
knitr::knit_hooks$set(webgl = rgl::hook_webgl)
dge_limit <- F # 100
nCores <- 4#parallel::detectCores()
set.seed(2019)
biotypes <- get_biotypes(DAT)
DAT
start_time <- Sys.time()
#### #### Load Objects & Functions #### ####
######################################################
# Import functions
root = "./"
source(file.path(root,"MAIN.R"))
import_parameters(params)
# load("Results/Current_Pipeline/scRNAseq_results.RData")
# load(file.path(resultsPath, "3-11-2019/scRNAseq_results.RData"))
load(file.path("Data", "monocle3_CDS.RData"))
######################################################
#### #### PACKAGES #### ####
######################################################
print("Written using: Seurat version* 2.3.4 2018-07-17")
# https://satijalab.org/seurat/install.html
# source("http://bit.ly/archived-seurat")
library(Seurat)
paste("Seurat", packageVersion("Seurat"))
# library(monocle) # BiocManager::install("monocle")
# paste("monocle", packageVersion("monocle"))
library(monocle3)
paste("monocle3", packageVersion("monocle3"))
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
paste("garnett", packageVersion("garnett"))
library(cowplot)
library(ggplot2)
library(dplyr)
library(data.table)
library(readxl)
library(reshape2)
library(ggrepel)
library(plotly)
######################################################
# Exporting 3D plots
knitr::knit_hooks$set(webgl = rgl::hook_webgl)
dge_limit <- F # 100
nCores <- 4#parallel::detectCores()
set.seed(2019)
cds <- monocle3::preprocess_cds(cds,
num_dim = 20, #100 by default
residual_model_formula_str = "~ nUMI + percent.mito")
monocle3::plot_pc_variance_explained(cds)
# Import functions
import_parameters(params)
# Import parameters supplied through yaml header
import_parameters <- function(params){
params_list <- list(
resultsPath=params$resultsPath,
# nCores=as.numeric(params$nCores),
subsetGenes=params$subsetGenes,
subsetCells=params$subsetCells,
resolution=params$resolution,
perplexity=as.numeric(params$perplexity)
)
# Have to setwd via knitr
knitr::opts_chunk$set(echo=T, error=T, root.dir = params$resultsPath
# cache=T, cache.lazy=T
)
# Utilize parallel processing later on
cat("**** __Utilized Cores__ **** =", params$nCores)
bindingIsLocked("params", env = .GlobalEnv)
unlockBinding("params", env = .GlobalEnv)
print(params)
for (n in names(params_list) ){
assign(n, params_list[n],  env = .GlobalEnv)
}
}
# Import functions
import_parameters(params)
# Import functions
import_parameters(params)
library(gprofiler2)
library(dplyr)
library(ggplot2)
root = "./"
source(file.path(root,"MAIN.R"))
load("./Data/monocle3_CDS.RData")
nCores <- 4
