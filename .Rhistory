ERcolors = sample(c("black","white","grey"), length(markerDF$post_clustering), replace = TRUE, prob = NULL)
ERcolors
rlab=t(cbind(
sample(c("black","white","grey"), length(markerDF$post_clustering), replace = TRUE, prob = NULL),
sample(c("black","white","grey"), length(markerDF$dx), replace = TRUE, prob = NULL)
))
rlab
heatmap.3(markerMelt, dendrogram = 'row', kr = length(unique(markerDF)), labRow.by.group = T, labRow = F,
xlab = "Biomarker", ylab = "Cell", RowSideColors = rlab, RowSideColorsSize=2)
heatmap.3(markerMelt, dendrogram = 'row', labRow = F,
xlab = "Biomarker", ylab = "Cell", RowSideColors = rlab, RowSideColorsSize=2)
heatmap.3(markerMelt, dendrogram = 'row', labRow = F,
xlab = "Biomarker", ylab = "Cell", RowSideColors = rlab, RowSideColorsSize=2)
heatmap.2(markerMelt, key.title="Expression",  col = viridis(300), trace="none",
labRow = F, xlab = "Biomarker", ylab="Cell", cexCol=1, RowSideColors = myCols
)
heatmap.3(markerMelt, dendrogram = 'row', kr = length(unique(markerDF)), labRow.by.group = T, labRow = F,
xlab = "Biomarker", ylab = "Cell", RowSideColors = rlab, RowSideColorsSize=2,  col = viridis(300))
heatmap.3(markerMelt, dendrogram = 'row', kr = length(unique(markerDF)) labRow = F,
xlab = "Biomarker", ylab = "Cell", RowSideColors = rlab, RowSideColorsSize=2,  col = viridis(300))
heatmap.3(markerMelt, dendrogram = 'row', kr = length(unique(markerDF)),labRow = F,
xlab = "Biomarker", ylab = "Cell", RowSideColors = rlab, RowSideColorsSize=2,  col = viridis(300))
heatmap.3(markerMelt, dendrogram = 'row', kr = length(unique(markerDF)), labRow.by.group = T, labRow = F,
xlab = "Biomarker", ylab = "Cell", RowSideColors = rlab, RowSideColorsSize=2)
heatmap.3(markerMelt, dendrogram = 'row', kr = length(unique(markerDF)), labRow = F,
xlab = "Biomarker", ylab = "Cell", RowSideColors = rlab, RowSideColorsSize=2, col = viridis(300))
heatmap.3(markerMelt, dendrogram = 'row', kr = length(unique(markerDF)), labRow = F,
xlab = "Biomarker", ylab = "Cell", RowSideColors = rlab, RowSideColorsSize=2, col = rev(heat.colors(75)))
var_to_colors <- function(markerDF, metaVar){
colors <- brewer.pal(length(unique(markerDF[metaVar]) ), "Dark2")
sample(colors, length(markerDF[metaVar]), replace = TRUE, prob = NULL)
# metaColors <- colors[ subset(markerDF, Gene==markerList[1])[metaVar][,1] %>% as.factor() ]
return(metaColors)
}
# packageurl <- "https://cran.r-project.org/src/contrib/Archive/GMD/GMD_0.3.3.tar.gz"
# install.packages(packageurl, repos=NULL, type="source")
var_to_colors(markerDF, dx)
# packageurl <- "https://cran.r-project.org/src/contrib/Archive/GMD/GMD_0.3.3.tar.gz"
# install.packages(packageurl, repos=NULL, type="source")
var_to_colors(markerDF, dx)
var_to_colors <- function(markerDF, metaVar){
colors <- brewer.pal(length(unique(markerDF[metaVar]) ), "Dark2")
sample(colors, length(markerDF[metaVar]), replace = TRUE, prob = NULL)
# metaColors <- colors[ subset(markerDF, Gene==markerList[1])[metaVar][,1] %>% as.factor() ]
return(metaColors)
}
# packageurl <- "https://cran.r-project.org/src/contrib/Archive/GMD/GMD_0.3.3.tar.gz"
# install.packages(packageurl, repos=NULL, type="source")
var_to_colors(markerDF, dx)
# packageurl <- "https://cran.r-project.org/src/contrib/Archive/GMD/GMD_0.3.3.tar.gz"
# install.packages(packageurl, repos=NULL, type="source")
var_to_colors(markerDF, "dx")
rlab=t(cbind(
var_to_colors(markerDF, "post_clustering"),
var_to_colors(markerDF, "dx")
))
rlab
heatmap.3(markerMelt, dendrogram = 'row', kr = length(unique(markerDF)), labRow = F,
xlab = "Biomarker", ylab = "Cell", RowSideColors = rlab, RowSideColorsSize=2, col = viridis(300))
heatmap.3(markerMelt, dendrogram = 'row', kr = length(unique(markerDF)), labRow = F,
xlab = "Biomarker", ylab = "Cell", RowSideColors = rlab,   col = viridis(300))
heatmap.3(markerMelt, dendrogram = 'row', kr = length(unique(markerDF)), labRow = F,
xlab = "Biomarker", ylab = "Cell", RowSideColors = rlab, RowSideColorsSize=2 )
install.packages("ComplexHeatmap")
BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap); #BiocManager::install("ComplexHeatmap")
detach("package:GMD", unload=TRUE)
ComplexHeatmap::Heatmap(markerMelt)
ha = HeatmapAnnotation(df = markerDF, points = anno_points(pos_clustering))
ha = HeatmapAnnotation(df = markerDF, points = anno_points(post_clustering))
ha = HeatmapAnnotation(df = markerDF, points = anno_points(value))
ha = HeatmapAnnotation(df = markerDF)
ha
ha = HeatmapAnnotation(df = markerDF[c("post_clustering","dx")])
library(ComplexHeatmap); #BiocManager::install("ComplexHeatmap")
Heatmap(mat, name = "foo",   left_annotation= bottom_annotation_height = unit(2, "cm"))
Heatmap(markerMelt,   left_annotation= bottom_annotation_height = unit(2, "cm"))
Heatmap(markerMelt,   left_annotation= ha)
ha = HeatmapAnnotation(df = markerDF[c("post_clustering","dx")], which = "row")
Heatmap(markerMelt ) + ha
ha = HeatmapAnnotation(df = markerDF[c("post_clustering","dx")], which = "row", col=viridis(300))
viridis(300)
ha = HeatmapAnnotation(df = markerDF[c("post_clustering","dx")], which = "row", col=list(viridis(300)))
ha = HeatmapAnnotation(df = markerDF[c("post_clustering","dx")], which = "row", col=list(vird=viridis(300)))
Heatmap(markerMelt, col=viridis(300) ) + ha
Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell") + ha
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell", row_names_side = F) + ha
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell", row_names_side = NULL) + ha
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_names= NULL) + ha
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_names_gp = NULL) + ha
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_title_side = NULL) + ha
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",  row_dend_reorder = F ) + ha
markerDF[metaVar]
sample(colors, length(unique(markerDF[metaVar])), replace = TRUE, prob = NULL)
var_to_colors <- function(markerDF, metaVar){
colors <- brewer.pal(length(unique(markerDF[metaVar]) ), "Dark2")
sample(colors, length(unique(markerDF[metaVar])), replace = TRUE, prob = NULL)
# metaColors <- colors[ subset(markerDF, Gene==markerList[1])[metaVar][,1] %>% as.factor() ]
return(metaColors)
}
ha = HeatmapAnnotation(df = markerDF[c("post_clustering","dx")], which = "row")
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",  row_dend_reorder = F ) + ha
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",  row_dend_reorder = F, row_names_side = NULL ) + ha
markerDF <- markerDF %>% arrange(post_clustering)
ha = HeatmapAnnotation(df = markerDF[c("post_clustering","dx")], which = "row")
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F, row_names_side = NULL ) + ha
markerDF
markerDF <- markerDF %>% arrange(post_clustering) %>%  mutate_at(vars(post_clustering), as.factor)
markerDF
markerDF <- markerDF %>% arrange(post_clustering) %>%
mutate_at(vars(post_clustering, dx, mut, CellType_DGE, CellType_AvgExp), as.factor)
ha = HeatmapAnnotation(df = markerDF[c("post_clustering","dx")], which = "row")
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F, row_names_side = NULL ) + ha
ha = HeatmapAnnotation(df = markerDF[c("post_clustering","dx","mut","CellType_DGE","CellType_AvgExp")], which = "row")
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F, row_names_side = NULL ) + ha
markerDF <- get_markerDF(pbmc, markerList,
meta_vars =c("barcode", "dx", "mut","post_clustering", "percent.mito","nGene", "nUMI",
"CellType_DGE","CellType_AvgExp"))
Spectral <- grDevices::colorRampPalette(RColorBrewer::brewer.pal(length(unique(pbmc@meta.data$mut)), "Spectral"))
if (interactive==T){
# Spectral <- heatmaply::Spectral(length(unique(pbmc@meta.data$mut)))
markerMelt <- reshape2::acast(markerDF, Cell~Gene, value.var="Expression", fun.aggregate = mean, drop = F, fill = 0)
heatmaply::heatmaply(markerMelt,  key.title="Expression",#plot_method= "ggplot",
k_row = dim(markerMelt)[2], dendrogram = "row",
showticklabels = c(T, F), xlab = "Known Markers", ylab = "Cells", column_text_angle = 45,
row_side_colors =  pbmc@meta.data[,c("dx","mut", "CellType_DGE")], row_side_palette = Spectral
)  %>%  colorbar(tickfont = list(size = 12), titlefont = list(size = 14), which = 2)  %>%
colorbar(tickfont = list(size = 12), titlefont = list(size = 14), which = 1)
}else{
# markerDF_sub <-subset(markerDF, Gene==markerList[1])
# var_to_colors(markerDF_sub, "post_clustering")
# library(pheatmap)
# pheatmap(markerMelt, annotation_row = markerDF_sub[c("dx","mut","CellType_DGE", "CellType_AvgExp")])
# pheatmap(markerMelt, kmeans_k = NA, annotation_row = markerDF_sub[c("dx","mut","CellType_DGE", "CellType_AvgExp")],
#         cluster_cols = F, cutree_rows = length(unique(markerDF$post_clustering)),  angle_col=45 )
library(RColorBrewer)
var_to_colors <- function(markerDF, metaVar){
colors <- brewer.pal(length(unique(markerDF[metaVar]) ), "Dark2")
sample(colors, length(unique(markerDF[metaVar])), replace = TRUE, prob = NULL)
# metaColors <- colors[ subset(markerDF, Gene==markerList[1])[metaVar][,1] %>% as.factor() ]
return(metaColors)
}
# library(GMD)
# myCols = cbind(var_to_colors(markerDF, "dx"), var_to_colors(markerDF, "mut"))
# rlab=t(cbind(
#   var_to_colors(markerDF, "post_clustering"),
#   var_to_colors(markerDF, "dx")
#   ))
# heatmap.3(markerMelt, dendrogram = 'row', kr = length(unique(markerDF)), labRow = F,
#           xlab = "Biomarker", ylab = "Cell", RowSideColors = rlab, RowSideColorsSize=2 )
library(ComplexHeatmap); #BiocManager::install("ComplexHeatmap")
markerDF <- markerDF %>% arrange(post_clustering) %>%
mutate_at(vars(post_clustering, dx, mut, CellType_DGE, CellType_AvgExp), as.factor)
ha = HeatmapAnnotation(df = markerDF[c("post_clustering","dx","mut","CellType_DGE","CellType_AvgExp")], which = "row")
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F, row_names_side = NULL ) + ha
# heatmap.2(markerMelt, key.title="Expression",  col = viridis(300), trace="none",
#           labRow = F, xlab = "Biomarker", ylab="Cell", cexCol=1, RowSideColors = myCols
#           )
}
markerDF <- get_markerDF(pbmc, markerList,
meta_vars =c("barcode", "dx", "mut","post_clustering", "percent.mito","nGene", "nUMI",
"CellType_DGE","CellType_AvgExp"))
Spectral <- grDevices::colorRampPalette(RColorBrewer::brewer.pal(length(unique(pbmc@meta.data$mut)), "Spectral"))
if (interactive==T){
# Spectral <- heatmaply::Spectral(length(unique(pbmc@meta.data$mut)))
markerMelt <- reshape2::acast(markerDF, Cell~Gene, value.var="Expression", fun.aggregate = mean, drop = F, fill = 0)
heatmaply::heatmaply(markerMelt,  key.title="Expression",#plot_method= "ggplot",
k_row = dim(markerMelt)[2], dendrogram = "row",
showticklabels = c(T, F), xlab = "Known Markers", ylab = "Cells", column_text_angle = 45,
row_side_colors =  pbmc@meta.data[,c("dx","mut", "CellType_DGE")], row_side_palette = Spectral
)  %>%  colorbar(tickfont = list(size = 12), titlefont = list(size = 14), which = 2)  %>%
colorbar(tickfont = list(size = 12), titlefont = list(size = 14), which = 1)
}else{
# markerDF_sub <-subset(markerDF, Gene==markerList[1])
# var_to_colors(markerDF_sub, "post_clustering")
# library(pheatmap)
# pheatmap(markerMelt, annotation_row = markerDF_sub[c("dx","mut","CellType_DGE", "CellType_AvgExp")])
# pheatmap(markerMelt, kmeans_k = NA, annotation_row = markerDF_sub[c("dx","mut","CellType_DGE", "CellType_AvgExp")],
#         cluster_cols = F, cutree_rows = length(unique(markerDF$post_clustering)),  angle_col=45 )
library(RColorBrewer)
var_to_colors <- function(markerDF, metaVar){
colors <- brewer.pal(length(unique(markerDF[metaVar]) ), "Dark2")
sample(colors, length(unique(markerDF[metaVar])), replace = TRUE, prob = NULL)
# metaColors <- colors[ subset(markerDF, Gene==markerList[1])[metaVar][,1] %>% as.factor() ]
return(metaColors)
}
# library(GMD)
# myCols = cbind(var_to_colors(markerDF, "dx"), var_to_colors(markerDF, "mut"))
# rlab=t(cbind(
#   var_to_colors(markerDF, "post_clustering"),
#   var_to_colors(markerDF, "dx")
#   ))
# heatmap.3(markerMelt, dendrogram = 'row', kr = length(unique(markerDF)), labRow = F,
#           xlab = "Biomarker", ylab = "Cell", RowSideColors = rlab, RowSideColorsSize=2 )
library(ComplexHeatmap); #BiocManager::install("ComplexHeatmap")
markerDF <- markerDF %>% arrange(post_clustering) %>%
mutate_at(vars(post_clustering, dx, mut, CellType_DGE, CellType_AvgExp), as.factor)
ha = HeatmapAnnotation(df = markerDF[c("post_clustering","dx","mut","CellType_DGE","CellType_AvgExp")], which = "row")
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F, row_names_side = NULL ) + ha
# heatmap.2(markerMelt, key.title="Expression",  col = viridis(300), trace="none",
#           labRow = F, xlab = "Biomarker", ylab="Cell", cexCol=1, RowSideColors = myCols
#           )
}
markerDF
markerDF <- markerDF %>% arrange(post_clustering) %>%
mutate_at(vars(post_clustering, dx, mut, CellType_DGE, CellType_AvgExp), as.factor)
ha = HeatmapAnnotation(df = markerDF[c("post_clustering","dx","mut","CellType_DGE","CellType_AvgExp")], which = "row")
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F, row_names_side = NULL ) + ha
library(ComplexHeatmap); #BiocManager::install("ComplexHeatmap")
markerDF <- markerDF %>% arrange(post_clustering) %>%
mutate_at(vars(post_clustering, dx, mut, CellType_DGE, CellType_AvgExp), as.factor)
ha = HeatmapAnnotation(df = markerDF[c("post_clustering","dx","mut","CellType_DGE","CellType_AvgExp")], which = "row")
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F, row_names_side = NULL ) + ha
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F, row_names_side = NULL ) rowAnnotation(labels = "")+ ha
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F, row_names_side = NULL )+ rowAnnotation(labels = "")+ ha
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_col_dend =  F) + ha
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F) + ha
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = NULL,show_row_names = F, show_column_dend = F) + ha
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F, column_title_rot = 0) + ha
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F, column_title_rot = 90) + ha
markerDF
markerDF <- markerDF %>% arrange(post_clustering) %>%
mutate_at(vars(post_clustering, dx, mut, CellType_DGE, CellType_AvgExp), as.factor)
markerMelt <- reshape2::acast(markerDF, Cell~Gene, value.var="Expression", fun.aggregate = mean, drop = F, fill = 0)
ha = HeatmapAnnotation(df = markerDF[c("post_clustering","dx","mut","CellType_DGE","CellType_AvgExp")], which = "row")
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F,show_row_dend =F) + ha
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F,show_row_dend =T) + ha
markerDF
markerDF[c("post_clustering","dx","mut","CellType_DGE","CellType_AvgExp")]
heatmap.2(markerMelt, key.title="Expression",  col = viridis(300), trace="none",
labRow = F, xlab = "Biomarker", ylab="Cell", cexCol=1, RowSideColors = myCols
)
heatmap.2(markerMelt, key.title="Expression",  col = viridis(300), trace="none",
labRow = F, xlab = "Biomarker", ylab="Cell", cexCol=1, RowSideColors = rlab
)
heatmap.2(markerMelt, key.title="Expression",  col = viridis(300), trace="none",
labRow = F, xlab = "Biomarker", ylab="Cell", cexCol=1, RowSideColors = var_to_colors(markerDF, "post_clustering")
)
heatmap.2(markerMelt, key.title="Expression",  col = viridis(300), trace="none",Colv = F, Rowv = F<
labRow = F, xlab = "Biomarker", ylab="Cell", cexCol=1, RowSideColors = var_to_colors(markerDF, "post_clustering")
)
heatmap.2(markerMelt, key.title="Expression",  col = viridis(300), trace="none",Colv = F, Rowv = F,
labRow = F, xlab = "Biomarker", ylab="Cell", cexCol=1, RowSideColors = var_to_colors(markerDF, "post_clustering")
)
melt(markerDF, id.vars = c("Cell", "Gene"))
markerDF
markerMelt <- reshape2:::melt.data.frame(marker.matrix, id.vars = "Gene", variable.name = "Cell",value.name = "Expression")
markerMelt <- reshape2:::melt.data.frame(markerDF, id.vars = "Gene", variable.name = "Cell",value.name = "Expression")
markerMelt
spread(markerDF, key = "Gene", value = "Expression")
spread(markerDF, key = "Gene", value = "Expression")
?spread
dcast(markerDF, Cell~Gene,fun.aggregate = mean)
dcast(markerDF, Cell~Gene,fun.aggregate = mean, fill=Expression)
dcast(markerDF, Cell~Gene,fun.aggregate = mean(Expression) )
dcast(markerDF, Cell~Gene,fun.aggregate = mean(markerDF$Expression) )
dcast(markerDF, Cell~Gene,fun.aggregate = mean,value.var = Expression )
dcast(markerDF, Cell~Gene,fun.aggregate = mean, value.var = "Expression" )
markerMelt
markerMelt <- reshape2::acast(markerDF, Cell~Gene, value.var="Expression", fun.aggregate = mean, drop = F, fill = 0)
markerMelt
# markerMelt <- reshape2::acast(markerDF, Cell~Gene, value.var="Expression", fun.aggregate = mean, drop = F, fill = 0)
melt(markerDF, id.vars = c("Cell", "Gene"), measure.vars = "Expression")
# markerMelt <- reshape2::acast(markerDF, Cell~Gene, value.var="Expression", fun.aggregate = mean, drop = F, fill = 0)
melt(markerDF, id.vars = c("Cell", "Gene"), value.name = "Expression")
# markerMelt <- reshape2::acast(markerDF, Cell~Gene, value.var="Expression", fun.aggregate = mean, drop = F, fill = 0)
melt(markerDF, id.vars = c("Cell", "Gene"),measure.vars = "Expression")
# markerMelt <- reshape2::acast(markerDF, Cell~Gene, value.var="Expression", fun.aggregate = mean, drop = F, fill = 0)
melt(markerDF, id.vars = c("Gene"),measure.vars = "Expression")
dcast(markerDF, Cell~Gene,fun.aggregate = mean, value.var = "Expression",)
markerMelt <- dcast(markerDF, Cell~Gene,fun.aggregate = mean, value.var = "Expression")
ha = HeatmapAnnotation(df = markerDF[c("post_clustering","dx","mut","CellType_DGE","CellType_AvgExp")], which = "row")
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F,show_row_dend =T) + ha
markerMelt <- dcast(markerDF, Cell~Gene+dx,fun.aggregate = mean, value.var = "Expression")
markerMelt
markerMelt <- dcast(markerDF, dx+Cell~Gene,fun.aggregate = mean, value.var = "Expression")
markerMelt
markerMelt <- dcast(markerDF,  Cell +post_clustering+ dx + mut +CellType_DGE+CellType_AvgExp ~Gene,fun.aggregate = mean, value.var = "Expression")
markerMelt
heatmap.2(markerMelt[markerList], key.title="Expression",  col = viridis(300), trace="none",Colv = F, Rowv = F,
labRow = F, xlab = "Biomarker", ylab="Cell", cexCol=1, RowSideColors = var_to_colors(markerDF, "post_clustering")
)
markerMelt[markerList]
heatmap.2(markerMelt[markerList], key.title="Expression",  col = viridis(300), trace="none",Colv = F, Rowv = F,
labRow = F, xlab = "Biomarker", ylab="Cell", cexCol=1, RowSideColors = var_to_colors(markerDF, "post_clustering")
)
markerMelt[markerList] %>%as.matrix()
heatmap.2(markerMelt[markerList] %>%as.matrix(), key.title="Expression",  col = viridis(300), trace="none",Colv = F, Rowv = F,
labRow = F, xlab = "Biomarker", ylab="Cell", cexCol=1, RowSideColors = var_to_colors(markerDF, "post_clustering")
)
markerMelt
markerMelt <- dcast(markerDF,  Cell +post_clustering+ dx + mut +CellType_DGE+CellType_AvgExp ~Gene,
fun.aggregate = mean, value.var = "Expression") %>% arrange(post_clustering)
heatmap.2(markerMelt[markerList] %>%as.matrix(), key.title="Expression",  col = viridis(300), trace="none",Colv = F, Rowv = F,
labRow = F, xlab = "Biomarker", ylab="Cell", cexCol=1, RowSideColors = var_to_colors(markerDF, "post_clustering")
)
markerMelt
ha = HeatmapAnnotation(df = markerMelt[c("post_clustering","dx","mut","CellType_DGE","CellType_AvgExp")], which = "row")
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F,show_row_dend =T) + ha
ha = HeatmapAnnotation(df = markerDF[c("post_clustering","dx","mut","CellType_DGE","CellType_AvgExp")], which = "row")
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F,show_row_dend =T) + ha
ha = HeatmapAnnotation(df = markerDF[c("post_clustering","dx","mut","CellType_DGE","CellType_AvgExp")], which = "row")
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F,show_row_dend =T) + ha
ComplexHeatmap::Heatmap(markerMelt, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F,show_row_dend =T) #+ ha
markerMelt
row.names(marker.matrix) <- markerMelt$post_clustering
marker.matrix <- markerMelt[markerList] %>%as.matrix()
row.names(marker.matrix) <- markerMelt$post_clustering
marker.matrix
heatmap.2(marker.matrix, key.title="Expression",  col = viridis(300), trace="none",Colv = F, Rowv = F,
labRow = F, xlab = "Biomarker", ylab="Cell", cexCol=1, RowSideColors = var_to_colors(markerDF, "post_clustering")
)
ComplexHeatmap::Heatmap(marker.matrix, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F,show_row_dend =T) + ha
markerMelt <- dcast(markerDF,  Cell +post_clustering+ dx + mut +CellType_DGE+CellType_AvgExp ~Gene,
fun.aggregate = mean, value.var = "Expression") %>% arrange(post_clustering)
marker.matrix <- markerMelt[markerList] %>%as.matrix()
row.names(marker.matrix) <- markerMelt$Cell
ha = HeatmapAnnotation(df = markerDF[c("post_clustering","dx","mut","CellType_DGE","CellType_AvgExp")], which = "row")
ComplexHeatmap::Heatmap(marker.matrix, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F,show_row_dend =T) + ha
markerDF <- markerDF %>% arrange(post_clustering) %>%
mutate_at(vars(dx, mut, CellType_DGE, CellType_AvgExp), as.factor)
# markerMelt <- reshape2::acast(markerDF, Cell~Gene, value.var="Expression", fun.aggregate = mean, drop = F, fill = 0)
markerMelt <- dcast(markerDF,  Cell +post_clustering+ dx + mut +CellType_DGE+CellType_AvgExp ~Gene,
fun.aggregate = mean, value.var = "Expression") %>% arrange(post_clustering)
marker.matrix <- markerMelt[markerList] %>%as.matrix()
row.names(marker.matrix) <- markerMelt$Cell
ha = HeatmapAnnotation(df = markerDF[c("post_clustering","dx","mut","CellType_DGE","CellType_AvgExp")], which = "row")
heatmap.2(marker.matrix, key.title="Expression",  col = viridis(300), trace="none",Colv = F, Rowv = F,
labRow = F, xlab = "Biomarker", ylab="Cell", cexCol=1, RowSideColors = var_to_colors(markerDF, "post_clustering")
)
ComplexHeatmap::Heatmap(marker.matrix, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F,show_row_dend =T) + ha
ha = HeatmapAnnotation(df = markerDF[c("dx","mut","CellType_DGE","CellType_AvgExp")], which = "row")
ComplexHeatmap::Heatmap(marker.matrix, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F,show_row_dend =T) + ha
ComplexHeatmap::Heatmap(marker.matrix, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F,show_row_dend =T, cluster_rows = F) + ha
ha = HeatmapAnnotation(df = markerDF[c("dx","mut","CellType_DGE","CellType_AvgExp","post_clustering")], which = "row")
ComplexHeatmap::Heatmap(marker.matrix, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F,show_row_dend =T, cluster_rows = F) + ha
ha = HeatmapAnnotation(df = markerDF[c("dx","mut","CellType_DGE","CellType_AvgExp")], which = "row")
ComplexHeatmap::Heatmap(marker.matrix, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F,show_row_dend =T, cluster_rows = T) + ha
ComplexHeatmap::Heatmap(marker.matrix, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F,show_row_dend =T,
cluster_rows = T, column_title_side = "bottom") + ha
View(pbmc@meta.data)
# (Doesn't make sense to do bar plot because whole clusters are defined by their biomarkers)
pbmc@meta.data$singlet.or.not.binary %>% unique()
pbmc@meta.data$ID
tSNE_metadata_plot("ID")
# markerMelt <- reshape2::acast(markerDF, Cell~Gene, value.var="Expression", fun.aggregate = mean, drop = F, fill = 0)
markerMelt <- dcast(markerDF,  Cell + post_clustering + dx + mut + ID + CellType_DGE + CellType_AvgExp ~ Gene,
fun.aggregate = mean, value.var = "Expression") %>% arrange(post_clustering)
marker.matrix <- markerMelt[markerList] %>%as.matrix()
# markerMelt <- reshape2::acast(markerDF, Cell~Gene, value.var="Expression", fun.aggregate = mean, drop = F, fill = 0)
markerMelt <- dcast(markerDF,  Cell + post_clustering + dx + mut + ID + CellType_DGE + CellType_AvgExp ~ Gene,
fun.aggregate = mean, value.var = "Expression") %>% arrange(post_clustering)
markerDF <- markerDF %>%
mutate_at(vars(post_clustering, dx, mut, ID, CellType_DGE, CellType_AvgExp), as.factor) %>%
arrange(post_clustering)
# markerMelt <- reshape2::acast(markerDF, Cell~Gene, value.var="Expression", fun.aggregate = mean, drop = F, fill = 0)
markerMelt <- dcast(markerDF,  Cell + post_clustering + dx + mut + ID + CellType_DGE + CellType_AvgExp ~ Gene,
fun.aggregate = mean, value.var = "Expression") %>% arrange(post_clustering)
markerDF <- get_markerDF(pbmc, markerList,
meta_vars =c("barcode", "dx", "mut","ID","post_clustering", "percent.mito","nGene", "nUMI",
"CellType_DGE","CellType_AvgExp"))
Spectral <- grDevices::colorRampPalette(RColorBrewer::brewer.pal(length(unique(pbmc@meta.data$mut)), "Spectral"))
markerDF <- markerDF %>%
mutate_at(vars(post_clustering, dx, mut, ID, CellType_DGE, CellType_AvgExp), as.factor) %>%
arrange(post_clustering)
# markerMelt <- reshape2::acast(markerDF, Cell~Gene, value.var="Expression", fun.aggregate = mean, drop = F, fill = 0)
markerMelt <- dcast(markerDF,  Cell + post_clustering + dx + mut + ID + CellType_DGE + CellType_AvgExp ~ Gene,
fun.aggregate = mean, value.var = "Expression") %>% arrange(post_clustering)
marker.matrix <- markerMelt[markerList] %>%as.matrix()
row.names(marker.matrix) <- markerMelt$Cell
ha = HeatmapAnnotation(df = markerDF[c("dx","mut","ID","CellType_DGE","CellType_AvgExp")], which = "row")
ComplexHeatmap::Heatmap(marker.matrix, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F,show_row_dend =T,
cluster_rows = T, column_title_side = "bottom") + ha
ComplexHeatmap::Heatmap(marker.matrix, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F,show_row_dend =T,
cluster_rows = T, column_title_side = "bottom",km_title = "Expression") + ha
marker.matrix
markerMelt
ComplexHeatmap::Heatmap(marker.matrix, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F,show_row_dend =T,
cluster_rows = T, column_title_side = "bottom",km = length(unique(markerMelt$post_clustering))) + ha
markerDF <- markerDF %>% mutate(Cluster = post_clustering)
# Show mean exp for each marker
avgMarker <- markerDF %>% group_by(Gene, Cluster) %>% summarise(meanExp = mean(Expression))
p <- ggplot(data = avgMarker, aes(x=Gene, y=Cluster, fill=meanExp)) %>% + geom_tile() %>% + scale_fill_distiller(palette="viridis")
ifelse(interactive, p %>% ggplotly() %>% toWebGL() %>% print(), p)
markerDF <- markerDF %>% mutate(Cluster = post_clustering)
# Show mean exp for each marker
avgMarker <- markerDF %>% group_by(Gene, Cluster) %>% summarise(meanExp = mean(Expression))
p <- ggplot(data = avgMarker, aes(x=Gene, y=Cluster, fill=meanExp)) %>% + geom_tile() %>% + scale_fill_distiller(palette="viridis")
ifelse(interactive, p %>% ggplotly() %>% toWebGL() %>% print(), show(p))
markerDF <- markerDF %>% mutate(Cluster = post_clustering)
# Show mean exp for each marker
avgMarker <- markerDF %>% group_by(Gene, Cluster) %>% summarise(meanExp = mean(Expression))
p <- ggplot(data = avgMarker, aes(x=Gene, y=Cluster, fill=meanExp)) %>% + geom_tile() %>% + scale_fill_distiller(palette="viridis")
ifelse(interactive, p %>% ggplotly() %>% toWebGL() %>% print(), "Non-interactive")
p
markerDF <- markerDF %>% mutate(Cluster = post_clustering)
# Show mean exp for each marker
avgMarker <- markerDF %>% group_by(Gene, Cluster) %>% summarise(meanExp = mean(Expression))
p <- ggplot(data = avgMarker, aes(x=Gene, y=Cluster, fill=meanExp)) %>% + geom_tile() %>% + scale_fill_distiller(palette="viridis")
ifelse(interactive, p %>% ggplotly() %>% toWebGL() %>% print(),  p)
```{r Clusters Averaged, message=F}
markerDF <- markerDF %>% mutate(Cluster = post_clustering)
# Show mean exp for each marker
avgMarker <- markerDF %>% group_by(Gene, Cluster) %>% summarise(meanExp = mean(Expression))
p <- ggplot(data = avgMarker, aes(x=Gene, y=Cluster, fill=meanExp)) %>% + geom_tile() %>% + scale_fill_distiller(palette="viridis")
ifelse(interactive, p %>% ggplotly() %>% toWebGL() %>% print(), print(p))
markerDF <- markerDF %>% mutate(Cluster = post_clustering)
# Show mean exp for each marker
avgMarker <- markerDF %>% group_by(Gene, Cluster) %>% summarise(meanExp = mean(Expression))
p <- ggplot(data = avgMarker, aes(x=Gene, y=Cluster, fill=meanExp)) %>% + geom_tile() %>% + scale_fill_distiller(palette="viridis")
ifelse(interactive, p %>% ggplotly() %>% toWebGL() %>% print(), print(p))
markerDF <- markerDF %>% mutate(Cluster = post_clustering)
# Show mean exp for each marker
avgMarker <- markerDF %>% group_by(Gene, Cluster) %>% summarise(meanExp = mean(Expression))
ggplot(data = avgMarker, aes(x=Gene, y=Cluster, fill=meanExp)) %>% + geom_tile() %>% + scale_fill_distiller(palette="viridis")
# ifelse(interactive, p %>% ggplotly() %>% toWebGL() %>% print(), print(p))
#, results = 'hide', fig.show='hide'
expressionTSNE <- function(pbmc, marker, colors=c("grey", "red")){
p <- FeaturePlot(object = pbmc, features.plot = marker, cols.use = colors,
reduction.use = "tsne", nCol=2, do.return = T, dark.theme = T)[[1]]
p <- ifelse(interactive, p %>% ggplotly() %>% toWebGL(), print(p))
return(p)
}
tp1 <- expressionTSNE(pbmc, markerList[1])
tp2 <- expressionTSNE(pbmc, markerList[2], colors=c("grey", "green"))
#, results = 'hide', fig.show='hide'
expressionTSNE <- function(pbmc, marker, colors=c("grey", "red")){
p <- FeaturePlot(object = pbmc, features.plot = marker, cols.use = colors,
reduction.use = "tsne", nCol=2, do.return = T, dark.theme = T)[[1]]
# p <- ifelse(interactive, p %>% ggplotly() %>% toWebGL(), print(p))
return(p)
}
tp1 <- expressionTSNE(pbmc, markerList[1])
tp2 <- expressionTSNE(pbmc, markerList[2], colors=c("grey", "green"))
#, results = 'hide', fig.show='hide'
expressionTSNE <- function(pbmc, marker, colors=c("grey", "red")){
p <- FeaturePlot(object = pbmc, features.plot = marker, cols.use = colors,
reduction.use = "tsne", nCol=2, do.return = T, dark.theme = T)[[1]]
# p <- ifelse(interactive, p %>% ggplotly() %>% toWebGL(), print(p))
return(print(p))
}
tp1 <- expressionTSNE(pbmc, markerList[1])
tp2 <- expressionTSNE(pbmc, markerList[2], colors=c("grey", "green"))
#, results = 'hide', fig.show='hide'
expressionTSNE <- function(pbmc, marker, colors=c("grey", "red")){
p <- FeaturePlot(object = pbmc, features.plot = marker, cols.use = colors,
reduction.use = "tsne", nCol=2, do.return = T, dark.theme = T)[[1]]
# p <- ifelse(interactive, p %>% ggplotly() %>% toWebGL(), print(p))
}
plotgrid(expressionTSNE(pbmc, markerList[1]),
expressionTSNE(pbmc, markerList[2], colors=c("grey", "green")))
plot_grid(expressionTSNE(pbmc, markerList[1]),
expressionTSNE(pbmc, markerList[2], colors=c("grey", "green")))
#, results = 'hide', fig.show='hide'
expressionTSNE <- function(pbmc, marker, colors=c("grey", "red")){
p <- FeaturePlot(object = pbmc, features.plot = marker, cols.use = colors,
reduction.use = "tsne", nCol=2, do.return = T, dark.theme = T)[[1]]
# p <- ifelse(interactive, p %>% ggplotly() %>% toWebGL(), print(p))
}
plot_grid(expressionTSNE(pbmc, markerList[1]),
expressionTSNE(pbmc, markerList[2], colors=c("grey", "green")))
#, results = 'hide', fig.show='hide'
expressionTSNE <- function(pbmc, marker, colors=c("grey", "red")){
FeaturePlot(object = pbmc, features.plot = marker, cols.use = colors,
reduction.use = "tsne", nCol=2, do.return = T, dark.theme = T)[[1]]
# p <- ifelse(interactive, p %>% ggplotly() %>% toWebGL(), print(p))
}
plot_grid(expressionTSNE(pbmc, markerList[1]),
expressionTSNE(pbmc, markerList[2], colors=c("grey", "green")))
# par(mfrow = c(1, 2))
do.hover <- ifelse(interactive==T, T, F)
gp1 <- GenePlot(object = pbmc, gene1 = "nUMI", gene2 = "percent.mito", pch.use=20,
do.hover=, data.hover = "mut")
# par(mfrow = c(1, 2))
do.hover <- ifelse(interactive==T, T, F)
gp1 <- GenePlot(object = pbmc, gene1 = "nUMI", gene2 = "percent.mito", pch.use=20,
do.hover=do.hover, data.hover = "mut")
