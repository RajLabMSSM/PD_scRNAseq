"q_value<0.05 & estimate>1.5"="purple",
"q_value>0.05" = "darkgray")) +
theme(legend.position = "none") +
theme_bw() +
xlab(expression(paste("Effect Size"))) +
ylab(expression(paste(-log^{10},"(q_value)"))) +
xlim(-2,2) + ylim(0, yMax) +
## ggrepl labels
geom_text_repel(data=arrange(dge,  q_value, desc(estimate))[1:topN_labeled,],
# filter(dge, avg_logFC>=1.5)[1:10,],
aes(label=gene_short_name),  color="black", alpha=.5,
segment.color="black", segment.alpha=.5
) +
# Lines
geom_vline(xintercept= -1.5,lty=4, lwd=.3, alpha=.5) +
geom_vline(xintercept= 1.5,lty=4, lwd=.3, alpha=.5) +
geom_hline(yintercept= -log10(0.05),lty=4, lwd=.3, alpha=.5) +
ggtitle(caption)
print(vol)
vol <- ggplot(data=dge, aes(x=estimate, y= -log10(q_value))) +
geom_point(alpha=0.5, size=3, aes(col=sig)) +
scale_color_manual(values=list("q_value<0.05"="turquoise3",
"q_value<0.05 & estimate>1.5"="purple",
"q_value>0.05" = "darkgray")) +
theme(legend.position = "none") +
theme_bw() +
xlab(expression(paste("Effect Size"))) +
ylab(expression(paste(-log^{10},"(q_value)"))) +
## ggrepl labels
geom_text_repel(data=arrange(dge,  q_value, desc(estimate))[1:topN_labeled,],
# filter(dge, avg_logFC>=1.5)[1:10,],
aes(label=gene_short_name),  color="black", alpha=.5,
segment.color="black", segment.alpha=.5
) +
# Lines
geom_vline(xintercept= -1.5,lty=4, lwd=.3, alpha=.5) +
geom_vline(xintercept= 1.5,lty=4, lwd=.3, alpha=.5) +
geom_hline(yintercept= -log10(0.05),lty=4, lwd=.3, alpha=.5) +
ggtitle(caption) +
xlim(-2,2) + ylim(0, yMax)
print(vol)
yMax
neg.log.pvals
dge
dge$q_value
9
.Machine$double.xmin
neg.log.pvals[!is.infinite(neg.log.pvals)]
neg.log.pvals <- -log10(dge$q_value)
#Replace zeros with smallest representable number in R to prevent turning into Infs
neg.log.pvals[!is.infinite(neg.log.pvals)] <- .Machine$double.xmin
neg.log.pvals
neg.log.pvals <- -log10(dge$q_value)
#Replace zeros with smallest representable number in R to prevent turning into Infs
neg.log.pvals[is.infinite(neg.log.pvals)] <- .Machine$double.xmin
neg.log.pvals
maximum <- max(neg.log.pvals)
yMax  <- maximum + maximum/8 #ifelse(max(-log10(dge$p_val_adj))<45, 50, max(-log10(dge$p_val_adj)) + 10)
vol <- ggplot(data=dge, aes(x=estimate, y= -log10(q_value))) +
geom_point(alpha=0.5, size=3, aes(col=sig)) +
scale_color_manual(values=list("q_value<0.05"="turquoise3",
"q_value<0.05 & estimate>1.5"="purple",
"q_value>0.05" = "darkgray")) +
theme(legend.position = "none") +
theme_bw() +
xlab(expression(paste("Effect Size"))) +
ylab(expression(paste(-log^{10},"(q_value)"))) +
## ggrepl labels
geom_text_repel(data=arrange(dge,  q_value, desc(estimate))[1:topN_labeled,],
# filter(dge, avg_logFC>=1.5)[1:10,],
aes(label=gene_short_name),  color="black", alpha=.5,
segment.color="black", segment.alpha=.5
) +
# Lines
geom_vline(xintercept= -1.5,lty=4, lwd=.3, alpha=.5) +
geom_vline(xintercept= 1.5,lty=4, lwd=.3, alpha=.5) +
geom_hline(yintercept= -log10(0.05),lty=4, lwd=.3, alpha=.5) +
ggtitle(caption) +
xlim(-2,2) + ylim(0, yMax)
print(vol)
res[res$q_value==0]
res[res$q_value==0, "q_value"] <- .Machine$double.xmin
res
# dge <- res
# Replace zeros with smallest representable number in R to prevent turning into Infs
res[res$q_value==0, "q_value"] <- .Machine$double.xmin
dge$sig<-  ifelse( dge$q_value<0.05 & dge$estimate<=1.5, "q_value<0.05",
ifelse( dge$q_value<0.05  & dge$estimate>1.5, "q_value<0.05 & estimate=>1.5",
"q_value>0.05"
))
dge <- arrange(dge, desc(sig))
neg.log.pvals <- -log10(dge$q_value)
neg.log.pvals <- -log10(dge$q_value)
maximum <- max(neg.log.pvals)
yMax  <- maximum + maximum/8 #ifelse(max(-log10(dge$p_val_adj))<45, 50, max(-log10(dge$p_val_adj)) + 10)
vol <- ggplot(data=dge, aes(x=estimate, y= -log10(q_value))) +
geom_point(alpha=0.5, size=3, aes(col=sig)) +
scale_color_manual(values=list("q_value<0.05"="turquoise3",
"q_value<0.05 & estimate>1.5"="purple",
"q_value>0.05" = "darkgray")) +
theme(legend.position = "none") +
theme_bw() +
xlab(expression(paste("Effect Size"))) +
ylab(expression(paste(-log^{10},"(q_value)"))) +
## ggrepl labels
geom_text_repel(data=arrange(dge,  q_value, desc(estimate))[1:topN_labeled,],
# filter(dge, avg_logFC>=1.5)[1:10,],
aes(label=gene_short_name),  color="black", alpha=.5,
segment.color="black", segment.alpha=.5
) +
# Lines
geom_vline(xintercept= -1.5,lty=4, lwd=.3, alpha=.5) +
geom_vline(xintercept= 1.5,lty=4, lwd=.3, alpha=.5) +
geom_hline(yintercept= -log10(0.05),lty=4, lwd=.3, alpha=.5) +
ggtitle(caption) +
xlim(-2,2) + ylim(0, yMax)
print(vol)
yMax
# dge <- res
# Replace zeros with smallest representable number in R to prevent turning into Infs
res[res$q_value==0, "q_value"] <- .Machine$double.xmin
# dge <- res
# Replace zeros with smallest representable number in R to prevent turning into Infs
dge[dge$q_value==0, "q_value"] <- .Machine$double.xmin
dge$sig<-  ifelse( dge$q_value<0.05 & dge$estimate<=1.5, "q_value<0.05",
ifelse( dge$q_value<0.05  & dge$estimate>1.5, "q_value<0.05 & estimate=>1.5",
"q_value>0.05"
))
# dge <- res
# Replace zeros with smallest representable number in R to prevent turning into Infs
dge[dge$q_value==0, "q_value"] <- .Machine$double.xmin
dge$sig<-  ifelse( dge$q_value<0.05 & dge$estimate<=1.5, "q_value<0.05",
ifelse( dge$q_value<0.05  & dge$estimate>1.5, "q_value<0.05 & estimate=>1.5",
"q_value>0.05"
))
dge <- arrange(dge, desc(sig))
neg.log.pvals <- -log10(dge$q_value)
maximum <- max(neg.log.pvals)
yMax  <- maximum + maximum/8 #ifelse(max(-log10(dge$p_val_adj))<45, 50, max(-log10(dge$p_val_adj)) + 10)
vol <- ggplot(data=dge, aes(x=estimate, y= -log10(q_value))) +
geom_point(alpha=0.5, size=3, aes(col=sig)) +
scale_color_manual(values=list("q_value<0.05"="turquoise3",
"q_value<0.05 & estimate>1.5"="purple",
"q_value>0.05" = "darkgray")) +
theme(legend.position = "none") +
theme_bw() +
xlab(expression(paste("Effect Size"))) +
ylab(expression(paste(-log^{10},"(q_value)"))) +
## ggrepl labels
geom_text_repel(data=arrange(dge,  q_value, desc(estimate))[1:topN_labeled,],
# filter(dge, avg_logFC>=1.5)[1:10,],
aes(label=gene_short_name),  color="black", alpha=.5,
segment.color="black", segment.alpha=.5
) +
# Lines
geom_vline(xintercept= -1.5,lty=4, lwd=.3, alpha=.5) +
geom_vline(xintercept= 1.5,lty=4, lwd=.3, alpha=.5) +
geom_hline(yintercept= -log10(0.05),lty=4, lwd=.3, alpha=.5) +
ggtitle(caption) +
xlim(-2,2) + ylim(0, yMax)
print(vol)
# dge <- res
# Replace zeros with smallest representable number in R to prevent turning into Infs
dge[dge$q_value==0, "q_value"] <- .Machine$double.xmin
dge$sig<-  ifelse( dge$q_value<0.05 & abs(dge$estimate)<=1.5, "q_value<0.05",
ifelse( dge$q_value<0.05  & abs(dge$estimate)>=1.5, "q_value<0.05 & estimate=>1.5",
"q_value>0.05"
))
dge <- arrange(dge, desc(sig))
dge <- arrange(dge, desc(sig))
neg.log.pvals <- -log10(dge$q_value)
maximum <- max(neg.log.pvals)
yMax  <- maximum + maximum/8 #ifelse(max(-log10(dge$p_val_adj))<45, 50, max(-log10(dge$p_val_adj)) + 10)
vol <- ggplot(data=dge, aes(x=estimate, y= -log10(q_value))) +
geom_point(alpha=0.5, size=3, aes(col=sig)) +
scale_color_manual(values=list("q_value<0.05"="turquoise3",
"q_value<0.05 & estimate>=1.5"="purple",
"q_value>0.05" = "darkgray")) +
theme(legend.position = "none") +
theme_bw() +
xlab(expression(paste("Effect Size"))) +
ylab(expression(paste(-log^{10},"(q_value)"))) +
## ggrepl labels
geom_text_repel(data=arrange(dge,  q_value, desc(estimate))[1:topN_labeled,],
# filter(dge, avg_logFC>=1.5)[1:10,],
aes(label=gene_short_name),  color="black", alpha=.5,
segment.color="black", segment.alpha=.5
) +
# Lines
geom_vline(xintercept= -1.5,lty=4, lwd=.3, alpha=.5) +
geom_vline(xintercept= 1.5,lty=4, lwd=.3, alpha=.5) +
geom_hline(yintercept= -log10(0.05),lty=4, lwd=.3, alpha=.5) +
ggtitle(caption) +
xlim(-2,2) + ylim(0, yMax)
print(vol)
dge
dge$sig<-  ifelse( dge$q_value<0.05 & abs(dge$estimate)<=1.5, "q_value<0.05",
ifelse( dge$q_value<0.05  & abs(dge$estimate)>=1.5, "q_value<0.05 & estimate>=1.5",
"q_value>0.05"
))
dge <- arrange(dge, desc(sig))
neg.log.pvals <- -log10(dge$q_value)
maximum <- max(neg.log.pvals)
yMax  <- maximum + maximum/8 #ifelse(max(-log10(dge$p_val_adj))<45, 50, max(-log10(dge$p_val_adj)) + 10)
vol <- ggplot(data=dge, aes(x=estimate, y= -log10(q_value))) +
geom_point(alpha=0.5, size=3, aes(col=sig)) +
scale_color_manual(values=list("q_value<0.05"="turquoise3",
"q_value<0.05 & estimate>=1.5"="purple",
"q_value>0.05" = "darkgray")) +
theme(legend.position = "none") +
theme_bw() +
xlab(expression(paste("Effect Size"))) +
ylab(expression(paste(-log^{10},"(q_value)"))) +
## ggrepl labels
geom_text_repel(data=arrange(dge,  q_value, desc(estimate))[1:topN_labeled,],
# filter(dge, avg_logFC>=1.5)[1:10,],
aes(label=gene_short_name),  color="black", alpha=.5,
segment.color="black", segment.alpha=.5
) +
# Lines
geom_vline(xintercept= -1.5,lty=4, lwd=.3, alpha=.5) +
geom_vline(xintercept= 1.5,lty=4, lwd=.3, alpha=.5) +
geom_hline(yintercept= -log10(0.05),lty=4, lwd=.3, alpha=.5) +
ggtitle(caption) +
xlim(-2,2) + ylim(0, yMax)
print(vol)
pData(cds_dge)[variable]
unique(pData(cds_dge)[variable])
comparison_label <- unique(pData(cds_dge)[variable])
comparison_label
comparison_label <- paste0(variable,":", unique(pData(cds_dge)[variable]) )
varis <- unique(pData(cds_dge)[variable]
comparison_label <- paste0(variable,":", ) )
varis <- unique(pData(cds_dge)[variable])
comparison_label <- paste0(variable,":", varis[1], "vs.", varis[2] )
varis <- unique(pData(cds_dge)[variable])
varis
unique(pData(cds_dge)[variable])[variable]
unique(pData(cds_dge)[variable])[1,]
unique(pData(cds_dge)[variable])[,1]
varis <- unique(pData(cds_dge)[variable])[,1]
comparison_label <- paste0(variable,":", varis[1], "vs.", varis[2] )
comparison_label
comparison_label <- paste0(variable," : ", varis[1], " vs. ", varis[2] )
volcano_plot(dge = res, caption=comparison_label, topN_labeled=6)
volcano_plot <- function(dge, caption="", topN_labeled=6){
# dge <- res
# Replace zeros with smallest representable number in R to prevent turning into Infs
dge[dge$q_value==0, "q_value"] <- .Machine$double.xmin
dge$sig<-  ifelse( dge$q_value<0.05 & abs(dge$estimate)<=1.5, "q_value<0.05",
ifelse( dge$q_value<0.05  & abs(dge$estimate)>=1.5, "q_value<0.05 & estimate>=1.5",
"q_value>0.05"
))
dge <- arrange(dge, desc(sig))
neg.log.pvals <- -log10(dge$q_value)
maximum <- max(neg.log.pvals)
yMax  <- maximum + maximum/8 #ifelse(max(-log10(dge$p_val_adj))<45, 50, max(-log10(dge$p_val_adj)) + 10)
vol <- ggplot(data=dge, aes(x=estimate, y= -log10(q_value))) +
geom_point(alpha=0.5, size=3, aes(col=sig)) +
scale_color_manual(values=list("q_value<0.05"="turquoise3",
"q_value<0.05 & estimate>=1.5"="purple",
"q_value>0.05" = "darkgray")) +
theme(legend.position = "none") +
theme_bw() +
xlab(expression(paste("Effect Size"))) +
ylab(expression(paste(-log^{10},"(q_value)"))) +
## ggrepl labels
geom_text_repel(data=arrange(dge,  q_value, desc(estimate))[1:topN_labeled,],
# filter(dge, avg_logFC>=1.5)[1:10,],
aes(label=gene_short_name),  color="black", alpha=.5,
segment.color="black", segment.alpha=.5
) +
# Lines
geom_vline(xintercept= -1.5,lty=4, lwd=.3, alpha=.5) +
geom_vline(xintercept= 1.5,lty=4, lwd=.3, alpha=.5) +
geom_hline(yintercept= -log10(0.05),lty=4, lwd=.3, alpha=.5) +
ggtitle(caption) +
xlim(-2,2) + ylim(0, yMax)
print(vol)
}
volcano_plot(dge = res, caption=comparison_label, topN_labeled=6)
monocle3_DGE <- function(cds_DGE,
variable="dx",
nCores=4,
expression_family="quasipoisson",
variable_subsets=F,
plot_topN=F,
plot_volcano=T){
# With regression:
suppressWarnings(
if(variable_subsets==F){
cds_dge <- cds_DGE
} else {
# variable="Cluster"
# variable_subsets = c(1,2)
bool_vector <- (pData(cds_DGE)[variable] %in% variable_subsets)[[1]]
cds_dge <- cds_DGE[, bool_vector]
}
)
dge.start <- Sys.time()
gene_fits <- fit_models(cds_dge,
model_formula_str = paste0("~",variable),
expression_family = "quasipoisson",
cores = nCores,
verbose = T)
fit_coefs <- coefficient_table(gene_fits)
res <- fit_coefs %>% filter(term != "(Intercept)") %>% arrange(q_value, desc(abs(estimate)))
# time_terms <- time_terms %>% mutate(q_value = p.adjust(p_value))
sig_genes <- res %>% filter (q_value < 0.05) %>% pull(gene_short_name)
# Report
dge.end <- Sys.time()
dge.diff <- as.numeric(round(difftime(dge.end, dge.start, units = "hours"),2))
print(paste("DGE:",dim(cds_DGE)[1],"genes x",dim(cds_DGE)[2],"samples"))
print(paste("+ Calculated in",dge.diff,"hours."))
print(paste("+",length(sig_genes),"significiant DGE(s) detected."))
# Plot
if(plot_topN!=F){
top_genes <- res$gene_short_name[1:plot_topN] %>%  as.character()
p <- monocle3::plot_genes_violin(cds_dge[top_genes,],
group_cells_by=variable,
ncol=2)
print(p)
}
if(plot_volcano){
varis <- unique(pData(cds_dge)[variable])[,1]
comparison_label <- paste0(variable," : ", varis[1], " vs. ", varis[2] )
vp <- volcano_plot(dge = res, caption=comparison_label, topN_labeled=6)
print(vp)
}
return(res)
# # With graph autocorrelation:
# pr_test_res <- graph_test(cds[variance[1:10],],
#                           neighbor_graph="principal_graph",
#                           cores=nCores)
# pr_deg_ids <- row.names(subset(pr_test_res, q_value < 0.05))
}
dge.clust <- monocle3_DGE(cds_DGE = cds_DGE,
variable = "Cluster",
variable_subsets = c(1,2),
nCores = nCores,
expression_family = expression_family,
plot_topN = F,
plot_volcano = T)
dge.clust <- monocle3_DGE(cds_DGE = cds_DGE,
variable = "Cluster",
variable_subsets = c(1,2),
nCores = nCores,
expression_family = expression_family,
plot_topN = F,
plot_volcano = T)
createDT(dge.clust)
volcano_plot <- function(dge, caption="", topN_labeled=6){
# dge <- res
# Replace zeros with smallest representable number in R to prevent turning into Infs
dge[dge$q_value==0, "q_value"] <- .Machine$double.xmin
dge$sig<-  ifelse( dge$q_value<0.05 & abs(dge$estimate)<=1.5, "q_value<0.05",
ifelse( dge$q_value<0.05  & abs(dge$estimate)>=1.5, "q_value<0.05 & estimate>=1.5",
"q_value>0.05"
))
dge <- arrange(dge, desc(sig))
neg.log.pvals <- -log10(dge$q_value)
maximum <- max(neg.log.pvals)
yMax  <- maximum + maximum/8 #ifelse(max(-log10(dge$p_val_adj))<45, 50, max(-log10(dge$p_val_adj)) + 10)
vol <- ggplot(data=dge, aes(x=estimate, y= -log10(q_value))) +
geom_point(alpha=0.5, size=3, aes(col=sig)) +
scale_color_manual(values=list("q_value<0.05"="turquoise3",
"q_value<0.05 & estimate>=1.5"="purple",
"q_value>0.05" = "darkgray")) +
theme(legend.position = "none") +
theme_bw() +
xlab(expression(paste("Effect Size"))) +
ylab(expression(paste(-log^{10},"(q_value)"))) +
## ggrepl labels
geom_text_repel(data=arrange(dge,  q_value, desc(estimate))[1:topN_labeled,],
# filter(dge, avg_logFC>=1.5)[1:10,],
aes(label=gene_short_name),  color="black", alpha=.5,
segment.color="black", segment.alpha=.5, seed = 2019) +
# Lines
geom_vline(xintercept= -1.5,lty=4, lwd=.3, alpha=.5) +
geom_vline(xintercept= 1.5,lty=4, lwd=.3, alpha=.5) +
geom_hline(yintercept= -log10(0.05),lty=4, lwd=.3, alpha=.5) +
ggtitle(caption) +
xlim(-2,2) + ylim(0, yMax)
print(vol)
}
volcano_plot <- function(dge, caption="", topN_labeled=6){
# dge <- res
# Replace zeros with smallest representable number in R to prevent turning into Infs
dge[dge$q_value==0, "q_value"] <- .Machine$double.xmin
dge$sig<-  ifelse( dge$q_value<0.05 & abs(dge$estimate)<=1.5, "q_value<0.05",
ifelse( dge$q_value<0.05  & abs(dge$estimate)>=1.5, "q_value<0.05 & estimate>=1.5",
"q_value>0.05"
))
dge <- arrange(dge, desc(sig))
neg.log.pvals <- -log10(dge$q_value)
maximum <- max(neg.log.pvals)
yMax  <- maximum + maximum/8 #ifelse(max(-log10(dge$p_val_adj))<45, 50, max(-log10(dge$p_val_adj)) + 10)
vol <- ggplot(data=dge, aes(x=estimate, y= -log10(q_value))) +
geom_point(alpha=0.5, size=3, aes(col=sig)) +
scale_color_manual(values=list("q_value<0.05"="turquoise3",
"q_value<0.05 & estimate>=1.5"="purple",
"q_value>0.05" = "darkgray")) +
theme(legend.position = "none") +
theme_bw() +
xlab(expression(paste("Effect Size"))) +
ylab(expression(paste(-log^{10},"(q_value)"))) +
## ggrepl labels
geom_text_repel(data=arrange(dge,  q_value, desc(estimate))[1:topN_labeled,],
# filter(dge, avg_logFC>=1.5)[1:10,],
aes(label=gene_short_name),  color="black", alpha=.5,
segment.color="black", segment.alpha=.5, seed = 2019) +
# Lines
geom_vline(xintercept= -1.5,lty=4, lwd=.3, alpha=.5) +
geom_vline(xintercept= 1.5,lty=4, lwd=.3, alpha=.5) +
geom_hline(yintercept= -log10(0.05),lty=4, lwd=.3, alpha=.5) +
ggtitle(caption) +
xlim(-2,2) + ylim(0, yMax)
return(vol)
}
dge.clust <- monocle3_DGE(cds_DGE = cds_DGE,
variable = "Cluster",
variable_subsets = c(1,2),
nCores = nCores,
expression_family = expression_family,
plot_topN = F,
plot_volcano = T)
dge.dx <- monocle3_DGE(cds_DGE = cds_DGE,
variable = "dx",
nCores = nCores,
expression_family = expression_family,
plot_volcano = T)
createDT(dge.dx)
volcano_plot <- function(dge, caption="", topN_labeled=6){
# dge <- res
# Replace zeros with smallest representable number in R to prevent turning into Infs
dge[dge$q_value==0, "q_value"] <- .Machine$double.xmin
dge$sig<-  ifelse( dge$q_value<0.05 & abs(dge$estimate)<=1.5, "q_value<0.05",
ifelse( dge$q_value<0.05  & abs(dge$estimate)>=1.5, "q_value<0.05 & estimate>=1.5",
"q_value>0.05"
))
dge <- arrange(dge, desc(sig))
neg.log.pvals <- -log10(dge$q_value)
maximum <- max(neg.log.pvals)
yMax  <- maximum + maximum/8 #ifelse(max(-log10(dge$p_val_adj))<45, 50, max(-log10(dge$p_val_adj)) + 10)
vol <- ggplot(data=dge, aes(x=estimate, y= -log10(q_value))) +
geom_point(alpha=0.5, size=3, aes(col=sig)) +
scale_color_manual(values=list("q_value<0.05"="turquoise3",
"q_value<0.05 & estimate>=1.5"="purple",
"q_value>0.05" = "darkgray")) +
theme(legend.position = "none") +
theme_bw() +
xlab(expression(paste("Estimate"))) +
ylab(expression(paste(-log^{10},"(q_value)"))) +
## ggrepl labels
geom_text_repel(data=arrange(dge,  q_value, desc(estimate))[1:topN_labeled,],
# filter(dge, avg_logFC>=1.5)[1:10,],
aes(label=gene_short_name),  color="black", alpha=.5,
segment.color="black", segment.alpha=.5, seed = 2019) +
# Lines
geom_vline(xintercept= -1.5,lty=4, lwd=.3, alpha=.5) +
geom_vline(xintercept= 1.5,lty=4, lwd=.3, alpha=.5) +
geom_hline(yintercept= -log10(0.05),lty=4, lwd=.3, alpha=.5) +
ggtitle(caption) +
xlim(-2,2) + ylim(0, yMax) +
theme(plot.title = element_text(hjust = 0.5))
return(vol)
}
monocle3::clusters(cds_DGE)
cds_DGE[,pData(cds_DGE)$Cluster==clust]
clust=1
cds_clust <- cds_DGE[,pData(cds_DGE)$Cluster==clust]
cds_clust
for (clust in c(1,2)){
cat("\n")
cat("####",v,"\n")
cds_clust <- cds_DGE[,pData(cds_DGE)$Cluster==clust]
dge.dx.clust <- monocle3_DGE(cds_DGE = ,
variable = "dx",
nCores = nCores,
expression_family = expression_family,
plot_volcano = T)
createDT(dge.dx.clust)
cat("\n")
}
for (clust in c(1,2)){
cat("\n")
cat("####",v,"\n")
cds_clust <- cds_DGE[,pData(cds_DGE)$Cluster==clust]
dge.dx.clust <- monocle3_DGE(cds_DGE = cds_clust,
variable = "dx",
nCores = nCores,
expression_family = expression_family,
plot_volcano = T)
createDT(dge.dx.clust)
cat("\n")
}
for (clust in c(1,2)){
cat("\n")
cat("####",clust,"\n")
cds_clust <- cds_DGE[,(pData(cds_DGE)$Cluster==clust)]
dge.dx.clust <- monocle3_DGE(cds_DGE = cds_clust,
variable = "mut",
variable_subsets = c("PD","GBA"),
nCores = nCores,
expression_family = expression_family,
plot_volcano = T)
createDT(dge.dx.clust)
cat("\n")
}
within_clusters <- c(1,2)
detach("package:monocle3", unload = TRUE)
library(monocle)
