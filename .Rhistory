# unique(subset(mito.df, module==27)$id)
genomeSize <- length(union(unique(gene.lists$gene.symbol),
monocle3::fData(cds)$gene_short_name))
sc.modules
MOD.dt <- module_vs_module_enrichment(mod.df1 = gene.lists,
mod.df2 = sc.modules,
genomeSize = genomeSize,
save_file="./Results/custom.modules_vs_sc.modules.txt",
verbose = F)
createDT(MOD.dt)
customModule.cluster <- grouped_module_expression(cds,
gene.lists,#gene_module_df,
group_variable="cluster",
show_plot=T,
subtitle = "Cluster 1 = Canonical Monocytes; Cluster 2 = Intermediate Monocytes",
save_table=F)
gene.lists
cds <- monocle3::cluster_cells(cds,
resolution = 1e-4,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
clustering_genes = var.genes
)
# Add cluster info to metadata (for easier DGE analysis)
pData(cds)$Cluster <- monocle3::clusters(cds)
pData(cds)$Partition <- monocle3::partitions(cds)
# 3D plot
p3d <- plot_cells_3d(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p3d
customModule.cluster <- grouped_module_expression(cds,
gene.lists,#gene_module_df,
group_variable="cluster",
show_plot=T,
subtitle = "Cluster 1 = Canonical Monocytes; Cluster 2 = Intermediate Monocytes",
save_table=F)
customModule.dx <- grouped_module_expression(cds,
gene.lists,#gene_module_df,
group_variable="dx",
show_plot=T,
subtitle = "All cells",
save_table=F)
customModule.mut <- grouped_module_expression(cds,
gene.lists,#gene_module_df,
group_variable="mut",
show_plot=T,
subtitle = "All cells",
save_table=F)
# break down by cell type
## Canonical
customModule.dx_canonical <- grouped_module_expression(cds[,monocle3::clusters(cds)==1],
gene.lists,#gene_module_df,
group_variable="dx",
show_plot=T,
subtitle = "Canonical monocytes only",
save_table=F)
gene.lists <- lapply(list.files(lists_path, full.names = T, pattern = "*.csv$"), function(x){
group.name <- gsub(".csv$","",basename(x))
dat <- data.table::fread(x)
dat <- dat %>% dplyr::mutate(module = group.name)
colnames(dat)[1] <- "gene.symbol"
return(data.table::data.table(dat))
}) %>% data.table::rbindlist()
# Separate MT-XXX genes from mtio
mtx <- readxl::read_excel("./Results/Mito_lists_for_the_single_cell_analysis/MT-XXX_genes.xlsx")
gene.lists[gene.lists$gene.symbol %in% mtx$gene.symbol,"module"] <- "MT-XXX"
subset(mtx, !(gene.symbol %in% gene.lists$gene.symbol) )
mtx
sum((mtx$gene.symbol %in% gene.lists$gene.symbol))
sum(!(mtx$gene.symbol %in% gene.lists$gene.symbol))
cds[gene.lists$gene.symbol,]
gene.lists <- subset(gene.lists, gene.symbol %in% row.names(fData(cds)))
use_genes <- unique(gene.lists$gene.symbol)
cds[gene.lists$gene.symbol,]
gene.lists$gene.symbol
gene.lists$gene.symbol
subset(gene.lists, module=="MT-XXX")
# Separate MT-XXX genes from mtio
mtx <- readxl::read_excel("./Results/Mito_lists_for_the_single_cell_analysis/MT-XXX_genes.xlsx")
mtx
gene.lists[gene.lists$gene.symbol %in% mtx$gene.symbol,"module"]
gene.lists
subset(gene.lists, module=="MT-XXX")
gene.lists <- lapply(list.files(lists_path, full.names = T, pattern = "*.csv$"), function(x){
group.name <- gsub(".csv$","",basename(x))
dat <- data.table::fread(x)
dat <- dat %>% dplyr::mutate(module = group.name)
colnames(dat)[1] <- "gene.symbol"
return(data.table::data.table(dat))
}) %>% data.table::rbindlist()
gene.lists[gene.lists$module=="mito" & (gene.lists$gene.symbol %in% mtx$gene.symbol),"module"] <- "MT-XXX"
gene.lists
len(gene.lists)
dim(gene.lists)
dim(unique(gene.lists))
gene.lists <- unique(subset(gene.lists, gene.symbol %in% row.names(fData(cds))))
use_genes <- unique(gene.lists$gene.symbol)
data.table::fwrite(gene.lists, "./Results/Mito_lists_for_the_single_cell_analysis/curatedModules_genelists.csv")
customModule.cluster <- grouped_module_expression(cds,
gene.lists,#gene_module_df,
group_variable="cluster",
show_plot=T,
subtitle = "Cluster 1 = Canonical Monocytes; Cluster 2 = Intermediate Monocytes",
save_table=F)
gene.lists <- subset(gene.lists, gene.symbol %in% var.genes)
p.list <- lapply(unique(gene.lists$module), function(mod){
print(mod)
p <- monocle3::plot_cells(cds,
genes=subset(gene.lists, module==mod) %>% unique(),
show_trajectory_graph=F, alpha = .75) +
theme(legend.title=element_text(size=6))
return(p)
})
cp <- cowplot::plot_grid(plotlist = p.list)
cp <- cowplot::plot_grid(plotlist = p.list)
print(cp)
ggsave(file.path("./Results/Mito_lists_for_the_single_cell_analysis",
paste0("curatedModules_UMAP.png")),
plot=cp, dpi=300, width=13, height=6)
# unique(subset(mito.df, module==27)$id)
genomeSize <- length(union(unique(gene.lists$gene.symbol),
monocle3::fData(cds)$gene_short_name))
MOD.dt <- module_vs_module_enrichment(mod.df1 = gene.lists,
mod.df2 = sc.modules,
genomeSize = genomeSize,
save_file="./Results/custom.modules_vs_sc.modules.txt",
verbose = F)
MOD.dt <- module_vs_module_enrichment(mod.df1 = gene.lists,
mod.df2 = sc.modules,
genomeSize = genomeSize,
save_file="./Results/custom.modules_vs_sc.modules.txt",
verbose = F)
createDT(MOD.dt)
customModule.dx <- grouped_module_expression(cds,
gene.lists,#gene_module_df,
group_variable="dx",
show_plot=T,
subtitle = "All cells",
save_table=F)
gene.lists
gene.lists$module %>% unique()
librar(xlsx)
library(xlsx)
library(xlsx)
library("xlsx")
install.packages("xlsx")
library(xlsx)
data.table::fwrite(gene.lists, "./Results/Mito_lists_for_the_single_cell_analysis/curatedModules_genelists.tsv")
data.table::fwrite(gene.lists, "./Results/Mito_lists_for_the_single_cell_analysis/curatedModules_genelists.tsv",sep="\t")
gene.lists
dim(gene.lists)
customModule.cluster <- grouped_module_expression(cds,
gene.lists,#gene_module_df,
group_variable="cluster",
show_plot=T,
subtitle = "Cluster 1 = Canonical Monocytes; Cluster 2 = Intermediate Monocytes",
save_table=F)
subset(gene.lists, module=="MT-XXX")
monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "dx")
monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "dx", nrow = 1)
monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "dx", ncol=4)
monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=4)
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=4)
ggsave("./Results/curated_modules/MT-XXX_violin.png",plot = vp)
ggsave("./Results/curated_modules/MT-XXX_violin.png",plot = vp, width = 7)
ggsave("./Results/curated_modules/MT-XXX_violin.png",plot = vp, width = 10)
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=3)
ggsave("./Results/curated_modules/MT-XXX_violin.png",plot = vp, width = 10)
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=3) + geom_point()
print(vp)
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=3) + geom_dotplot(binaxis='y', stackdir='center', dotsize=1)
print(vp)
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=3) +
geom_dotplot(binaxis='y', stackdir='center', dotsize=.1, alpha=.7, aes(color=dx))
print(vp)
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=3) +
geom_dotplot(binaxis='y', stackdir='center', dotsize=1, alpha=.7, aes(color=dx))
print(vp)
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=3) +
geom_dotplot(binaxis='y', stackdir='center', method="histodot",
dotsize=1, alpha=.7, aes(color=dx),z)
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=3) +
geom_dotplot(binaxis='y', stackdir='center', method="histodot",
dotsize=1, alpha=.7, aes(color=dx))
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=3) +
geom_dotplot(binaxis='y', stackdir='center', method="histodot",
dotsize=1, alpha=.7, aes(color=dx))
print(vp)
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=3) +
geom_dotplot(binaxis='y', stackdir='center', method="histodot",
dotsize=1, alpha=.7, aes(color=dx), bin=5)
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=3) +
geom_dotplot(binaxis='y', stackdir='center', method="histodot",
dotsize=1, alpha=.7, aes(color=dx))
print(vp)
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=3) + geom_dotplot()
print(vp)
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=3) + geom_dotplot(binaxis='y')
print(vp)
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=3) +
geom_dotplot(binaxis='x', stackdir='center', )
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=3) +
geom_dotplot(binaxis='x', stackdir='center')
print(vp)
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=3) +
geom_dotplot(binaxis='y', stackdir='center')
print(vp)
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=3) +
geom_dotplot(binaxis='y', stackdir='center', alpha=.1, stackratio=.2)
print(vp)
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=3) +
geom_dotplot(binaxis='y', stackdir='center', alpha=.1, stackratio=.05, dotsize = .5)
print(vp)
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=3) +
geom_dotplot(binaxis='y', stackdir='center', alpha=.1, stackratio=.005, dotsize = .5)
print(vp)
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=3) +
geom_dotplot(binaxis='y', stackdir='center', alpha=.1, stackratio=.01, dotsize = .5)
print(vp)
ggsave("./Results/curated_modules/MT-XXX_violin.png",plot = vp, width = 10)
attach(airquality)
Month <- factor(Month, labels = month.abb[5:9])
Month
Ozone
customModule.pData
?melt
# t.test
reshape2::melt(customModule.pData, id.vars=c("barcode","dx","mut","Cluster"))
# t.test
reshape2::melt(customModule.pData, id.vars=c("barcode","dx","mut","Cluster"),
variable.name="Module", value.name="Expression")
# t.test
customModule.melt <- reshape2::melt(customModule.pData,
id.vars=c("barcode","dx","mut","Cluster"),
variable.name="Module", value.name="Expression")
pairwise.t.test(x=customModule.melt$Expression, g=customModule.melt$Module)
customModule.melt$Module
customModule.melt$Expression
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "mut", ncol=3) +
geom_dotplot(binaxis='y', stackdir='center', alpha=.1, stackratio=.01, dotsize = .5)
pairwise.t.test(x=customModule.melt$Expression, g=customModule.melt$Module)
pairwise.t.test(x=customModule.melt$Expression,
g=factor(customModule.melt$Module))
pairwise.t.test(x=customModule.melt$Expression,
g=factor(customModule.melt$Module, labels=unique(customModule.melt$Module)))
pairwise.t.test(x=customModule.melt$Expression,
g=customModule.melt$Module, pool.sd = F)
t.test(x=subset(customModule.pData, Cluster==1)[,"mito_genes"],
y=subset(customModule.pData, Cluster==1)[,"mito_genes"])
subset(customModule.pData, Cluster==1)[,"mito_genes"]
t.test(x=subset(customModule.melt, Cluster==1)[,"mito_genes"],
y=subset(customModule.melt, Cluster==1)[,"mito_genes"])
pairwise.t.test(x=subset(customModule.melt, Cluster==1)$Expression,
g=subset(customModule.melt, Cluster==1)$Module)
pairwise.t.test(x=subset(customModule.melt, Cluster==1)$Expression,
g=subset(customModule.melt, Cluster==1)$dx)
t.test(x=subset(customModule.pData, Cluster==1)[,"mito_genes"],
y=subset(customModule.pData, Cluster==1)[,"mito_genes"])
t.test(x=subset(customModule.pData, Cluster==1)[,"mito_genes"],
y=subset(customModule.pData, Cluster==2)[,"mito_genes"])
t.test(Expression~dx, data=customModule.melt)
t.test(Expression~dx+Cluster, data=customModule.melt)
multi.tests <- function(fun = t.test, df, vars, group.var, ...) {
sapply(simplify = FALSE, # sapply(simplify=T) better, elements named
vars,  # loop on vector of outcome variable names
function(var) {
formula <- as.formula(paste(var, "~", group.var))# create a formula with outcome and grouping var.
fun(data = df, formula, ...) # perform test with a given fun, default t.test
}
)
}
multi.tests(df=customModule.melt, vars=c("Cluster","dx"),
group.var = "Module")
multi.tests(df=customModule.melt, vars=c("Cluster","Module"),
group.var = "dx")
customModule.melt
multi.tests(df=customModule.melt, vars=c("Cluster","Module"),
group.var = "dx")
customModule.melt
class(customModule.melt)
multi.tests(df=data.frame(customModule.melt), vars=c("Cluster","Module"),
group.var = "dx")
library(survival)
data(kidney)
lapply(kidney[,c("time", "age", "frail")], function(x) t.test(x ~ kidney$sex, var.equal = TRUE))
kidney
customModule.melt
multi.tests(df=customModule.melt,
vars=c("Expression"),
group.var = "dx")
customModule.dx <- grouped_module_expression(cds,
gene.lists,#gene_module_df,
group_variable="dx",
show_plot=T,
subtitle = "All cells",
save_table=F)
customModule.mut <- grouped_module_expression(cds,
gene.lists,#gene_module_df,
group_variable="mut",
show_plot=T,
subtitle = "All cells",
save_table=F)
# break down by cell type
## Canonical
customModule.dx_canonical <- grouped_module_expression(cds[,monocle3::clusters(cds)==1],
gene.lists,#gene_module_df,
group_variable="dx",
show_plot=T,
subtitle = "Canonical monocytes only",
save_table=F)
# Intermediate
customModule.dx_intermediate <- grouped_module_expression(cds[,monocle3::clusters(cds)==2],
gene.lists,#gene_module_df,
group_variable="dx",
show_plot=T,
subtitle = "Intermediate monocytes only",
save_table=F)
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="mito_sig")$gene.symbol,],
group_cells_by = "mut", ncol=3) +
geom_dotplot(binaxis='y', stackdir='center', alpha=.1, stackratio=.01, dotsize = .5)
print(vp)
print(vp)
ggsave("./Results/curated_modules/mitoSig_violin.png",plot = vp, width = 10)
save("./Results/curated_modules/mitoSig_violin.png",plot = vp, width = 10)
vp <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="MT-XXX")$gene.symbol,],
group_cells_by = "dx", ncol=3) +
geom_dotplot(binaxis='y', stackdir='center', alpha=.1, stackratio=.01, dotsize = .5)
ggsave("./Results/curated_modules/MT-XXX_violin.png",plot = vp, width = 10)
vp2 <- monocle3::plot_genes_violin(cds[subset(gene.lists, module=="mito_sig")$gene.symbol,],
group_cells_by = "dx", ncol=3) +
geom_dotplot(binaxis='y', stackdir='center', alpha=.1, stackratio=.01, dotsize = .5)
ggsave("./Results/curated_modules/mitoSig_violin.png",plot = vp2, width = 10)
gene.lists <- lapply(list.files(lists_path, full.names = T, pattern = "*.csv$"), function(x){
group.name <- gsub(".csv$","",basename(x))
dat <- data.table::fread(x)
dat <- dat %>% dplyr::mutate(module = group.name)
colnames(dat)[1] <- "gene.symbol"
return(data.table::data.table(dat))
}) %>% data.table::rbindlist()
# Separate MT-XXX genes from mito
## (separate from other modules too?)
mtx <- readxl::read_excel("./Results/Mito_lists_for_the_single_cell_analysis/MT-XXX_genes.xlsx")
# Separate MT-XXX genes from mito
## (separate from other modules too?)
mtx <- readxl::read_excel("./Results/curated_modules//MT-XXX_genes.xlsx")
gene.lists[gene.lists$module=="mito" & (gene.lists$gene.symbol %in% mtx$gene.symbol),"module"] <- "MT-XXX"
if(sum(!(mtx$gene.symbol %in% gene.lists$gene.symbol)) >0){
print("All MT-XXX already in dataframe.")
}
gene.lists <- unique(subset(gene.lists, gene.symbol %in% row.names(fData(cds))))
gene.lists
lists_path <-"./Results/curated_modules/"
gene.lists <- lapply(list.files(lists_path, full.names = T, pattern = "*.csv$"), function(x){
group.name <- gsub(".csv$","",basename(x))
dat <- data.table::fread(x)
dat <- dat %>% dplyr::mutate(module = group.name)
colnames(dat)[1] <- "gene.symbol"
return(data.table::data.table(dat))
}) %>% data.table::rbindlist()
# Separate MT-XXX genes from mito
## (separate from other modules too?)
mtx <- readxl::read_excel("./Results/curated_modules//MT-XXX_genes.xlsx")
gene.lists[gene.lists$module=="mito" & (gene.lists$gene.symbol %in% mtx$gene.symbol),"module"] <- "MT-XXX"
if(sum(!(mtx$gene.symbol %in% gene.lists$gene.symbol)) >0){
print("All MT-XXX already in dataframe.")
}
gene.lists <- unique(subset(gene.lists, gene.symbol %in% row.names(fData(cds))))
gene.lists
gene.lists$module%>%unique()
use_genes <- unique(gene.lists$gene.symbol)
data.table::fwrite(gene.lists, "./Results/Mito_lists_for_the_single_cell_analysis/curatedModules_genelists.tsv",sep="\t")
data.table::fwrite(gene.lists, "./Results/curated_modules//curatedModules_genelists.tsv",sep="\t")
cds <- monocle3::preprocess_cds(cds,
num_dim = 30, #100 by default
return.only.var.genes=F,
residual_model_formula_str = "~ nUMI + percent.mito")
monocle3::plot_pc_variance_explained(cds)
# c("UMAP", "tSNE", "PCA", "LSI")
cds <- monocle3::reduce_dimension(cds, reduction_method = "UMAP",
max_components = 3,
# umap.fast_sgd = T,
# cores=nCores
)
# Method 1
# variable.genes <- cds@preprocess_aux@listData$gene_loadings[,1:3] %>%
#   abs() %>% rowSums() %>% base::sort(decreasing = T)
# head(variable.genes)
# Seurat v2 function
# varDAT <- Seurat::FindVariableGenes(object = protDAT,
#                              mean.function = ExpMean,
#                              dispersion.function = LogVMR,
#                              selection.method ="dispersion", do.plot = T,
#                              top.genes = 2000)
# var.genes <- varDAT@var.genes
# Seurat v3 function
# protNEW <- UpdateSeuratObject(protDAT)
# varDAT <- Seurat:::FindVariableFeatures(object = protNEW,
#                                         selection.method = "vst",
#                                         mean.function = "FastExpMean",
#                                         dispersion.function = "FastLogVMR",
#                                         nfeatures = 2000)
# var.genes <- varDAT@assays$RNA@var.features
# head(var.genes)
#
# Using only monocle3
length(unique(row.names(cds@preprocess_aux$gene_loadings[,1:10])))
var.genes <- names(sort(rowSums(abs(cds@preprocess_aux$gene_loadings[,1:10]), na.rm = T), T))#[1:2000]
cds <- monocle3::cluster_cells(cds,
resolution = 1e-4,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
clustering_genes = var.genes
)
gene.lists <- subset(gene.lists, gene.symbol %in% var.genes)
p.list <- lapply(unique(gene.lists$module), function(mod){
print(mod)
p <- monocle3::plot_cells(cds,
genes=subset(gene.lists, module==mod) %>% unique(),
show_trajectory_graph=F, alpha = .75) +
theme(legend.title=element_text(size=6))
return(p)
})
cp <- cowplot::plot_grid(plotlist = p.list)
cp <- cowplot::plot_grid(plotlist = p.list)
print(cp)
cp <- cowplot::plot_grid(plotlist = p.list)
print(cp)
ggsave(file.path("./Results/Mito_lists_for_the_single_cell_analysis",
paste0("curatedModules_UMAP.png")),
plot=cp, dpi=300, width=13, height=6)
ggsave(file.path("./Results/curated_modules/",
paste0("curatedModules_UMAP.png")),
plot=cp, dpi=300, width=13, height=6)
# unique(subset(mito.df, module==27)$id)
genomeSize <- length(union(unique(gene.lists$gene.symbol),
monocle3::fData(cds)$gene_short_name))
MOD.dt <- module_vs_module_enrichment(mod.df1 = gene.lists,
mod.df2 = sc.modules,
genomeSize = genomeSize,
save_file="./Results/curated_modules/curatedModules_vs_scModules.txt",
verbose = F)
createDT(MOD.dt)
customModule.cluster <- grouped_module_expression(cds,
gene.lists,#gene_module_df,
group_variable="cluster",
show_plot=T,
subtitle = "Cluster 1 = Canonical Monocytes; Cluster 2 = Intermediate Monocytes",
save_table=F)
customModule.dx <- grouped_module_expression(cds,
gene.lists,#gene_module_df,
group_variable="dx",
show_plot=T,
subtitle = "All cells",
save_table=F)
customModule.dx <- grouped_module_expression(cds,
gene.lists,#gene_module_df,
group_variable="dx",
show_plot=T,
subtitle = "All cells",
save_table=F)
customModule.dx
customModule.dx <- grouped_module_expression(cds,
gene.lists,#gene_module_df,
group_variable="dx",
show_plot=T,
subtitle = "All cells",
save_table=F)
customModule.mut <- grouped_module_expression(cds,
gene.lists,#gene_module_df,
group_variable="mut",
show_plot=T,
subtitle = "All cells",
save_table=F)
# break down by cell type
## Canonical
customModule.dx_canonical <- grouped_module_expression(cds[,monocle3::clusters(cds)==1],
gene.lists,#gene_module_df,
group_variable="dx",
show_plot=T,
subtitle = "Canonical monocytes only",
save_table=F)
# Intermediate
customModule.dx_intermediate <- grouped_module_expression(cds[,monocle3::clusters(cds)==2],
gene.lists,#gene_module_df,
group_variable="dx",
show_plot=T,
subtitle = "Intermediate monocytes only",
save_table=F)
