p <- ggplot(data = markerDT, aes(x=Gene1, y=Gene2 )) +
stat_density_2d(aes(fill = ..level..),
geom = "polygon", colour="purple", bins = 10, size=.1) +
geom_point(aes(color=as.factor(eval(parse(text=colorby)))), shape=16, stroke=0, size=2, alpha=.5) +
guides(colour = guide_legend(title=colorby, override.aes = list(alpha = 1))) +
scale_color_manual(values = pretty_colors(mDAT, var = colorby)) +
labs(x=markerList[1], y=markerList[2], title=title) +
geom_smooth(method="lm")
if(legend==F){p <- p + theme(legend.position = "none")}
if(plot==T){print(p)}
return(p)
}
p <- gene_gene_plot(DAT, c("CD14", "FCGR3A"), colorby="cluster_ext_type_filt",
title="Monocyte Subtype Markers")
head(DAT@meta.data)
identify_unique_markers <-function(DAT, clusterA, clusterB, allGenes=F, test.use="wilcox"){
DAT <- SetIdent(DAT, ident.use =  "Cluster")
if(allGenes==F){
clustA.markers <- FindMarkers(DAT, ident.1=clusterA, min.pct = 0.25,
only.pos = F, test.use = test.use)
clustB.markers <- FindMarkers(DAT, ident.1=clusterB, min.pct = 0.25,
only.pos = F, test.use = test.use)
}else{
clustA.markers <- FindMarkers(DAT, ident.1=clusterA,
only.pos = F, test.use = test.use,
logfc.threshold = -Inf, min.pct = -Inf,
min.cells.group = -Inf,min.cells.gene = -Inf,
min.diff.pct = -Inf)
clustB.markers <- FindMarkers(DAT, ident.1=clusterB,
only.pos = F, test.use = test.use,
logfc.threshold = -Inf, min.pct = -Inf,
min.cells.group = -Inf,min.cells.gene = -Inf,
min.diff.pct = -Inf)
}
clustA.uniqueMarkers <- clustA.markers[!(row.names(clustA.markers) %in% row.names(clustB.markers)),] %>%
subset(p_val_adj<=0.05) %>% mutate(Cluster=clusterA)
clustB.uniqueMarkers <- clustB.markers[!(row.names(clustB.markers) %in% row.names(clustA.markers)),] %>%
subset(p_val_adj<=0.05) %>% mutate(Cluster=clusterB)
uniqueMarkers <- rbind(clustA.uniqueMarkers, clustB.uniqueMarkers)
# difference <- abs( length(row.names(clustA.uniqueMarkers)) -
#                      length(row.names(clustB.uniqueMarkers) ) )
# uniqueMarkers <- data.frame(ClusterA_markers=c(row.names(clustA.uniqueMarkers), rep("",difference) ),
#                             ClusterB_markers=row.names(clustB.uniqueMarkers))
write.csv(uniqueMarkers,
file.path(resultsPath,"unique_cluster_markers.csv"),
quote = F, row.names = F)
createDT(uniqueMarkers, "Unique/Mutually Exclusive Markers of Cluster 1 and Cluster 2")
return(uniqueMarkers)
}
# MUST use full dataset w/ all clusters
uniqueMarkers <- identify_unique_markers(DAT, clusterA = 1, clusterB = 2,
allGenes=F, test.use = test.use)
DAT
head(DAT@meta.data)
# MUST use full dataset w/ all clusters
uniqueMarkers <- identify_unique_markers(DAT, clusterA = "1", clusterB = "2",
allGenes=F, test.use = test.use)
DAT <- SetIdent(DAT, ident.use =  Cluster)
Cluster
DAT <- SetIdent(DAT, ident.use =  "Cluster")
DAT@ident
DAT <- SetIdent(DAT, ident.use =  DAT@meta.data$Cluster)
DAT@ident
identify_unique_markers <-function(DAT, clusterA, clusterB, allGenes=F, test.use="wilcox"){
DAT <- SetIdent(DAT, ident.use =  DAT@meta.data$Cluster)
if(allGenes==F){
clustA.markers <- FindMarkers(DAT, ident.1=clusterA, min.pct = 0.25,
only.pos = F, test.use = test.use)
clustB.markers <- FindMarkers(DAT, ident.1=clusterB, min.pct = 0.25,
only.pos = F, test.use = test.use)
}else{
clustA.markers <- FindMarkers(DAT, ident.1=clusterA,
only.pos = F, test.use = test.use,
logfc.threshold = -Inf, min.pct = -Inf,
min.cells.group = -Inf,min.cells.gene = -Inf,
min.diff.pct = -Inf)
clustB.markers <- FindMarkers(DAT, ident.1=clusterB,
only.pos = F, test.use = test.use,
logfc.threshold = -Inf, min.pct = -Inf,
min.cells.group = -Inf,min.cells.gene = -Inf,
min.diff.pct = -Inf)
}
clustA.uniqueMarkers <- clustA.markers[!(row.names(clustA.markers) %in% row.names(clustB.markers)),] %>%
subset(p_val_adj<=0.05) %>% mutate(Cluster=clusterA)
clustB.uniqueMarkers <- clustB.markers[!(row.names(clustB.markers) %in% row.names(clustA.markers)),] %>%
subset(p_val_adj<=0.05) %>% mutate(Cluster=clusterB)
uniqueMarkers <- rbind(clustA.uniqueMarkers, clustB.uniqueMarkers)
# difference <- abs( length(row.names(clustA.uniqueMarkers)) -
#                      length(row.names(clustB.uniqueMarkers) ) )
# uniqueMarkers <- data.frame(ClusterA_markers=c(row.names(clustA.uniqueMarkers), rep("",difference) ),
#                             ClusterB_markers=row.names(clustB.uniqueMarkers))
write.csv(uniqueMarkers,
file.path(resultsPath,"unique_cluster_markers.csv"),
quote = F, row.names = F)
createDT(uniqueMarkers, "Unique/Mutually Exclusive Markers of Cluster 1 and Cluster 2")
return(uniqueMarkers)
}
# MUST use full dataset w/ all clusters
uniqueMarkers <- identify_unique_markers(DAT, clusterA = 1, clusterB = 2,
allGenes=F, test.use = test.use)
uniqueMarkers
clusterA = 1
clusterB = 2
clustA.markers <- FindMarkers(DAT, ident.1=clusterA, min.pct = 0.25,
only.pos = F, test.use = test.use)
clustA.markers
clustB.markers <- FindMarkers(DAT, ident.1=clusterB, min.pct = 0.25,
only.pos = F, test.use = test.use)
clustA.markers
clustA.markers$Gene <- row.names(clustA.markers)
clustB.markers$Gene <- row.names(clustB.markers)
clustA.markers
clustA.markers <- cbind(Gene=row.names(clustA.markers), clustA.markers)
clustA.markers
clustB.markers <- cbind(Gene=row.names(clustB.markers), clustB.markers)
clustB.markers
clustA.uniqueMarkers <- clustA.markers[!(row.names(clustA.markers) %in% row.names(clustB.markers)),] %>%
subset(p_val_adj<=0.05) %>% mutate(Cluster=clusterA)
clustA.uniqueMarkers
clustB.uniqueMarkers <- clustB.markers[!(row.names(clustB.markers) %in% row.names(clustA.markers)),] %>%
subset(p_val_adj<=0.05) %>% mutate(Cluster=clusterB)
clustB.uniqueMarkers
uniqueMarkers <- rbind(clustA.uniqueMarkers, clustB.uniqueMarkers)
uniqueMarkers
uniqueMarkers <- rbind(clustA.uniqueMarkers, clustB.uniqueMarkers)
uniqueMarkers
subset(uniqueMarkers, Cluster==1)
subset(uniqueMarkers, Cluster==1)$Gene
DEGs_monocytes_sig
row.names(uniqueMarkers) <- uniqueMarkers$Gene
overlappingGenes_Clust1Markers <- enrichment_test_and_plots(clustDAT, subset(uniqueMarkers, Cluster==1), PDgenes$Gene)
overlappingGenes_Clust1Markers <- enrichment_test_and_plots(clustDAT, subset(uniqueMarkers, Cluster==2), PDgenes$Gene)
overlappingGenes_Clust2Markers <- enrichment_test_and_plots(clustDAT, subset(uniqueMarkers, Cluster==2), PDgenes$Gene)
overlappingGenes_Clust1Markers <- enrichment_test_and_plots(clustDAT, subset(uniqueMarkers, Cluster==1), aDgenes$Gene)
overlappingGenes_Clust1Markers <- enrichment_test_and_plots(clustDAT, subset(uniqueMarkers, Cluster==1), ADgenes$Gene)
Clust1Markers_ADgenes <- enrichment_test_and_plots(clustDAT, subset(uniqueMarkers, Cluster==1), ADgenes$Gene)
Clust2Markers_ADgenes <- enrichment_test_and_plots(clustDAT, subset(uniqueMarkers, Cluster==2), ADgenes$Gene)
report_overlap(DAT, subset(uniqueMarkers, Cluster==1), PDgenes$Gene)
report_overlap(DAT, subset(uniqueMarkers, Cluster==1), ADgenes$Gene)
Clust1Markers_PDgenes
Clust1Markers_PDgenes <- enrichment_test_and_plots(clustDAT, subset(uniqueMarkers, Cluster==1), PDgenes$Gene)
report_overlap(DAT,subset(uniqueMarkers, Cluster==1), ADgenes$Gene )
report_overlap(DAT,subset(uniqueMarkers, Cluster==2), ADgenes$Gene )
report_overlap(DAT,subset(uniqueMarkers, Cluster==2), ADgenes$Gene )
Clust2Markers_ADgenes <- enrichment_test_and_plots(clustDAT, subset(uniqueMarkers, Cluster==2), ADgenes$Gene)
report_overlap(DAT,subset(uniqueMarkers, Cluster==1)$Gene, ADgenes$Gene )
overlap <- report_overlap(DAT,subset(uniqueMarkers, Cluster==1)$Gene, ADgenes$Gene )
###############################################
# PLOT FUNCTIONS
###############################################
# HEATMAP
overlap_heatmap <- function(clustDAT, geneList,
title="Overlapping Genes:\nGene List vs. DGE Genes",
interactive=F){
knitr::opts_chunk$set(fig.width=14, fig.height=14)
markerDF  <- get_markerDT(clustDAT, markerList = geneList, rawData = F)
markerMatrix <- reshape2::acast(markerDF, Gene~Cluster, value.var="Expression",
fun.aggregate = mean, drop = F, fill = 0)
# Heatmap.2
my_palette <- colorRampPalette(c("purple", "black", "cyan"))(n = 1000)
hmap <- gplots::heatmap.2(markerMatrix, xlab = "Cluster", dendrogram = "row",
col = my_palette, tracecol = "gray", srtCol = 0, offsetCol=1.5, vline=T,
trace='none', key.title=NA, key.ylab = "Expression", colsep=T, sepwidth = 0.01,
main = title)
knitr::opts_chunk$set(fig.width=7, fig.height=5)
}
# CEll FRACTIONS PLOT
make_fractionDF <- function(sig_DEGs_df, geneList, allGenes=F){
sig_DEGs_df$Gene <- row.names(sig_DEGs_df)
if(allGenes==F){
geneDF <- subset(sig_DEGs_df, Gene%in%geneList)
} else{geneDF <- sig_DEGs_df}
pct_df <- melt(geneDF, id.vars = c("Gene","avg_logFC"), measure.vars = c("pct.2", "pct.1"),
variable.name = "Cluster", value.name = "FractionCells")
pct_df$Cluster <- ifelse(pct_df$Cluster=="pct.1", "1", "2")
return(pct_df)
}
cellFractions_plot <- function (sig_DEGs_df,
geneList, title="", allGenes=F){
knitr::opts_chunk$set(fig.width=14, fig.height=14)
pct_df <- make_fractionDF(sig_DEGs_df, geneList, allGenes)
# Fraction Cells
cfp <- ggplot(data=pct_df, aes(x=Gene, y=FractionCells, fill=Cluster)) + geom_col(position="dodge") +
labs(title = title, y="Fraction of Cells", x="Gene") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
if(allGenes==T){
cfp <- cfp +  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
print(ggplotly(cfp))
}else{print(cfp)}
knitr::opts_chunk$set(fig.width=7, fig.height=5)
}
# LOGFC PLOT
logFC_plot <- function(sig_DEGs_df, geneList, title="", allGenes=F){
knitr::opts_chunk$set(fig.width=14, fig.height=14)
pct_df <- make_fractionDF(sig_DEGs_df, geneList, allGenes)
lfcp <- ggplot(data=pct_df, aes(x=Gene, y=avg_logFC, fill=Gene)) + geom_col(position="dodge") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
labs(title = title, y="avg_logFC", x="Gene")
if(allGenes==T){
lfcp <- lfcp +  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
print(ggplotly(lfcp))
}else{print(lfcp)}
knitr::opts_chunk$set(fig.width=7, fig.height=5)
}
enrichment_test_and_plots <- function(DAT, DEG_df, geneList, disease=""){
overlappingGenes <- report_overlap(clustDAT,
list1=row.names(DEG_df),
list2=geneList)
if(length(overlappingGenes)>0){
# Plot cell fractions
cellFractions_plot(DEG_df, overlappingGenes,
title= paste("Fraction of Cells Expressing\n",
disease,"Genes Overlapping with DEGs") )
# Plot logFC
logFC_plot(DEG_df, overlappingGenes,
title= paste("LogFC\n",disease,"Genes Overlapping with DEGs") )
# Plot exp of all overlapping PD genes
knitr::opts_chunk$set(fig.width=7, fig.height=14)
plot_cell_clusters(mDAT, markers = geneList, cell_size = 0.01)
if(length(overlappingGenes)>1){
overlap_heatmap(clustDAT, geneList=overlappingGenes,
title=paste("Overlapping Genes:\n",
disease,"Genes vs. DGE Genes") )
}
} else {cat("There were no overlapping genes between the DGE list and",disease,"genes.")}
return(overlappingGenes)
}
# purpleScale <-  c("grey","purple","blueviolet","magenta")
# heatScale <-  c("yellow","grey","red")
Clust1Markers_PDgenes <- enrichment_test_and_plots(clustDAT, subset(uniqueMarkers, Cluster==1), PDgenes$Gene)
Clust2Markers_PDgenes <- enrichment_test_and_plots(clustDAT, subset(uniqueMarkers, Cluster==2), PDgenes$Gene)
Clust1Markers_ADgenes <- enrichment_test_and_plots(clustDAT, subset(uniqueMarkers, Cluster==1), ADgenes$Gene)
Clust2Markers_ADgenes <- enrichment_test_and_plots(clustDAT, subset(uniqueMarkers, Cluster==2), ADgenes$Gene)
###############################################
# PLOT FUNCTIONS
###############################################
# HEATMAP
overlap_heatmap <- function(clustDAT, geneList,
title="Overlapping Genes:\nGene List vs. DGE Genes",
interactive=F){
knitr::opts_chunk$set(fig.width=14, fig.height=14)
markerDF  <- get_markerDT(clustDAT, markerList = geneList, rawData = F)
markerMatrix <- reshape2::acast(markerDF, Gene~Cluster, value.var="Expression",
fun.aggregate = mean, drop = F, fill = 0)
# Heatmap.2
my_palette <- colorRampPalette(c("purple", "black", "cyan"))(n = 1000)
hmap <- gplots::heatmap.2(markerMatrix, xlab = "Cluster", dendrogram = "row",
col = my_palette, tracecol = "gray", srtCol = 0, offsetCol=1.5, vline=T,
trace='none', key.title=NA, key.ylab = "Expression", colsep=T, sepwidth = 0.01,
main = title)
knitr::opts_chunk$set(fig.width=7, fig.height=5)
}
# CEll FRACTIONS PLOT
make_fractionDF <- function(sig_DEGs_df, geneList, allGenes=F){
sig_DEGs_df$Gene <- row.names(sig_DEGs_df)
if(allGenes==F){
geneDF <- subset(sig_DEGs_df, Gene%in%geneList)
} else{geneDF <- sig_DEGs_df}
pct_df <- melt(geneDF, id.vars = c("Gene","avg_logFC"), measure.vars = c("pct.2", "pct.1"),
variable.name = "Cluster", value.name = "FractionCells")
pct_df$Cluster <- ifelse(pct_df$Cluster=="pct.1", "1", "2")
return(pct_df)
}
cellFractions_plot <- function (sig_DEGs_df,
geneList, title="", allGenes=F){
knitr::opts_chunk$set(fig.width=14, fig.height=14)
pct_df <- make_fractionDF(sig_DEGs_df, geneList, allGenes)
# Fraction Cells
cfp <- ggplot(data=pct_df, aes(x=Gene, y=FractionCells, fill=Cluster)) + geom_col(position="dodge") +
labs(title = title, y="Fraction of Cells", x="Gene") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
if(allGenes==T){
cfp <- cfp +  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
print(ggplotly(cfp))
}else{print(cfp)}
knitr::opts_chunk$set(fig.width=7, fig.height=5)
}
# LOGFC PLOT
logFC_plot <- function(sig_DEGs_df, geneList, title="", allGenes=F){
knitr::opts_chunk$set(fig.width=14, fig.height=14)
pct_df <- make_fractionDF(sig_DEGs_df, geneList, allGenes)
lfcp <- ggplot(data=pct_df, aes(x=Gene, y=avg_logFC, fill=Gene)) + geom_col(position="dodge") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
labs(title = title, y="avg_logFC", x="Gene")
if(allGenes==T){
lfcp <- lfcp +  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
print(ggplotly(lfcp))
}else{print(lfcp)}
knitr::opts_chunk$set(fig.width=7, fig.height=5)
}
enrichment_test_and_plots <- function(DAT, DEG_df, geneList, disease=""){
cat("\nCalculate enrichment")
overlappingGenes <- report_overlap(clustDAT,
list1=row.names(DEG_df),
list2=geneList)
if(length(overlappingGenes)>0){
cat("\nPlot cell fractions ")
cellFractions_plot(DEG_df, overlappingGenes,
title= paste("Fraction of Cells Expressing\n",
disease,"Genes Overlapping with DEGs") )
# Plot logFC
logFC_plot(DEG_df, overlappingGenes,
title= paste("LogFC\n",disease,"Genes Overlapping with DEGs") )
cat("\nPlot expression of all overlapping PD genes")
knitr::opts_chunk$set(fig.width=7, fig.height=14)
plot_cell_clusters(mDAT, markers = geneList, cell_size = 0.01)
if(length(overlappingGenes)>1){
cat("\nPlot heatmap")
overlap_heatmap(clustDAT, geneList=overlappingGenes,
title=paste("Overlapping Genes:\n",
disease,"Genes vs. DGE Genes") )
}
} else {cat("There were no overlapping genes between the DGE list and",disease,"genes.")}
return(overlappingGenes)
}
# purpleScale <-  c("grey","purple","blueviolet","magenta")
# heatScale <-  c("yellow","grey","red")
Clust1Markers_ADgenes <- enrichment_test_and_plots(clustDAT, subset(uniqueMarkers, Cluster==1), ADgenes$Gene)
uniqueMarkers
sig_DEGs_df=uniqueMarkers
geneList=ADgenes$Gene
sig_DEGs_df$Gene <- row.names(sig_DEGs_df)
sig_DEGs_df
geneDF <- subset(sig_DEGs_df, Gene %in% geneList)
geneDF
pct_df <- melt(geneDF, id.vars = c("Gene","avg_logFC"), measure.vars = c("pct.2", "pct.1"),
variable.name = "Cluster", value.name = "FractionCells")
pct_df
pct_df$Cluster <- ifelse(pct_df$Cluster=="pct.1", "1", "2")
pct_df
plot_cell_clusters(mDAT, markers = geneList, cell_size = 0.01)
geneList
plot_cell_clusters(mDAT, markers = unique(geneList), cell_size = 0.01)
overlappingGenes
overlappingGenes <- report_overlap(clustDAT,
list1=row.names(sig_DEGs_df),
list2=geneList)
overlappingGenes
plot_cell_clusters(mDAT, markers = overlappingGenes, cell_size = 0.01)
plot_cell_clusters(mDAT, markers = overlappingGenes)
plot_cell_clusters(mDAT, markers = overlappingGenes, cell_size = 0.7)
identify_unique_markers <-function(DAT, clusterA, clusterB, allGenes=F, test.use="wilcox"){
DAT <- SetIdent(DAT, ident.use =  DAT@meta.data$Cluster)
if(allGenes==F){
clustA.markers <- FindMarkers(DAT, ident.1=clusterA, min.pct = 0.25,
only.pos = F, test.use = test.use)
clustB.markers <- FindMarkers(DAT, ident.1=clusterB, min.pct = 0.25,
only.pos = F, test.use = test.use)
}else{
clustA.markers <- FindMarkers(DAT, ident.1=clusterA,
only.pos = F, test.use = test.use,
logfc.threshold = -Inf, min.pct = -Inf,
min.cells.group = -Inf,min.cells.gene = -Inf,
min.diff.pct = -Inf)
clustB.markers <- FindMarkers(DAT, ident.1=clusterB,
only.pos = F, test.use = test.use,
logfc.threshold = -Inf, min.pct = -Inf,
min.cells.group = -Inf,min.cells.gene = -Inf,
min.diff.pct = -Inf)
}
clustA.markers <- cbind(Gene=row.names(clustA.markers), clustA.markers)
clustB.markers <- cbind(Gene=row.names(clustB.markers), clustB.markers)
clustA.uniqueMarkers <- clustA.markers[!(row.names(clustA.markers) %in% row.names(clustB.markers)),] %>%
subset(p_val_adj<=0.05) %>% mutate(Cluster=clusterA)
clustB.uniqueMarkers <- clustB.markers[!(row.names(clustB.markers) %in% row.names(clustA.markers)),] %>%
subset(p_val_adj<=0.05) %>% mutate(Cluster=clusterB)
uniqueMarkers <- rbind(clustA.uniqueMarkers, clustB.uniqueMarkers)
row.names(uniqueMarkers) <- uniqueMarkers$Gene
# difference <- abs( length(row.names(clustA.uniqueMarkers)) -
#                      length(row.names(clustB.uniqueMarkers) ) )
# uniqueMarkers <- data.frame(ClusterA_markers=c(row.names(clustA.uniqueMarkers), rep("",difference) ),
#                             ClusterB_markers=row.names(clustB.uniqueMarkers))
write.csv(uniqueMarkers,
file.path(resultsPath,"unique_cluster_markers.csv"),
quote = F, row.names = F)
createDT(uniqueMarkers, "Unique/Mutually Exclusive Markers of Cluster 1 and Cluster 2")
return(uniqueMarkers)
}
# MUST use full dataset w/ all clusters
uniqueMarkers <- identify_unique_markers(clustDAT, clusterA = 1, clusterB = 2,
allGenes=F, test.use = test.use)
uniqueMarkers
clustDAT
# MUST use full dataset w/ all clusters (DAT  )
head(clustDAT@meta.data$Cluster)
# MUST use full dataset w/ all clusters (DAT  )
unique(clustDAT@meta.data$Cluster)
DGE_within_clusters(clustDAT,  meta_var = "dx", group1 = "PD", group2 = "control",
clusterList = c(1,2), allGenes = F, test.use = test.use)
DGE_within_clusters(DAT, meta_var = "mut", group1 = "PD", group2 = "GBA",
clusterList = c(1,2), allGenes = F, test.use = test.use)
# Import functions
root = "./"
source(file.path(root,"general_functions.R"))
import_parameters(params)
# load(file.path(resultsPath, "scRNAseq_results.RData"))
# resultsPath <- "Results/subsetGenes-protein_coding__subsetCells-F__Resolution-0.2__perplexity-40__nCores-4"
library(Seurat)
library(cowplot)
library(ggplot2)
library(dplyr)
library(data.table)
library(readxl)
library(reshape2)
library(ggrepel)
library(plotly)
library(GeneOverlap) # BiocManager::install("GeneOverlap")
library(enrichR) #BiocManager::install("enrichR")
## Upgrade to alpha (development) version of Monocle, as this version has been optimized for large datasets
if("DDRTree" %in% rownames(installed.packages())==F){
devtools::install_github("cole-trapnell-lab/DDRTree", ref="simple-ppt-like")
}
if("graph" %in% rownames(installed.packages())==F){
devtools::install_github("cole-trapnell-lab/L1-graph")
}
if("reticulate" %in% rownames(installed.packages())==F){
install.packages("reticulate")
}
if("flexclust" %in% rownames(installed.packages())==F){
install.packages("flexclust")
}
if("mcclust" %in% rownames(installed.packages())==F){
install.packages("mcclust")
}
library(flexclust)
library(mcclust)
library(reticulate)
if(py_module_available("umap-learn")==F){
reticulate::py_install('umap-learn')# , pip = T, pip_ignore_installed = T # Ensure the latest version of UMAP is installed
}
if(py_module_available("louvain")==F){
reticulate::py_install("louvain")
system("pip install louvain --user")
}
if("monocle" %in% rownames(installed.packages())==F){
devtools::install_github("cole-trapnell-lab/monocle-release", ref="monocle3_alpha")
}
if("ggrastr" %in% rownames(installed.packages())==F){
devtools::install_github("VPetukhov/ggrastr")
}
library(monocle) # BiocManager::install("monocle")
# BiocManager::install(c('DelayedArray', 'DelayedMatrixStats', 'org.Hs.eg.db', 'org.Mm.eg.db'))
library(org.Hs.eg.db)
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
#
if(getwd()=="/Users/schilder/Desktop/PD_scRNAseq"){
allGenes <- F
}else{allGenes <- T}
allGenes
sessioninfo::session_info()
# Import Seurat obj
load(file.path(root, "Data/seurat_object_add_HTO_ids.Rdata"))
# Import functions
root = "./"
source(file.path(root,"general_functions.R"))
import_parameters(params)
# load(file.path(resultsPath, "scRNAseq_results.RData"))
# resultsPath <- "Results/subsetGenes-protein_coding__subsetCells-F__Resolution-0.2__perplexity-40__nCores-4"
library(Seurat)
library(cowplot)
library(ggplot2)
library(dplyr)
library(data.table)
library(readxl)
library(reshape2)
library(ggrepel)
library(plotly)
library(GeneOverlap) # BiocManager::install("GeneOverlap")
library(enrichR) #BiocManager::install("enrichR")
## Upgrade to alpha (development) version of Monocle, as this version has been optimized for large datasets
if("DDRTree" %in% rownames(installed.packages())==F){
devtools::install_github("cole-trapnell-lab/DDRTree", ref="simple-ppt-like")
}
if("graph" %in% rownames(installed.packages())==F){
devtools::install_github("cole-trapnell-lab/L1-graph")
}
if("reticulate" %in% rownames(installed.packages())==F){
install.packages("reticulate")
}
if("flexclust" %in% rownames(installed.packages())==F){
install.packages("flexclust")
}
if("mcclust" %in% rownames(installed.packages())==F){
install.packages("mcclust")
}
library(flexclust)
library(mcclust)
library(reticulate)
if(py_module_available("umap-learn")==F){
reticulate::py_install('umap-learn')# , pip = T, pip_ignore_installed = T # Ensure the latest version of UMAP is installed
}
if(py_module_available("louvain")==F){
reticulate::py_install("louvain")
system("pip install louvain --user")
}
if("monocle" %in% rownames(installed.packages())==F){
devtools::install_github("cole-trapnell-lab/monocle-release", ref="monocle3_alpha")
}
if("ggrastr" %in% rownames(installed.packages())==F){
devtools::install_github("VPetukhov/ggrastr")
}
library(monocle) # BiocManager::install("monocle")
# BiocManager::install(c('DelayedArray', 'DelayedMatrixStats', 'org.Hs.eg.db', 'org.Mm.eg.db'))
library(org.Hs.eg.db)
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
#
if(getwd()=="/Users/schilder/Desktop/PD_scRNAseq"){
allGenes <- F
}else{allGenes <- T}
allGenes
sessioninfo::session_info()
seurat.obj
