col_vector
plotDR(mDAT, "Cluster")
plotDR <- function(resDAT, metavar="Cluster", title=""){
options(repr.plot.width = 11)
options(repr.plot.height = 8)
col_vector <- pretty_colors(resDAT, var=metavar)
p <- plot_cell_clusters(resDAT,
color_by = metavar,
cell_size = 0.75,
show_group_id = T)  +
scale_color_manual(values = col_vector) +
theme(legend.text=element_text(size=6)) +
theme(legend.position="right")+
labs(title = paste(title))
print(p)
}
plotDR(mDAT, "Cluster")
test_hyperparameters <- function(mDAT, resolutions=seq(0, 1e-2,length.out=10), Ks=seq(10,60,length.out=6), iter_var="k"){
if(iter_var=="resolution"){
for(res in resolutions){
res_title <- paste("Resolution =",res)
cat("\n")
cat("### ",res_title,"\n")
try({
resDAT <- clusterCells(mDAT, res=res,# k=43,
method = "louvain",# densityPeak
louvain_iter = 1,
verbose = F,
clustering_genes = clustering_genes,
cores = parallel::detectCores())
plotDR(resDAT, title=res_title)
})
cat("\n")
}
}else{
for(k in Ks){
k_title <- paste("K =",k)
cat("\n")
cat("### ",k_title,"\n")
try({
kDAT <- clusterCells(mDAT, res=8.888889e-05, k=k,
method = "louvain",# densityPeak
louvain_iter = 1,
verbose = F,
clustering_genes = clustering_genes,
cores = parallel::detectCores())
plotDR(kDAT, title=k_title)
})
cat("\n")
}
}
}
test_hyperparameters(mDAT, iter_var="resolution")
test_hyperparameters <- function(mDAT, resolutions=seq(0, 1e-4,length.out=6),
Ks=seq(10,60,length.out=6),
iter_var="k"){
if(iter_var=="resolution"){
for(res in resolutions){
res_title <- paste("Resolution =",res)
cat("\n")
cat("###",res_title,"\n")
try({
resDAT <- clusterCells(mDAT, res=res,# k=43,
method = "louvain",# densityPeak
louvain_iter = 1,
verbose = F,
clustering_genes = clustering_genes,
cores = parallel::detectCores())
plotDR(resDAT, title=res_title)
})
cat("\n")
}
}else{
for(k in Ks){
k_title <- paste("K =",k)
cat("\n")
cat("###",k_title,"\n")
try({
kDAT <- clusterCells(mDAT, res=8.888889e-05, k=k,
method = "louvain",# densityPeak
louvain_iter = 1,
verbose = F,
clustering_genes = clustering_genes,
cores = parallel::detectCores())
plotDR(kDAT, title=k_title)
})
cat("\n")
}
}
}
test_hyperparameters(mDAT, iter_var="resolution")
pretty_colors <- function(mDAT, var="Cluster"){
col_vector_origin <- c("#db83da","#53c35d","#a546bb","#718fe8","#a469e6",
"#babb3d","#4f66dc","#e68821","#83b837","#d6ac3e",
"#7957b4","#468e36","#d347ae","#5dbf8c","#e53e76",
"#42c9b8","#dd454a","#3bbac6","#d5542c","#59aadc",
"#cf8b36","#4a61b0","#8b8927","#a24e99","#9cb36a",
"#ca3e87","#36815b","#b23c4e","#5c702c","#b79add",
"#a55620","#5076af","#e38f67","#85609c","#caa569",
"#9b466c","#88692c","#dd81a9","#a35545","#e08083",
"#17becf","#9edae5")
col_vector <- col_vector_origin[1:length(unique(as.character(pData(mDAT)[var][,1]) ))]
names(col_vector) <- unique(as.character(pData(mDAT)[var][,1]))
return(col_vector)
}
barplot(c(length(col_vector_origin),5), col=col_vector_origin)
length(col_vector_origin)
length(col_vector_origin)
barplot(c(length(col_vector_origin),5), col=col_vector_origin)
c(length(col_vector_origin),5)
col_vector_origin
barplot(1:length(col_vector_origin) , col=col_vector_origin)
unique_var <- unique(as.character(pData(mDAT)[var][,1]))
unique_var
RColorBrewer::brewer.pal(length(unique_var),"Spectral")
pretty_colors <- function(mDAT, var="Cluster"){
unique_var <- unique(as.character(pData(mDAT)[var][,1]))
# col_vector_origin <- c("#db83da","#53c35d","#a546bb","#718fe8","#a469e6",
#                        "#babb3d","#4f66dc","#e68821","#83b837","#d6ac3e",
#                        "#7957b4","#468e36","#d347ae","#5dbf8c","#e53e76",
#                        "#42c9b8","#dd454a","#3bbac6","#d5542c","#59aadc",
#                        "#cf8b36","#4a61b0","#8b8927","#a24e99","#9cb36a",
#                        "#ca3e87","#36815b","#b23c4e","#5c702c","#b79add",
#                        "#a55620","#5076af","#e38f67","#85609c","#caa569",
#                        "#9b466c","#88692c","#dd81a9","#a35545","#e08083",
#                        "#17becf","#9edae5")
col_vector_origin <- RColorBrewer::brewer.pal(length(unique_var),"Paired")
barplot(1:length(col_vector_origin) , col=col_vector_origin)
col_vector <- col_vector_origin[1:length(unique_var)]
names(col_vector) <- unique_var
return(col_vector)
}
pretty_colors <- function(mDAT, var="Cluster", palette="Dark2"){
unique_var <- unique(as.character(pData(mDAT)[var][,1]))
# col_vector_origin <- c("#db83da","#53c35d","#a546bb","#718fe8","#a469e6",
#                        "#babb3d","#4f66dc","#e68821","#83b837","#d6ac3e",
#                        "#7957b4","#468e36","#d347ae","#5dbf8c","#e53e76",
#                        "#42c9b8","#dd454a","#3bbac6","#d5542c","#59aadc",
#                        "#cf8b36","#4a61b0","#8b8927","#a24e99","#9cb36a",
#                        "#ca3e87","#36815b","#b23c4e","#5c702c","#b79add",
#                        "#a55620","#5076af","#e38f67","#85609c","#caa569",
#                        "#9b466c","#88692c","#dd81a9","#a35545","#e08083",
#                        "#17becf","#9edae5")
col_vector_origin <- RColorBrewer::brewer.pal(length(unique_var),palette)
barplot(1:length(col_vector_origin) , col=col_vector_origin)
col_vector <- col_vector_origin[1:length(unique_var)]
names(col_vector) <- unique_var
return(col_vector)
}
plotDR <- function(resDAT, metavar="Cluster", title=""){
options(repr.plot.width = 11)
options(repr.plot.height = 8)
col_vector <- pretty_colors(resDAT, var=metavar)
p <- plot_cell_clusters(resDAT,
color_by = metavar,
cell_size = 0.8,
show_group_id = T)  +
scale_color_manual(values = col_vector) +
theme(legend.text=element_text(size=6)) +
theme(legend.position="right")+
labs(title = paste(title))
print(p)
}
test_hyperparameters(mDAT, iter_var="resolution")
pretty_colors <- function(mDAT, var="Cluster", palette="Dark2"){
unique_var <- unique(as.character(pData(mDAT)[var][,1]))
# col_vector_origin <- c("#db83da","#53c35d","#a546bb","#718fe8","#a469e6",
#                        "#babb3d","#4f66dc","#e68821","#83b837","#d6ac3e",
#                        "#7957b4","#468e36","#d347ae","#5dbf8c","#e53e76",
#                        "#42c9b8","#dd454a","#3bbac6","#d5542c","#59aadc",
#                        "#cf8b36","#4a61b0","#8b8927","#a24e99","#9cb36a",
#                        "#ca3e87","#36815b","#b23c4e","#5c702c","#b79add",
#                        "#a55620","#5076af","#e38f67","#85609c","#caa569",
#                        "#9b466c","#88692c","#dd81a9","#a35545","#e08083",
#                        "#17becf","#9edae5")
col_vector_origin <- RColorBrewer::brewer.pal(length(unique_var),palette)
# barplot(1:length(col_vector_origin) , col=col_vector_origin)
col_vector <- col_vector_origin[1:length(unique_var)]
names(col_vector) <- unique_var
return(col_vector)
}
plotDR(mDAT, "Cluster")
plotDR(mDAT, metavar = "cell_type") +  facet_wrap(~dx)
plotDR(mDAT, metavar = "cluster_ext_type")
plotDR(mDAT, metavar = "cluster_ext_type_filt")
pretty_colors <- function(mDAT, var="Cluster", palette="custom"){
unique_var <- unique(as.character(pData(mDAT)[var][,1]))
col_vector_origin <- c("#db83da","#53c35d","#a546bb","#718fe8","#a469e6",
"#babb3d","#4f66dc","#e68821","#83b837","#d6ac3e",
"#7957b4","#468e36","#d347ae","#5dbf8c","#e53e76",
"#42c9b8","#dd454a","#3bbac6","#d5542c","#59aadc",
"#cf8b36","#4a61b0","#8b8927","#a24e99","#9cb36a",
"#ca3e87","#36815b","#b23c4e","#5c702c","#b79add",
"#a55620","#5076af","#e38f67","#85609c","#caa569",
"#9b466c","#88692c","#dd81a9","#a35545","#e08083",
"#17becf","#9edae5")
# col_vector_origin <- RColorBrewer::brewer.pal(length(unique_var),palette)
# barplot(1:length(col_vector_origin) , col=col_vector_origin)
col_vector <- col_vector_origin[1:length(unique_var)]
names(col_vector) <- unique_var
return(col_vector)
}
pretty_colors <- function(mDAT, var="Cluster", palette="custom"){
unique_var <- unique(as.character(pData(mDAT)[var][,1]))
if(palette=="custom"){
col_vector_origin <- c("#db83da","#53c35d","#a546bb","#718fe8","#a469e6",
"#babb3d","#4f66dc","#e68821","#83b837","#d6ac3e",
"#7957b4","#468e36","#d347ae","#5dbf8c","#e53e76",
"#42c9b8","#dd454a","#3bbac6","#d5542c","#59aadc",
"#cf8b36","#4a61b0","#8b8927","#a24e99","#9cb36a",
"#ca3e87","#36815b","#b23c4e","#5c702c","#b79add",
"#a55620","#5076af","#e38f67","#85609c","#caa569",
"#9b466c","#88692c","#dd81a9","#a35545","#e08083",
"#17becf","#9edae5")
} else{col_vector_origin <- RColorBrewer::brewer.pal(length(unique_var),palette)}
# barplot(1:length(col_vector_origin) , col=col_vector_origin)
col_vector <- col_vector_origin[1:length(unique_var)]
names(col_vector) <- unique_var
return(col_vector)
}
col_vector_origin <- c("#ee68d2","#03b1f0","#00ba42","#7f95f7","#ff64ab","#46e5ad",
"blueviolet","mediumvioletred",
"#db83da","#53c35d","#a546bb","#718fe8","#a469e6",
"#babb3d","#4f66dc","#e68821","#83b837","#d6ac3e",
"#7957b4","#468e36","#d347ae","#5dbf8c","#e53e76",
"#42c9b8","#dd454a","#3bbac6","#d5542c","#59aadc",
"#cf8b36","#4a61b0","#8b8927","#a24e99","#9cb36a",
"#ca3e87","#36815b","#b23c4e","#5c702c","#b79add",
"#a55620","#5076af","#e38f67","#85609c","#caa569",
"#9b466c","#88692c","#dd81a9","#a35545","#e08083",
"#17becf","#9edae5")
barplot(1:length(col_vector_origin) , col=col_vector_origin)
pretty_colors <- function(mDAT, var="Cluster", palette="custom"){
unique_var <- unique(as.character(pData(mDAT)[var][,1]))
if(palette=="custom"){
col_vector_origin <- c("#ee68d2","#03b1f0","#00ba42","#7f95f7","#ff64ab","#46e5ad",
"blueviolet","mediumvioletred",
"#db83da","#53c35d","#a546bb","#718fe8","#a469e6",
"#babb3d","#4f66dc","#e68821","#83b837","#d6ac3e",
"#7957b4","#468e36","#d347ae","#5dbf8c","#e53e76",
"#42c9b8","#dd454a","#3bbac6","#d5542c","#59aadc",
"#cf8b36","#4a61b0","#8b8927","#a24e99","#9cb36a",
"#ca3e87","#36815b","#b23c4e","#5c702c","#b79add",
"#a55620","#5076af","#e38f67","#85609c","#caa569",
"#9b466c","#88692c","#dd81a9","#a35545","#e08083",
"#17becf","#9edae5")
} else{col_vector_origin <- RColorBrewer::brewer.pal(length(unique_var),palette)}
# barplot(1:length(col_vector_origin) , col=col_vector_origin)
col_vector <- col_vector_origin[1:length(unique_var)]
names(col_vector) <- unique_var
return(col_vector)
}
plotDR(mDAT, "Cluster")
pretty_colors <- function(mDAT, var="Cluster", palette="custom"){
unique_var <- unique(as.character(pData(mDAT)[var][,1]))
if(palette=="custom"){
col_vector_origin <- c("mediumorchid","deepskyblue","limegreen","darkblue","hotpink","turquoise",
"blueviolet","mediumvioletred",
"#db83da","#53c35d","#a546bb","#718fe8","#a469e6",
"#babb3d","#4f66dc","#e68821","#83b837","#d6ac3e",
"#7957b4","#468e36","#d347ae","#5dbf8c","#e53e76",
"#42c9b8","#dd454a","#3bbac6","#d5542c","#59aadc",
"#cf8b36","#4a61b0","#8b8927","#a24e99","#9cb36a",
"#ca3e87","#36815b","#b23c4e","#5c702c","#b79add",
"#a55620","#5076af","#e38f67","#85609c","#caa569",
"#9b466c","#88692c","#dd81a9","#a35545","#e08083",
"#17becf","#9edae5")
} else{col_vector_origin <- RColorBrewer::brewer.pal(length(unique_var),palette)}
# barplot(1:length(col_vector_origin) , col=col_vector_origin)
col_vector <- col_vector_origin[1:length(unique_var)]
names(col_vector) <- unique_var
return(col_vector)
}
plotDR(mDAT, "Cluster")
col_vector_origin <- c("mediumorchid","deepskyblue","limegreen","steelblue",
"hotpink","turquoise", "blueviolet","mediumvioletred",
"#db83da","#53c35d","#a546bb","#718fe8","#a469e6",
"#babb3d","#4f66dc","#e68821","#83b837","#d6ac3e",
"#7957b4","#468e36","#d347ae","#5dbf8c","#e53e76",
"#42c9b8","#dd454a","#3bbac6","#d5542c","#59aadc",
"#cf8b36","#4a61b0","#8b8927","#a24e99","#9cb36a",
"#ca3e87","#36815b","#b23c4e","#5c702c","#b79add",
"#a55620","#5076af","#e38f67","#85609c","#caa569",
"#9b466c","#88692c","#dd81a9","#a35545","#e08083",
"#17becf","#9edae5")
pretty_colors <- function(mDAT, var="Cluster", palette="custom"){
unique_var <- unique(as.character(pData(mDAT)[var][,1]))
if(palette=="custom"){
col_vector_origin <- c("mediumorchid","deepskyblue","limegreen","steelblue",
"hotpink","turquoise", "blueviolet","mediumvioletred",
"#db83da","#53c35d","#a546bb","#718fe8","#a469e6",
"#babb3d","#4f66dc","#e68821","#83b837","#d6ac3e",
"#7957b4","#468e36","#d347ae","#5dbf8c","#e53e76",
"#42c9b8","#dd454a","#3bbac6","#d5542c","#59aadc",
"#cf8b36","#4a61b0","#8b8927","#a24e99","#9cb36a",
"#ca3e87","#36815b","#b23c4e","#5c702c","#b79add",
"#a55620","#5076af","#e38f67","#85609c","#caa569",
"#9b466c","#88692c","#dd81a9","#a35545","#e08083",
"#17becf","#9edae5")
} else{col_vector_origin <- RColorBrewer::brewer.pal(length(unique_var),palette)}
# barplot(1:length(col_vector_origin) , col=col_vector_origin)
col_vector <- col_vector_origin[1:length(unique_var)]
names(col_vector) <- unique_var
return(col_vector)
}
plotDR(mDAT, "Cluster")
mDAT_sub <- mDAT[,mDAT$Cluster %in% c(1,2) ][1:100,]
spatial_res <- principalGraphTest(mDAT_sub,  k = 25,
relative_expr = T,
cores = parallel::detectCores(),
verbose = F)
mDAT_sub <- mDAT[1:100,mDAT$Cluster %in% c(1,2)]
mDAT_sub
spatial_res <- principalGraphTest(mDAT_sub,  k = 25,
relative_expr = T,
cores = parallel::detectCores(),
verbose = F)
mDAT@featureData
mDAT@featureData@data
mDAT_sub <- mDAT[DAT@var.genes[1:50], mDAT@phenoData$Cluster %in% c(1,2)]
DAT@var.genes[1:50]
DAT@var.genes
# Add metadata
metadata <- read.table(file.path(root,"Data/meta.data4.tsv"))
DAT <- AddMetaData(object = DAT, metadata = metadata)
protDAT <- subsetBiotypes(DAT, subsetGenes = "protein_coding")
protDAT <- remove_nonmatched_metadata(protDAT, subsetCells = F)
protDAT <- FindVariableGenes(object = protDAT, mean.function = ExpMean,
dispersion.function = LogVMR,
selection.method ="dispersion", do.plot = T,
top.genes = 2000)
DAT@var.genes[1:50]
protDAT@var.genes[1:50]
mDAT@phenoData$Cluster %in% c(1,2)
mDAT_sub <- mDAT[protDAT@var.genes[1:50], mDAT@phenoData$Cluster %in% c(1,2)]
mDAT_sub
spatial_res <- principalGraphTest(mDAT_sub,  k = 25,
relative_expr = T,
cores = parallel::detectCores(),
verbose = F)
mDAT_sub <- mDAT[protDAT@var.genes[1:50], mDAT@phenoData$Cluster %in% c(1,2)]
# At ~1min/100 genes, this DGE method will take ~2.5hours to run for 14827 genes
DEG_df <- differentialGeneTest(mDAT_sub,
fullModelFormulaStr = "~Cluster",
cores = parallel::detectCores(), verbose = T)
plot_markers_cluster(mDAT, markers = protDAT@var.genes[1:50])
plot_markers_cluster(mDAT, markers = protDAT@var.genes[1:50], minimal_cluster_fraction = 0.05)
mDAT_sub_genes <- mDAT_sub[row.names(subset(fData(mDAT_sub),
gene_short_name %in% c("CD14", "FCGR3A"))),]
mDAT_sub_genes
mDAT_sub_genes <- mDAT_sub[row.names(subset(fData(mDAT_sub),
gene_short_name %in% c("CD14", "FCGR3A"))),]
mDAT_sub_genes
row.names(subset(fData(mDAT_sub)
row.names(subset(fData(mDAT_sub),
gene_short_name %in% c("CD14", "FCGR3A")))
row.names(subset(fData(mDAT_sub),
gene_short_name %in% c("CD14", "FCGR3A")))
DEG_df
mDAT_sub_genes <- mDAT_sub[row.names(DEG_df),]
mDAT_sub_genes
mDAT_sub_genes <- mDAT_sub[row.names(DEG_df),][1:4]
mDAT_sub_genes
mDAT_sub_genes <- mDAT_sub[row.names(DEG_df)[1:4],]
plot_genes_jitter(mDAT_sub_genes, grouping = "Media", ncol= 2)
plot_genes_jitter(mDAT_sub_genes, grouping = "Cluster", ncol= 2)
plot_genes_jitter(mDAT_sub_genes, grouping = "Cluster", ncol= 4)
plot_genes_jitter(mDAT_sub_genes, grouping = "Cluster", ncol= 4, color_by = "Cluster", plot_trend = T)
# At ~1min/100 genes, this DGE method will take ~2.5hours to run for 14827 genes
DEG_df <- differentialGeneTest(mDAT_sub, verbose = T,
fullModelFormulaStr = "~Cluster",
reducedModelFormulaStr= "~Cluster",
cores = parallel::detectCores())
DEG_df
plot_genes_jitter(mDAT_sub_genes, grouping = "Cluster", ncol= 4, color_by = "mut", plot_trend = T)
plot_genes_jitter(mDAT_sub_genes, grouping = "Cluster", ncol= 4, color_by = "dx", plot_trend = T)
DAT <- exportCDS(mDAT, export_to = "Seurat")
DAT
DAT@dr
DAT@scale.data
DAT@data
DAT <- exportCDS(mDAT, export_to = "Seurat", export_all = T)
DAT
# DAT <- Seurat::AddMetaData(DAT, pData(mDAT)[c("garnett_cluster","cell_type","cluster_ext_type")])
# write.csv(DAT@meta.data, file.path(resultsPath, "garnett_results.csv"), quote = F,row.names = F)
DAT@var.genes
# DAT <- Seurat::AddMetaData(DAT, pData(mDAT)[c("garnett_cluster","cell_type","cluster_ext_type")])
# write.csv(DAT@meta.data, file.path(resultsPath, "garnett_results.csv"), quote = F,row.names = F)
head(DAT@meta.data)
DAT@dr
DAT@spatial
# DAT <- Seurat::AddMetaData(DAT, pData(mDAT)[c("garnett_cluster","cell_type","cluster_ext_type")])
# write.csv(DAT@meta.data, file.path(resultsPath, "garnett_results.csv"), quote = F,row.names = F)
head(DAT@meta.data)
mDAT@reducedDimS
mDAT$umap1 mDAT@reducedDimS[1:10,]
mDAT@reducedDimS[1:10,]
mDAT@reducedDimS[1:10]
mDAT@reducedDimW[1:10]
mDAT@reducedDimA[1:10]
mDAT@reducedDimK[1:10]
row.names( mDAT@reducedDimS)
names( mDAT@reducedDimS)
names( mDAT@reducedDimS)
mDAT@reducedDimS
colnames( mDAT@reducedDimS)
row.names(mDAT)
colnames(mDAT)
sum(colnames(mDAT) != colnames( mDAT@reducedDimS))
mDAT@dim_reduce_type
mDAT@normalized_data_projection
mDAT[c("PC1","PC2","PC3")] <- mDAT@normalized_data_projection[1:3]
mDAT[,c("PC1","PC2","PC3")] <- mDAT@normalized_data_projection[1:3]
mDAT@normalized_data_projection[1:3]
mDAT@normalized_data_projection[,1:3]
mDAT$PC1:PC3 <- mDAT@normalized_data_projection[,1:3]
mDAT$PC1 <- mDAT@normalized_data_projection[,1]
# sum(colnames(mDAT) != colnames( mDAT@reducedDimS))
mDAT@cellPairwiseDistances
# sum(colnames(mDAT) != colnames( mDAT@reducedDimS))
mDAT$PC1 <- mDAT@normalized_data_projection[,1]
mDAT$PC2 <- mDAT@normalized_data_projection[,2]
mDAT$PC3 <- mDAT@normalized_data_projection[,3]
mDAT@reducedDimA
mDAT@reducedDimA[1:10,]
mDAT@reducedDimA[,1:10]
mDAT@reducedDimA[1,]
mDAT$UMAP1 <- mDAT@reducedDimA[1,]
mDAT$UMAP2 <- mDAT@reducedDimA[2,]
mDAT$UMAP3 <- mDAT@reducedDimA[3,]
# DAT <- Seurat::AddMetaData(DAT, pData(mDAT)[c("garnett_cluster","cell_type","cluster_ext_type")])
# write.csv(DAT@meta.data, file.path(resultsPath, "garnett_results.csv"), quote = F,row.names = F)
head(DAT@meta.data)
DAT <- exportCDS(mDAT, export_to = "Seurat", export_all = T)
DAT@var.genes
DAT@dr
DAT@scale.data <- DAT@data
# DAT <- Seurat::AddMetaData(DAT, pData(mDAT)[c("garnett_cluster","cell_type","cluster_ext_type")])
# write.csv(DAT@meta.data, file.path(resultsPath, "garnett_results.csv"), quote = F,row.names = F)
head(DAT@meta.data)
markerList <- c("CD14", "FCGR3A")
markerData <- DAT@scale.data[row.names(DAT@scale.data) %in% markerList,] %>% t() %>% data.frame()
DAT@scale.data[row.names(DAT@scale.data)
row.names(DAT@scale.data)
markerList
row.names(DAT@scale.data) %in% markerList,]
DAT@scale.data[row.names(DAT@scale.data) %in% markerList,]
markerData <- DAT@scale.data[row.names(DAT@scale.data) %in% markerList,] %>% t() #%>% data.frame()
markerData
## Efficiently merge using data.table
dt1 <- data.table(markerData, keep.rownames = "Cell", key = "Cell") %>% copy()
## Efficiently merge using data.table
dt1 <- data.table(markerData, keep.rownames = "cell_type", key = "cell_type") %>% copy()
head(markerData)
## Efficiently merge using data.table
# dt1 <- data.table(markerData, keep.rownames = "cell_type", key = "cell_type") %>% copy()
dt2 <- data.table(DAT@meta.data[c("cell_type","post_clustering")], keep.rownames = "Cell", key = "Cell") %>% copy()
## Efficiently merge using data.table
# dt1 <- data.table(markerData, keep.rownames = "cell_type", key = "cell_type") %>% copy()
dt2 <- data.table(DAT@meta.data[c("cell_type","Cluster")], keep.rownames = "Cell", key = "Cell") %>% copy()
markerDT <- markerData[dt2]
markerData <- DAT@scale.data[row.names(DAT@scale.data) %in% markerList,] %>% t() %>% as.matrix()%>% data.frame()
markerData
markerData[markerData==0]
markerData[,markerData==0]
markerData[markerData==0,]
markerData==0
markerData[markerData==0,]
markerData[,markerData==0]
markerData[markerData==0,]
markerData[markerData$CD14==0 |markerData$FCGR3A==0 ,]
markerData[markerData$markerList[1]==0,] <- NA
markerData[markerData$markerList[2]==0,] <- NA
## Efficiently merge using data.table
# dt1 <- data.table(markerData, keep.rownames = "cell_type", key = "cell_type") %>% copy()
dt2 <- data.table(DAT@meta.data[c("cell_type","Cluster")], keep.rownames = "Cell", key = "Cell") %>% copy()
markerDT <- markerData[dt2]
markerData
dt2
markerDT <- data.table(markerData)[dt2]
data.table(markerData)
markerData
dt2
row.name(dt2) <- dt2$Cell
row.names(dt2) <- dt2$Cell
markerDT <- data.table(markerData)[dt2]
markerData <- DAT@scale.data[row.names(DAT@scale.data) %in% markerList,] %>% t() %>%
as.matrix() %>%  data.table()
markerData[markerData$markerList[1]==0,] <- NA
markerData[markerData$markerList[2]==0,] <- NA
markerData
markerDT <- markerData[dt2]
markerData[dt2]
markerDT <- markerData[dt2, on="Cell"]
CDS_to_Seurat <- function(cds, export_PC=F, export_UMAP=F, export_tSNE=F){
# sum(colnames(mDAT) != colnames( mDAT@reducedDimS))
## Manually save reduced dimensions
if(export_PC==T){
mDAT$PC1 <- mDAT@normalized_data_projection[,1]
mDAT$PC2 <- mDAT@normalized_data_projection[,2]
mDAT$PC3 <- mDAT@normalized_data_projection[,3]
}
if(export_UMAP==T){
mDAT$UMAP1 <- mDAT@reducedDimA[1,]
mDAT$UMAP2 <- mDAT@reducedDimA[2,]
mDAT$UMAP3 <- mDAT@reducedDimA[3,]
}
DAT <- exportCDS(mDAT, export_to = "Seurat", export_all = T)
DAT@scale.data <- DAT@data #Data was already scaled in Monocle
# DAT <- Seurat::AddMetaData(DAT, pData(mDAT)[c("garnett_cluster","cell_type","cluster_ext_type")])
return(DAT)
}
