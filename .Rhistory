make_fractionDF <- function(DEGs_monocytes_sig, geneList, allGenes=F){
DEGs_monocytes_sig$Gene <- row.names(DEGs_monocytes_sig)
if(allGenes==F){
geneDF <- subset(DEGs_monocytes_sig, Gene%in%geneList)
} else{geneDF <- DEGs_monocytes_sig}
pct_df <- melt(geneDF, id.vars = c("Gene","avg_logFC"), measure.vars = c("pct.2", "pct.1"),
variable.name = "Cluster", value.name = "FractionCells")
pct_df$Cluster <- ifelse(pct_df$Cluster=="pct.1", "1", "2")
return(pct_df)
}
cellFractions_plot <- function (DEGs_monocytes_sig, geneList, title="", allGenes=F){
pct_df <- make_fractionDF(DEGs_monocytes_sig, geneList, allGenes)
# Fraction Cells
cfp <- ggplot(data=pct_df, aes(x=Gene, y=FractionCells, fill=Cluster)) + geom_col(position="dodge") +
labs(title = title, y="Fraction of Cells", x="Gene") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
if(allGenes==T){
cfp <- cfp +  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
print(ggplotly(cfp))
}else{print(cfp)}
}
logFC_plot <- function(DEGs_monocytes_sig, geneList, title="", allGenes=F){
pct_df <- make_fractionDF(DEGs_monocytes_sig, geneList, allGenes)
# LogFC
lfcp <- ggplot(data=pct_df, aes(x=Gene, y=avg_logFC, fill=Gene)) + geom_col(position="dodge") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
labs(title = title, y="avg_logFC", x="Gene")
if(allGenes==T){
lfcp <- lfcp +  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
print(ggplotly(lfcp))
}else{print(lfcp)}
}
enrichment_test_and_plots <- function(DAT, DEG_df, geneList, disease=""){
overlappingGenes <- report_overlap(clustDAT,
list1=row.names(DEG_df),
list2=geneList)
## All DEGs
# cellFractions_plot(DEG_df, geneList,
#                      title= paste("Fraction of Cells Expressing\nAll",disease,"Genes"), allGenes = T)
# logFC_plot(DEG_df, geneList,  title= "LogFC\nAll PD Genes", allGenes = T)
# Overlapping Genes
if(length(overlappingGenes)>0){
# FeaturePlot(DAT, features.plot = overlappingGenes, dark.theme = T)
cellFractions_plot(DEG_df, overlappingGenes,
title= paste("Fraction of Cells Expressing\n",disease,"Genes Overlapping with DEGs") )
logFC_plot(DEG_df, overlappingGenes, title= paste("LogFC\n",disease,"Genes Overlapping with DEGs") )
if(length(overlappingGenes)>1){
overlap_heatmap(clustDAT, geneList=overlappingGenes,
title=paste("Overlapping Genes:\n",disease,"Genes vs. DGE Genes") )
}
} else {cat("There were no overlapping genes between the DGE list and",disease,"genes.")}
return(overlappingGenes)
}
purpleScale <-  c("grey","purple","blueviolet","magenta")
heatScale <-  c("yellow","grey","red")
overlappingGenes_PD <- enrichment_test_and_plots(clustDAT, DEGs_monocytes_sig, PDgenes$Gene)
# Moncle plot
plot_cell_clusters(mDAT, markers = c("LRRK2","GBA", overlappingGenes_PD), cell_size = 0.8)
overlappingGenes_AD <- enrichment_test_and_plots(clustDAT, DEGs_monocytes_sig, ADgenes$Gene)
# Show full heatmap too
overlap_heatmap(clustDAT, geneList = ADgenes$Gene, title = "All AD-related Genes")
# Monocle plot
plot_cell_clusters(mDAT, markers = overlappingGenes_AD, cell_size = 0.8)
clustDAT <- SubsetData(DAT, subset.name = "Cluster", accept.value = c(1,2), do.scale = F)
clustDAT
# Show full heatmap too
overlap_heatmap(clustDAT, geneList = ADgenes$Gene, title = "All AD-related Genes")
# Show full heatmap too
overlap_heatmap(clustDAT, geneList = ADgenes$Gene, title = "All AD-related Genes")
# Show full heatmap too
overlap_heatmap(clustDAT, geneList = ADgenes$Gene, title = "All AD-related Genes")
# Show full heatmap too
overlap_heatmap(clustDAT, geneList = PDgenes$Gene, title = "All PD-related Genes")
start_time <- Sys.time()
# Import functions
root = "./"
source(file.path(root,"general_functions.R"))
import_parameters(params)
load(file.path(resultsPath, "scRNAseq_results.RData"))
# resultsPath <- "Results/subsetGenes-protein_coding__subsetCells-F__Resolution-0.2__perplexity-40__nCores-4"
library(Seurat)
library(cowplot)
library(ggplot2)
library(dplyr)
library(data.table)
library(readxl)
library(reshape2)
library(ggrepel)
library(plotly)
library(GeneOverlap) # BiocManager::install("GeneOverlap")
library(enrichR) #BiocManager::install("enrichR")
library(monocle) # BiocManager::install("monocle")
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
#
if(getwd()=="/Users/schilder/Desktop/PD_scRNAseq"){
allGenes <- F
test.use <- "wilcox"
}else{
allGenes <- T
# MAST not install on Minerva...
test.use <- "wilcox"}
allGenes
# session_info() #Doesn't work on Minerva?
CDS_to_Seurat <- function(cds, export_PC=F, export_UMAP=F, export_tSNE=F){
# sum(colnames(mDAT) != colnames( mDAT@reducedDimS))
## Manually save reduced dimensions
if(export_PC==T){
mDAT$PC1 <- mDAT@normalized_data_projection[,1]
mDAT$PC2 <- mDAT@normalized_data_projection[,2]
mDAT$PC3 <- mDAT@normalized_data_projection[,3]
}
if(export_UMAP==T){
mDAT$UMAP1 <- mDAT@reducedDimA[1,]
mDAT$UMAP2 <- mDAT@reducedDimA[2,]
mDAT$UMAP3 <- mDAT@reducedDimA[3,]
}
DAT <- exportCDS(mDAT, export_to = "Seurat", export_all = T)
DAT@scale.data <- DAT@data #Data was already scaled in Monocle
# DAT <- Seurat::AddMetaData(DAT, pData(mDAT)[c("garnett_cluster","cell_type","cluster_ext_type")])
return(DAT)
}
DAT <- CDS_to_Seurat(mDAT, export_PC = T, export_UMAP = T)
head(DAT@meta.data)
CDS_to_Seurat <- function(cds, export_PC=F, export_UMAP=F, export_tSNE=F){
# sum(colnames(mDAT) != colnames( mDAT@reducedDimS))
## Manually save reduced dimensions
if(export_PC==T){
mDAT$PC1 <- mDAT@normalized_data_projection[,1]
mDAT$PC2 <- mDAT@normalized_data_projection[,2]
mDAT$PC3 <- mDAT@normalized_data_projection[,3]
}
if(export_UMAP==T){
mDAT$UMAP1 <- mDAT@reducedDimA[1,]
mDAT$UMAP2 <- mDAT@reducedDimA[2,]
mDAT$UMAP3 <- mDAT@reducedDimA[3,]
}
DAT <- exportCDS(mDAT, export_to = "Seurat", export_all = T)
DAT@scale.data <- DAT@data #Data was already scaled in Monocle
# DAT <- Seurat::AddMetaData(DAT, pData(mDAT)[c("garnett_cluster","cell_type","cluster_ext_type")])
return(DAT)
}
DAT <- CDS_to_Seurat(mDAT, export_PC = T, export_UMAP = T)
make_markerDF <- function(DAT, markerList){
markerData <- DAT@data[row.names(DAT@data) %in% markerList,] %>% t() %>%
as.matrix() %>%  data.table(keep.rownames = T, key = "rn")
markerData[markerData$markerList[1]==0,] <- NA
markerData[markerData$markerList[2]==0,] <- NA
colnames(markerData)[2:length(markerData)] <- c("Gene1", "Gene2")
return(markerData)
}
paste("Gene", rep(1:length(markerList)))
markerList <- c("CD14", "FCGR3A")
paste("Gene", rep(1:length(markerList)), sep="")
make_markerDF <- function(DAT, markerList){
markerData <- DAT@data[row.names(DAT@data) %in% markerList,] %>% t() %>%
as.matrix() %>%  data.table(keep.rownames = T, key = "rn")
markerData[markerData$markerList[1]==0,] <- NA
markerData[markerData$markerList[2]==0,] <- NA
colnames(markerData)[2:length(markerData)] <- paste("Gene", rep(1:length(markerList)), sep="")
return(markerData)
}
make_markerDF(DAT, c("CD14", "FCGR3A"))
pData(DAT)
exp_dat <- DAT@data %>% t() %>% as.matrix() %>%
data.table(keep.rownames = "Cell", key = "Cell")
meta_dat <- DAT@meta.data %>% data.table( keep.rownames = "Cell", key = "Cell")
meta_dat
combined_DAT <- exp_dat[meta_dat]
dim(combined_DAT)
head(combined_DAT)
str(combined_DAT)
combined_DAT <- meta_dat[exp_dat]
# Combine AD gene lists
curatedGenes <- read_excel("Data/curated_AD-PDgene_lists.xlsx")
AD_related_genes <- read_excel(file.path(root, "Data/AD-related_genes.xlsx"))
ADgenes <- rbind(AD_related_genes, data.frame(Gene=curatedGenes$AD_panel, Category="AD") ) %>%
unique()
# Combine PD gene lists
PDgenes <- data.frame(Gene=c("LRRK2","GBA",
curatedGenes$gwas_Nearest_gene_Nalls_2019,
curatedGenes$QTL_Nominated_genes_Nalls_2019,
curatedGenes$TWAS_Garrett
), Category="PD") %>% unique()
# DEGs_monocytes <- read.csv(file.path(root, resultsPath, "MonocyteSubtype.markers.csv"), row.names = 1)
DEGs_monocytes_sig <- subset(DEGs_monocytes, p_val_adj <= 0.05)
ADgenes
SubsetData(DAT, subset.name = ADgenes$Gene)
ADgenes$Gene
DAT[ADgenes$Gene, ]
DAT[ADgenes$Gene]
write.csv(combined_DAT, "Results/combined_DAT.csv", quote = F, row.names = F)
exp_dat <- DAT@data[,ADgenes$Gene]%>% t() %>% as.matrix() %>%
data.table(keep.rownames = "Cell", key = "Cell") %>%
meta_dat <- DAT@meta.data %>% data.table( keep.rownames = "Cell", key = "Cell")
exp_dat <- DAT@data[ADgenes$Gene]%>% t() %>% as.matrix() %>%
data.table(keep.rownames = "Cell", key = "Cell") %>%
meta_dat <- DAT@meta.data %>% data.table( keep.rownames = "Cell", key = "Cell")
ADgenes$Gene
subset(DAT@data, select=ADgenes$Gene)
DAT@data
DAT@data[ADgenes$Gene,]
DAT@data[row.names(DAT@data) %in% ADgenes$Gene
DAT@data[row.names(DAT@data) %in% ADgenes$Gene, ]
exp_dat <- DAT@data[row.names(DAT@data) %in% ADgenes$Gene, ] %>% t() %>% as.matrix() %>%
data.table(keep.rownames = "Cell", key = "Cell") %>%
meta_dat <- DAT@meta.data %>% data.table( keep.rownames = "Cell", key = "Cell")
exp_dat <- DAT@data[row.names(DAT@data) %in% ADgenes$Gene, ] %>% t() %>% as.matrix() %>%
data.table(keep.rownames = "Cell", key = "Cell")
exp_dat
exp_dat <- DAT@data[ADgenes$Gene, ] %>% t() %>% as.matrix() %>%
data.table(keep.rownames = "Cell", key = "Cell")
exp_dat <- DAT@data[row.names(DAT@data) %in% ADgenes$Gene, ] %>% t() %>% as.matrix() %>%
data.table(keep.rownames = "Cell", key = "Cell")
meta_dat <- DAT@meta.data %>% data.table( keep.rownames = "Cell", key = "Cell")
combined_DAT <- meta_dat[exp_dat]
combined_DAT
write.csv(combined_DAT, "Results/ADgene_expression.csv", quote = F, row.names = F)
str(combined_DAT)
exp_dat <- DAT@data[row.names(DAT@data) %in% c(ADgenes$Gene, PDgenes$Gene), ] %>%
t() %>% as.matrix() %>% data.table(keep.rownames = "Cell", key = "Cell")
meta_dat <- DAT@meta.data %>% data.table( keep.rownames = "Cell", key = "Cell")
combined_DAT <- meta_dat[exp_dat]
str(combined_DAT)
exp_dat <- DAT@data[row.names(DAT@data) %in% c(ADgenes$Gene, PDgenes$Gene), ] %>%
t() %>% as.matrix() %>% data.table(keep.rownames = "Cell", key = "Cell")
meta_dat <- DAT@meta.data %>% data.table( keep.rownames = "Cell", key = "Cell")
combined_DAT <- meta_dat[exp_dat]
str(combined_DAT)
write.csv(combined_DAT, "Results/AD-PD_gene_expression.csv", quote = F, row.names = F)
View(combined_DAT)
uniqueMarkers
uniqueMarkers
source(file.path(root,"general_functions.R"))
# Import functions
root = "./"
source(file.path(root,"general_functions.R"))
import_parameters(params)
load(file.path(resultsPath, "scRNAseq_results.RData"))
source(file.path(root,"general_functions.R"))
import_parameters(params)
load(file.path(resultsPath, "scRNAseq_results.RData"))
start_time <- Sys.time()
# Import functions
root = "./"
source(file.path(root,"general_functions.R"))
import_parameters(params)
load(file.path(resultsPath, "scRNAseq_results.RData"))
# resultsPath <- "Results/subsetGenes-protein_coding__subsetCells-F__Resolution-0.2__perplexity-40__nCores-4"
library(Seurat)
library(cowplot)
library(ggplot2)
library(dplyr)
library(data.table)
library(readxl)
library(reshape2)
library(ggrepel)
library(plotly)
library(GeneOverlap) # BiocManager::install("GeneOverlap")
library(enrichR) #BiocManager::install("enrichR")
library(monocle) # BiocManager::install("monocle")
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
#
if(getwd()=="/Users/schilder/Desktop/PD_scRNAseq"){
allGenes <- F
test.use <- "wilcox"
}else{
allGenes <- T
# MAST not install on Minerva...
test.use <- "wilcox"}
allGenes
# session_info() #Doesn't work on Minerva?
load(file.path(resultsPath, "scRNAseq_results.RData"))
CDS_to_Seurat <- function(cds, export_PC=F, export_UMAP=F, export_tSNE=F){
# sum(colnames(mDAT) != colnames( mDAT@reducedDimS))
## Manually save reduced dimensions
if(export_PC==T){
mDAT$PC1 <- mDAT@normalized_data_projection[,1]
mDAT$PC2 <- mDAT@normalized_data_projection[,2]
mDAT$PC3 <- mDAT@normalized_data_projection[,3]
}
if(export_UMAP==T){
mDAT$UMAP1 <- mDAT@reducedDimA[1,]
mDAT$UMAP2 <- mDAT@reducedDimA[2,]
mDAT$UMAP3 <- mDAT@reducedDimA[3,]
}
DAT <- exportCDS(mDAT, export_to = "Seurat", export_all = T)
DAT@scale.data <- DAT@data #Data was already scaled in Monocle
# DAT <- Seurat::AddMetaData(DAT, pData(mDAT)[c("garnett_cluster","cell_type","cluster_ext_type")])
return(DAT)
}
DAT <- CDS_to_Seurat(mDAT, export_PC = T, export_UMAP = T)
head(DAT@meta.data)
combine_exprs_and_metadata <- function(DAT, geneList, writeCSV=T){
exp_dat <- DAT@data[row.names(DAT@data) %in% geneList, ] %>%
t() %>% as.matrix() %>% data.table(keep.rownames = "Cell", key = "Cell")
meta_dat <- DAT@meta.data %>% data.table( keep.rownames = "Cell", key = "Cell")
combined_DAT <- meta_dat[exp_dat]
if(writeCSV==T){
write.csv(combined_DAT, "Results/AD-PD_gene_expression.csv", quote = F, row.names = F)
}
return(combined_DAT)
}
combined_DAT <-combine_exprs_and_metadata() c(ADgenes$Gene, PDgenes$Gene)
combined_DAT <-combine_exprs_and_metadata(DAT, c(ADgenes$Gene, PDgenes$Gene))
# Combine AD gene lists
curatedGenes <- read_excel("Data/curated_AD-PDgene_lists.xlsx")
AD_related_genes <- read_excel(file.path(root, "Data/AD-related_genes.xlsx"))
ADgenes <- rbind(AD_related_genes, data.frame(Gene=curatedGenes$AD_panel, Category="AD") ) %>%
unique()
# Combine PD gene lists
PDgenes <- data.frame(Gene=c("LRRK2","GBA",
curatedGenes$gwas_Nearest_gene_Nalls_2019,
curatedGenes$QTL_Nominated_genes_Nalls_2019,
curatedGenes$TWAS_Garrett
), Category="PD") %>% unique()
# DEGs_monocytes <- read.csv(file.path(root, resultsPath, "MonocyteSubtype.markers.csv"), row.names = 1)
DEGs_monocytes_sig <- subset(DEGs_monocytes, p_val_adj <= 0.05)
# Import previously run DGE results between Canonical and Intermediate monocytes
DEGs_monocytes <- read.csv(file.path(root, resultsPath, "MonocyteSubtype.markers.csv"),
row.names = 1)
DEGs_monocytes_sig <- subset(DEGs_monocytes, p_val_adj <= 0.05)
combine_exprs_and_metadata <- function(DAT, geneList, writeCSV=T){
exp_dat <- DAT@data[row.names(DAT@data) %in% geneList, ] %>%
t() %>% as.matrix() %>% data.table(keep.rownames = "Cell", key = "Cell")
meta_dat <- DAT@meta.data %>% data.table( keep.rownames = "Cell", key = "Cell")
combined_DAT <- meta_dat[exp_dat]
if(writeCSV==T){
write.csv(combined_DAT, "Results/AD-PD_gene_expression.csv", quote = F, row.names = F)
}
return(combined_DAT)
}
combined_DAT <-combine_exprs_and_metadata(DAT, c(ADgenes$Gene, PDgenes$Gene))
combined_DAT
combine_exprs_and_metadata <- function(DAT, geneList, resultsPath, writeCSV=T){
exp_dat <- DAT@data[row.names(DAT@data) %in% geneList, ] %>%
t() %>% as.matrix() %>% data.table(keep.rownames = "Cell", key = "Cell")
meta_dat <- DAT@meta.data %>% data.table( keep.rownames = "Cell", key = "Cell")
combined_DAT <- meta_dat[exp_dat]
if(writeCSV==T){
write.csv(combined_DAT, file.path(resultsPath, "AD-PD_gene_expression.csv"),
quote = F, row.names = F)
}
return(combined_DAT)
}
combined_DAT <-combine_exprs_and_metadata(DAT, c(ADgenes$Gene, PDgenes$Gene))
combined_DAT <-combine_exprs_and_metadata(DAT, c(ADgenes$Gene, PDgenes$Gene), resultsPath)
combined_DAT
report_overlap <- function(DAT, list1, list2){
genomeSize <- dim(DAT@raw.data)[1]
go.obj <- newGeneOverlap(listA = list1, listB = list2, genome.size = genomeSize )
go.obj <- testGeneOverlap(go.obj)
print(go.obj)
overlappingGenes <- getIntersection(go.obj)
percent_of_targetGenes <- length(overlappingGenes) / length(list2)*100
percent_of_DEGs <- length(overlappingGenes) / length(list1)*100
targetGenes_DEGs <- list2[overlappingGenes %in% list2]
cat("\n",round(percent_of_targetGenes, 2),"% of the provided genes (",length(overlappingGenes),"/",length(list2),") are differentially expressed between Canonical vs. Intermediate monocyte subtypes.")
cat("\n",round(percent_of_DEGs, 2),"% of the DEGs between Canonical vs. Intermediate  monocyte subtypes (",
length(overlappingGenes),"/",length(list1),") are in the provided gene list.")
cat("\n-------------------------------------------------------",
"\n\n********** Enrichment p-value =",go.obj@pval,"**********\n\n")
return(overlappingGenes)
}
###############################################
# PLOT FUNCTIONS
###############################################
overlap_heatmap <- function(clustDAT, geneList,
title="Overlapping Genes:\nGene List vs. DGE Genes",
interactive=F){
markerDF  <- get_markerDT(clustDAT, markerList = geneList, rawData = F)
markerMatrix <- reshape2::acast(markerDF, Gene~Cluster, value.var="Expression",
fun.aggregate = mean, drop = F, fill = 0)
# Heatmap.2
my_palette <- colorRampPalette(c("purple", "black", "cyan"))(n = 1000)
hmap <- gplots::heatmap.2(markerMatrix, xlab = "Cluster", dendrogram = "row",
col = my_palette, tracecol = "gray", srtCol = 0, offsetCol=1.5, vline=T,
trace='none', key.title=NA, key.ylab = "Expression", colsep=T, sepwidth = 0.01,
main = title)
}
make_fractionDF <- function(DEGs_monocytes_sig, geneList, allGenes=F){
DEGs_monocytes_sig$Gene <- row.names(DEGs_monocytes_sig)
if(allGenes==F){
geneDF <- subset(DEGs_monocytes_sig, Gene%in%geneList)
} else{geneDF <- DEGs_monocytes_sig}
pct_df <- melt(geneDF, id.vars = c("Gene","avg_logFC"), measure.vars = c("pct.2", "pct.1"),
variable.name = "Cluster", value.name = "FractionCells")
pct_df$Cluster <- ifelse(pct_df$Cluster=="pct.1", "1", "2")
return(pct_df)
}
cellFractions_plot <- function (DEGs_monocytes_sig, geneList, title="", allGenes=F){
pct_df <- make_fractionDF(DEGs_monocytes_sig, geneList, allGenes)
# Fraction Cells
cfp <- ggplot(data=pct_df, aes(x=Gene, y=FractionCells, fill=Cluster)) + geom_col(position="dodge") +
labs(title = title, y="Fraction of Cells", x="Gene") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
if(allGenes==T){
cfp <- cfp +  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
print(ggplotly(cfp))
}else{print(cfp)}
}
logFC_plot <- function(DEGs_monocytes_sig, geneList, title="", allGenes=F){
pct_df <- make_fractionDF(DEGs_monocytes_sig, geneList, allGenes)
# LogFC
lfcp <- ggplot(data=pct_df, aes(x=Gene, y=avg_logFC, fill=Gene)) + geom_col(position="dodge") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
labs(title = title, y="avg_logFC", x="Gene")
if(allGenes==T){
lfcp <- lfcp +  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
print(ggplotly(lfcp))
}else{print(lfcp)}
}
enrichment_test_and_plots <- function(DAT, DEG_df, geneList, disease=""){
overlappingGenes <- report_overlap(clustDAT,
list1=row.names(DEG_df),
list2=geneList)
## All DEGs
# cellFractions_plot(DEG_df, geneList,
#                      title= paste("Fraction of Cells Expressing\nAll",disease,"Genes"), allGenes = T)
# logFC_plot(DEG_df, geneList,  title= "LogFC\nAll PD Genes", allGenes = T)
# Overlapping Genes
if(length(overlappingGenes)>0){
# FeaturePlot(DAT, features.plot = overlappingGenes, dark.theme = T)
cellFractions_plot(DEG_df, overlappingGenes,
title= paste("Fraction of Cells Expressing\n",disease,"Genes Overlapping with DEGs") )
logFC_plot(DEG_df, overlappingGenes, title= paste("LogFC\n",disease,"Genes Overlapping with DEGs") )
if(length(overlappingGenes)>1){
overlap_heatmap(clustDAT, geneList=overlappingGenes,
title=paste("Overlapping Genes:\n",disease,"Genes vs. DGE Genes") )
}
} else {cat("There were no overlapping genes between the DGE list and",disease,"genes.")}
return(overlappingGenes)
}
purpleScale <-  c("grey","purple","blueviolet","magenta")
heatScale <-  c("yellow","grey","red")
identify_unique_markers <-function(DAT, clusterA, clusterB, allGenes=F, test.use="wilcox"){
DAT <- SetIdent(DAT, ident.use = DAT@meta.data$Cluster)
if(allGenes==F){
clustA.markers <- FindMarkers(DAT, ident.1=clusterA, min.pct = 0.25,
only.pos = F, test.use = test.use)
clustB.markers <- FindMarkers(DAT, ident.1=clusterB, min.pct = 0.25,
only.pos = F, test.use = test.use)
}else{
clustA.markers <- FindMarkers(DAT, ident.1=clusterA,
only.pos = F, test.use = test.use,
logfc.threshold = 0, min.pct = 0, min.cells.group = 1,
min.cells.gene = 1, min.diff.pct = -Inf)
clustB.markers <- FindMarkers(DAT, ident.1=clusterB,
only.pos = F, test.use = test.use,
logfc.threshold = 0, min.pct = 0, min.cells.group = 1,
min.cells.gene = 1, min.diff.pct = -Inf)
}
clustA.uniqueMarkers <- clustA.markers[!(row.names(clustA.markers) %in% row.names(clustB.markers)),] %>%
subset(p_val_adj<=0.05)
clustB.uniqueMarkers <- clustB.markers[!(row.names(clustB.markers) %in% row.names(clustA.markers)),] %>%
subset(p_val_adj<=0.05)
difference <- abs( length(row.names(clustA.uniqueMarkers)) - length(row.names(clustB.uniqueMarkers) ) )
uniqueMarkers <- data.frame(Cluster0_markers=c(row.names(clustA.uniqueMarkers), rep("",difference) ),
Cluster1_markers=row.names(clustB.uniqueMarkers))
write.csv(uniqueMarkers,
file.path(resultsPath,"unique_cluster_markers.csv"),
quote = F, row.names = F)
createDT(uniqueMarkers, "Unique/Mutually Exclusive Markers of Cluster 1 and Cluster 2")
return(uniqueMarkers)
}
uniqueMarkers <- identify_unique_markers(clustDAT, clusterA = 1, clusterB = 2,
allGenes=F, test.use = test.use)
createDT(uniqueMarkers, "Unique Biomarkers for Clusters 1 and 2")
clustDAT <- SubsetData(DAT, subset.name = "Cluster", accept.value = c(1,2), do.scale = F)
uniqueMarkers <- identify_unique_markers(clustDAT, clusterA = 1, clusterB = 2,
allGenes=F, test.use = test.use)
createDT(uniqueMarkers, "Unique Biomarkers for Clusters 1 and 2")
uniqueMarkers
DEGs_monocytes
identify_unique_markers <-function(DAT, clusterA, clusterB, allGenes=F, test.use="wilcox"){
DAT <- SetIdent(DAT, ident.use = DAT@meta.data$Cluster)
if(allGenes==F){
clustA.markers <- FindMarkers(DAT, ident.1=clusterA, min.pct = 0.10,
only.pos = F, test.use = test.use)
clustB.markers <- FindMarkers(DAT, ident.1=clusterB, min.pct = 0.10,
only.pos = F, test.use = test.use)
}else{
clustA.markers <- FindMarkers(DAT, ident.1=clusterA,
only.pos = F, test.use = test.use,
logfc.threshold = -Inf, min.pct = -Inf,
min.cells.group = -Inf,min.cells.gene = -Inf,
min.diff.pct = -Inf)
clustB.markers <- FindMarkers(DAT, ident.1=clusterB,
only.pos = F, test.use = test.use,
logfc.threshold = -Inf, min.pct = -Inf,
min.cells.group = -Inf,min.cells.gene = -Inf,
min.diff.pct = -Inf)
}
clustA.uniqueMarkers <- clustA.markers[!(row.names(clustA.markers) %in% row.names(clustB.markers)),] %>%
subset(p_val_adj<=0.05)
clustB.uniqueMarkers <- clustB.markers[!(row.names(clustB.markers) %in% row.names(clustA.markers)),] %>%
subset(p_val_adj<=0.05)
difference <- abs( length(row.names(clustA.uniqueMarkers)) - length(row.names(clustB.uniqueMarkers) ) )
uniqueMarkers <- data.frame(Cluster0_markers=c(row.names(clustA.uniqueMarkers), rep("",difference) ),
Cluster1_markers=row.names(clustB.uniqueMarkers))
write.csv(uniqueMarkers,
file.path(resultsPath,"unique_cluster_markers.csv"),
quote = F, row.names = F)
createDT(uniqueMarkers, "Unique/Mutually Exclusive Markers of Cluster 1 and Cluster 2")
return(uniqueMarkers)
}
uniqueMarkers <- identify_unique_markers(clustDAT, clusterA = 1, clusterB = 2,
allGenes=F, test.use = test.use)
uniqueMarkers
DAT <- SetIdent(DAT, ident.use = DAT@meta.data$Cluster)
DAT
uniqueMarkers <- identify_unique_markers(clustDAT, clusterA = 1, clusterB = 2,
allGenes=T, test.use = test.use)
