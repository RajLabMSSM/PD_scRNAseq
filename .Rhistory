variable.name = "bulk.module",
value.name = "bulk.MM") %>% unique()
merged.mods
sc.modules
merged.mods <- data.table:::merge.data.table(bulk.MM, sc.modules,
by.x = "symbol",
by.y = "gene.symbol", all.y = T) %>%
data.table::melt.data.table(id.vars = c("symbol","dim_1","dim_2","dim_3"),
measure.vars = bulk.mod.names,
variable.name = "bulk.module",
value.name = "bulk.MM")
merged.mods
cell_group_df
data.table::fwrite(gene_module_df, "./Results/sc.modules_by_gene.txt", sep="\t")
createDT(gene_module_df)
merged.mods <- data.table:::merge.data.table(bulk.MM, sc.modules,
by.x = "symbol",
by.y = "gene.symbol", all.y = T) %>%
data.table::melt.data.table(id.vars = c("symbol","dim_1","dim_2","dim_3"),
measure.vars = bulk.mod.names,
variable.name = "bulk.module",
value.name = "bulk.MM")
merged.mods
sc.modules
merged.mods
merged.mods <- data.table:::merge.data.table(bulk.MM, sc.modules,
by.x = "symbol",
by.y = "gene.symbol", all.y = T) %>%
data.table::melt.data.table(id.vars = c("symbol","dim_1","dim_2","dim_3"),
measure.vars = bulk.mod.names,
variable.name = "bulk.module",
value.name = "bulk.MM") %>%
dplyr::select(gene.symbol, module=bulk.module, supermodule=bulk.module, dim_1, dim_2, dim_3)
merged.mods <- data.table:::merge.data.table(bulk.MM, sc.modules,
by.x = "symbol",
by.y = "gene.symbol", all.y = T) %>%
data.table::melt.data.table(id.vars = c("symbol","dim_1","dim_2","dim_3"),
measure.vars = bulk.mod.names,
variable.name = "bulk.module",
value.name = "bulk.MM") %>%
dplyr::select(gene.symbol=symbol, module=bulk.module, supermodule=bulk.module, dim_1, dim_2, dim_3)
merged.mods
merged.mods <- data.table:::merge.data.table(bulk.MM, sc.modules,
by.x = "symbol",
by.y = "gene.symbol", all.y = T) %>%
data.table::melt.data.table(id.vars = c("symbol","dim_1","dim_2","dim_3"),
measure.vars = bulk.mod.names,
variable.name = "bulk.module",
value.name = "bulk.MM") %>%
dplyr::mutate(supermodule=bulk.module) %>%
dplyr::select(gene.symbol=symbol, module=bulk.module, supermodule=bulk.module, dim_1, dim_2, dim_3)
merged.mods
merged.mods <- data.table:::merge.data.table(bulk.MM, sc.modules,
by.x = "symbol",
by.y = "gene.symbol", all.y = T) %>%
data.table::melt.data.table(id.vars = c("symbol","dim_1","dim_2","dim_3"),
measure.vars = bulk.mod.names,
variable.name = "bulk.module",
value.name = "bulk.MM") %>%
dplyr::mutate(supermodule=bulk.module) %>%
dplyr::select(gene.symbol=symbol, module=bulk.module, supermodule, dim_1, dim_2, dim_3)
merged.mods
monocle3::plot_cells(cds,
genes=merged.mods,
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F)
merged.mods
unique(merged.mods)
merged.mods
merged.mods <- data.table:::merge.data.table(bulk.MM, sc.modules,
by.x = "symbol",
by.y = "gene.symbol", all.y = T) %>%
data.table::melt.data.table(id.vars = c("symbol","dim_1","dim_2","dim_3"),
measure.vars = bulk.mod.names,
variable.name = "bulk.module",
value.name = "bulk.MM") %>%
dplyr::mutate(supermodule=bulk.module) %>%
dplyr::select(gene.symbol=symbol, module=bulk.module, supermodule, dim_1, dim_2, dim_3)  %>%
unique()
monocle3::plot_cells(cds,
genes=merged.mods,
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F)
merged.mods
# bulk.MM <- data.table::fread("./Data/Katia_Modules/ModuleMembership_symbol_modules.tbl.txt", drop = c("MM"))
bulk.module
# bulk.MM <- data.table::fread("./Data/Katia_Modules/ModuleMembership_symbol_modules.tbl.txt", drop = c("MM"))
bulk.modules
merged.mods <- data.table:::merge.data.table(bulk.modules,
sc.modules,
by.x = "symbol",
by.y = "gene.symbol", all.y = T)
bulk.modules
merged.mods <- data.table:::merge.data.table(bulk.modules,
sc.modules,
by= "gene.symbol",
all.y = T) #%>%
merged.mods
bulk.modules
merged.mods <- data.table:::merge.data.table(bulk.modules %>% dplyr::select(bulk.module=module, gene.symbol),
sc.modules,
by= "gene.symbol",
all.y = T) #%>%
merged.mods
merged.mods <- data.table:::merge.data.table(bulk.modules %>% dplyr::select(bulk.module=module, gene.symbol),
sc.modules,
by= "gene.symbol",
all.y = T) %>%
dplyr::select(gene.symbol, module=bulk.module, supermodule, dim_1, dim_2, dim_3)
monocle3::plot_cells(cds,
genes=merged.mods,
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F)
merged.mods
row.names(merged.mods)
row.names(merged.mods) <- merged.mods$gene.symbol
merged.mods$gene.symbol
unique(merged.mods$gene.symbol)
length(unique(merged.mods$gene.symbol))
merged.mods <- data.table:::merge.data.table(bulk.modules %>% dplyr::select(bulk.module=module, gene.symbol),
sc.modules,
by= "gene.symbol",
all.y = T) %>%
dplyr::select(gene.symbol, module=bulk.module, supermodule, dim_1, dim_2, dim_3)
merged.mods
duplicated(merged.mods$gene.symbol)
merged.mods$gene.symbol[duplicated(merged.mods$gene.symbol)]
merged.mods <- data.table:::merge.data.table(bulk.modules %>% dplyr::select(bulk.module=module, gene.symbol),
sc.modules,
by= "gene.symbol",
all.y = T) %>%
dplyr::select(gene.symbol, module=bulk.module, supermodule, dim_1, dim_2, dim_3) %>% unique()
merged.mods
monocle3::plot_cells(cds,
genes=merged.mods,
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F)
merged.mods
merged.mods$module%>%unique()
#
# merged.mods$gene.symbol[duplicated(merged.mods$gene.symbol)]
# row.names(merged.mods) <- merged.mods$gene.symbol
select.modules <- c("sienna3","darkmagenta","green")
monocle3::plot_cells(cds,
genes=subset(merged.mods, module %>% select.modules),
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F)
#
# merged.mods$gene.symbol[duplicated(merged.mods$gene.symbol)]
# row.names(merged.mods) <- merged.mods$gene.symbol
select.modules <- c("sienna3","darkmagenta","green")
monocle3::plot_cells(cds,
genes=subset(merged.mods, module %in% select.modules),
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F)
#
# merged.mods$gene.symbol[duplicated(merged.mods$gene.symbol)]
# row.names(merged.mods) <- merged.mods$gene.symbol
select.modules <- c("sienna3","darkmagenta","green", "magenta")
monocle3::plot_cells(cds,
genes=subset(merged.mods, module %in% select.modules),
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F)
monocle3::plot_cells(cds,
genes=merged.mods,#subset(merged.mods, module %in% select.modules),
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F)
select.modules <- c("sienna3","darkmagenta","green", "magenta")
unique(merged.mods$module)
select.modules <- unique(merged.mods$module)[1:15]#c("sienna3","darkmagenta","green", "magenta") # unique(merged.mods$module)
monocle3::plot_cells(cds,
genes=subset(merged.mods, module %in% select.modules),
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F)
select.modules <- c("antiquewhite4","darkseagreen4","bisque4","plum1",
"blue","darkturquoise","purple","yellowgreen","ivory",
"pink","magenta","darkmagenta","honeydew1","maroon","midnightblue","turquoise") # uunique(merged.mods$module)[1:15]
monocle3::plot_cells(cds,
genes=subset(merged.mods, module %in% select.modules),
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F)
unique(merged.mods$module)
sort(unique(merged.mods$module))
select.modules <- c("lavenderblush3","darkturquoise","midnightblue","salmon4",
"honeydew1","pink","darkmagenta", ) # sort(unique(merged.mods$module))[1:15]
select.modules <- c("lavenderblush3","darkturquoise","midnightblue","salmon4",
"honeydew1","pink","darkmagenta") # sort(unique(merged.mods$module))[1:15]
monocle3::plot_cells(cds,
genes=subset(merged.mods, module %in% select.modules),
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F)
select.modules <- c("lavenderblush3","darkturquoise","midnightblue","salmon4",
"honeydew1","pink","darkmagenta","green") # sort(unique(merged.mods$module))[1:15]
monocle3::plot_cells(cds,
genes=subset(merged.mods, module %in% select.modules),
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F)
select.modules <- c("lavenderblush3","darkturquoise","midnightblue","salmon4",
"honeydew1","pink","darkmagenta","green","blue","brown",
"darkolivegreen","darkorange2","purple","skyblue3",
"thistle1","thistle2") # sort(unique(merged.mods$module))[1:15]
monocle3::plot_cells(cds,
genes=subset(merged.mods, module %in% select.modules),
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F)
p <- monocle3::plot_cells(cds,
genes=subset(merged.mods, module %in% select.modules),
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F)
ggsave("./Results/sc.module9.png", plot=p, dpi=400, width=10, height=7)
ggsave("./Results/sc_to_bulk.png", plot=p, dpi=400, width=10, height=7)
"https://rajlabmssm.github.io/WGCNA_MyND/2nd_batch_Analysis/protein_coding/04_sva/deepSplit_4/signed/04_page_sva_deep4_signed_PC.html#boxplot_mergedmes"=="https://rajlabmssm.github.io/WGCNA_MyND/2nd_batch_Analysis/protein_coding/04_sva/deepSplit_4/signed/04_page_sva_deep4_signed_PC.html#boxplot_mergedmes"
p <- monocle3::plot_cells(cds,
genes=subset(merged.mods, module %in% select.modules),
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F)
print(p)
p2 <- monocle3::plot_cells(cds,
genes=merged.mods,
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F)
print(p2)
ggsave("./Results/sc_to_bulk.all.png", plot=p2, dpi=400, width=20, height=14)
load("Results/Current_Pipeline/scRNAseq_results.RData")
load("Results/scRNAseq_results.RData")
# load("Results/scRNAseq_results.RData")
load("Data/seurat_object_add_HTO_ids.Rdata")
seurat.obj
# load("Results/scRNAseq_results.RData")
# load("Data/seurat_object_add_HTO_ids.Rdata")
# load(file.path(resultsPath, "3-11-2019/scRNAseq_results.RData"))
load(file.path("Data", "monocle3_CDS.RData"))
cdds
cds
biotypes <- get_biotypes(DAT)
source(file.path(root,"MAIN.R"))
#### #### Load Objects & Functions #### ####
######################################################
# Import functions
root = "./"
source(file.path(root,"MAIN.R"))
import_parameters(params)
# https://satijalab.org/seurat/install.html
# source("http://bit.ly/archived-seurat")
library(Seurat)
paste("Seurat", packageVersion("Seurat"))
# library(monocle) # BiocManager::install("monocle")
# paste("monocle", packageVersion("monocle"))
library(monocle3)
paste("monocle3", packageVersion("monocle3"))
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
library(plotly)
# Exporting 3D plots
knitr::knit_hooks$set(webgl = rgl::hook_webgl)
dge_limit <- F # 100
nCores <- 4#parallel::detectCores()
set.seed(2019)
biotypes <- get_biotypes(DAT)
# load("Results/scRNAseq_results.RData")
# load("Data/seurat_object_add_HTO_ids.Rdata")
# load(file.path(resultsPath, "3-11-2019/scRNAseq_results.RData"))
load(file.path("Data", "monocle3_CDS.RData"))
biotypes <- get_biotypes(DAT)
DAT
start_time <- Sys.time()
#### #### Load Objects & Functions #### ####
######################################################
# Import functions
root = "./"
source(file.path(root,"MAIN.R"))
import_parameters(params)
# load("Results/scRNAseq_results.RData")
# load("Data/seurat_object_add_HTO_ids.Rdata")
# load(file.path(resultsPath, "3-11-2019/scRNAseq_results.RData"))
load(file.path("Data", "monocle3_CDS.RData"))
######################################################
#### #### PACKAGES #### ####
######################################################
print("Written using: Seurat version* 2.3.4 2018-07-17")
# https://satijalab.org/seurat/install.html
# source("http://bit.ly/archived-seurat")
library(Seurat)
paste("Seurat", packageVersion("Seurat"))
# library(monocle) # BiocManager::install("monocle")
# paste("monocle", packageVersion("monocle"))
library(monocle3)
paste("monocle3", packageVersion("monocle3"))
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
paste("garnett", packageVersion("garnett"))
library(cowplot)
library(ggplot2)
library(dplyr)
library(data.table)
library(readxl)
library(reshape2)
library(ggrepel)
library(plotly)
######################################################
# Exporting 3D plots
knitr::knit_hooks$set(webgl = rgl::hook_webgl)
dge_limit <- F # 100
nCores <- 4#parallel::detectCores()
set.seed(2019)
cds <- monocle3::preprocess_cds(cds,
num_dim = 20, #100 by default
residual_model_formula_str = "~ nUMI + percent.mito")
monocle3::plot_pc_variance_explained(cds)
?preprocess_cds
# c("UMAP", "tSNE", "PCA", "LSI")
cds <- monocle3::reduce_dimension(cds, reduction_method = "UMAP",
max_components = 3
# umap.fast_sgd = T,
# cores=nCores
)
# Method 1
# variable.genes <- cds@preprocess_aux@listData$gene_loadings[,1:3] %>%
#   abs() %>% rowSums() %>% base::sort(decreasing = T)
# head(variable.genes)
varDAT <- Seurat::FindVariableGenes(object = protDAT,
mean.function = ExpMean,
dispersion.function = LogVMR,
selection.method ="dispersion", do.plot = T,
top.genes = 2000)
# Method 1
# variable.genes <- cds@preprocess_aux@listData$gene_loadings[,1:3] %>%
#   abs() %>% rowSums() %>% base::sort(decreasing = T)
# head(variable.genes)
Seurat:::FindVariableFeatures(protDAT)
load("Results/scRNAseq_results.RData")
DAT
# Method 1
# variable.genes <- cds@preprocess_aux@listData$gene_loadings[,1:3] %>%
#   abs() %>% rowSums() %>% base::sort(decreasing = T)
# head(variable.genes)
Seurat:::FindVariableFeatures(protDAT)
protDAT
# Method 1
# variable.genes <- cds@preprocess_aux@listData$gene_loadings[,1:3] %>%
#   abs() %>% rowSums() %>% base::sort(decreasing = T)
# head(variable.genes)
protNEW <- UpdateSeuratObject(protDAT)
protNEW
Seurat:::FindVariableFeatures(protNEW)
varDAT <- Seurat:::FindVariableFeatures(object = protNEW,
mean.function = ExpMean,
dispersion.function = LogVMR,
selection.method ="dispersion",
do.plot = T,
top.genes = 2000)
varDAT <- Seurat:::FindVariableFeatures(object = protNEW,
# mean.function = ExpMean,
# dispersion.function = LogVMR,
# selection.method ="dispersion",
do.plot = T,
top.genes = 2000)
varDAT
var.genes <- varDAT@var.genes
varDAT <- Seurat:::FindVariableFeatures(object = protNEW,
do.plot = T,
top.genes = 2000)
?FindVariableFeatures
varDAT <- Seurat:::FindVariableFeatures(object = protNEW,
nfeatures = 2000)
varDAT <- Seurat:::FindVariableFeatures(object = protNEW,
selection.method = "vst",
mean.function = FastExpMean,
dispersion.function = FastLogVMR,
nfeatures = 2000)
varDAT <- Seurat:::FindVariableFeatures(object = protNEW,
selection.method = "vst",
dispersion.function = FastLogVMR,
nfeatures = 2000)
varDAT <- Seurat:::FindVariableFeatures(object = protNEW,
selection.method = "vst",
dispersion.function = "FastLogVMR",
nfeatures = 2000)
varDAT <- Seurat:::FindVariableFeatures(object = protNEW,
selection.method = "vst",
mean.function = "FastExpMean",
dispersion.function = "FastLogVMR",
nfeatures = 2000)
varDAT
varDAT@meta.data$nFeature_RNA
varDAT@nGene
varDAT@reductions
str(varDAT)
varDAT@assays$RNA@var.features
var.genes <- varDAT@assays$RNA@var.features
length(var.genes)
head(var.genes)
cds <- monocle3::cluster_cells(cds,
resolution = 1e-4,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
clustering_genes = var.genes)
cds <- monocle3::cluster_cells(cds,
resolution = 1e-4,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
clustering_genes = var.genes,
python_home="/hpc/packages/minerva-centos7/anaconda3/2018.12/bin/python")
system("which python")
reticulate::py_available()
?py_available
reticulate::py_config()
reticulate::py_versions_windows()
reticulate::conda_list()
system("ml python")
reticulate::
cds <- monocle3::cluster_cells(cds,
resolution = 1e-4,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
clustering_genes = var.genes)
?fit_models
d <- data.table::fread("./Results/across_Clust1.vs.Clust2.csv")
d
subset(d, q_value <0.05)
deg <- data.table::fread("./Results/across_Clust1.vs.Clust2.csv")
deg <- data.table::fread("./Results/across_Clust1.vs.Clust2.csv")
deg <- subset(deg, q_value <0.05)
deg$term>0
sum(deg$term>0)
degf
deg
sum(deg$estimate>0)
sum(deg$estimate<0)
336+591
start_time <- Sys.time()
#### #### Load Objects & Functions #### ####
######################################################
# Import functions
root = "./"
source(file.path(root,"MAIN.R"))
import_parameters(params)
load("Results/scRNAseq_results.RData")
start_time <- Sys.time()
#### #### Load Objects & Functions #### ####
######################################################
# Import functions
root = "./"
source(file.path(root,"MAIN.R"))
import_parameters(params)
# load("Results/scRNAseq_results.RData")
# load("Data/seurat_object_add_HTO_ids.Rdata")
# load(file.path(resultsPath, "3-11-2019/scRNAseq_results.RData"))
load(file.path("Data", "monocle3_CDS.RData"))
######################################################
#### #### PACKAGES #### ####
######################################################
print("Written using: Seurat version* 2.3.4 2018-07-17")
# https://satijalab.org/seurat/install.html
# source("http://bit.ly/archived-seurat")
library(Seurat)
paste("Seurat", packageVersion("Seurat"))
# library(monocle) # BiocManager::install("monocle")
# paste("monocle", packageVersion("monocle"))
library(monocle3)
paste("monocle3", packageVersion("monocle3"))
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
paste("garnett", packageVersion("garnett"))
library(cowplot)
library(ggplot2)
library(dplyr)
library(data.table)
library(readxl)
library(reshape2)
library(ggrepel)
library(plotly)
######################################################
# Exporting 3D plots
knitr::knit_hooks$set(webgl = rgl::hook_webgl)
dge_limit <- F # 100
nCores <- 4#parallel::detectCores()
set.seed(2019)
library(dplyr)
library(ggplot2)
root = "./"
source(file.path(root,"MAIN.R"))
import_parameters(params)
load("./Data/monocle3_CDS.RData")
nCores <- 4
cds
monocle3::plot_cells(cds = cds, genes = c("NDUFB1", "UQCR11", "COX7B", "CTSB", "BST1", "GRN"))
monocle3::plot_cells(cds = cds,
genes = c("NDUFB1", "UQCR11", "COX7B", "CTSB", "BST1", "GRN"),
show_trajectory_graph = F)
fp <- monocle3::plot_cells(cds = cds,
genes = c("NDUFB1", "UQCR11", "COX7B", "CTSB", "BST1", "GRN"),
show_trajectory_graph = F)
ggsave("./Results/Elisa_selected_genes.png", plot = fp, dpi = 400)
ggsave("./Results/Elisa_selected_genes.png", plot = fp, dpi = 400, width = 10)
ggsave("./Results/Elisa_selected_genes.png", plot = fp, dpi = 400, height,=7 width = 7)
ggsave("./Results/Elisa_selected_genes.png", plot = fp, dpi = 400, height=5, width = 7)
ggsave("./Results/Elisa_selected_genes.png", plot = fp, dpi = 400, height=4, width = 7)
ggsave("./Results/Elisa_selected_genes.png", plot = fp, dpi = 400, height=5, width = 8)
