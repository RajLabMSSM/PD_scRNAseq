if(getwd()=="/Users/schilder/Desktop/PD_scRNAseq"){
allGenes <- F
test.use <- "wilcox"
}else{
allGenes <- T
# MAST not install on Minerva...
test.use <- "wilcox"}
allGenes <- T
cds <- seurat_to_monocle(seurat_object = DAT, monocle_version = 3)
cds
cds <- preprocess_cds(cds, num_dim = 100, residual_model_formula_str = "~ nUMI + percent.mito")
# c("UMAP", "tSNE", "PCA", "LSI")
cds <- reduce_dimension(cds, reduction_method = "UMAP")
row dimension of design doesn't match column dimension of data object
cds@metadata
cds@metadata$cds_version
seurat_object@meta.data
dim(seurat_object@meta.data)
dim(data)
data <- seurat_object@data
data
data <- seurat_object@scale.data
data
data <- seurat_object@raw.data
dim(data)
# Make sure metadata and expression data have the same cells
row.names(data)
# Make sure metadata and expression data have the same cells
colNames(data)
# Make sure metadata and expression data have the same cells
colnames(data)
seurat_object@meta.data
dplyr::intersect(colnames(data), row.names(seurat_object@meta.data))
cell_IDs <- dplyr::intersect(colnames(data), row.names(seurat_object@meta.data))
subset(data, select = cell_IDs)
data[cell_IDs]
data[,cell_IDs]
metadata <- seurat_object@meta.data
# Make sure metadata and expression data have the same cells
cell_IDs <- dplyr::intersect(colnames(data), row.names(metadata))
data <- data[,cell_IDs]
metadata[cell_IDs,]
data <- data[,cell_IDs]
metadata <- metadata[cell_IDs,]
monocle_cds <- monocle3::new_cell_data_set(expression_data = data,
cell_metadata = metadata,
gene_metadata = fDATA)
seurat_to_monocle <- function(seurat_object, monocle_version=3){
# Make sure Seurat object is up to do date with Seurat v3 format
seurat_object <- Seurat::UpdateSeuratObject(object = DAT)
# From: https://github.com/cole-trapnell-lab/monocle-release/issues/262
print("Processing...")
print("+ Expression data")
data <- seurat_object@raw.data
print("+ Phenotype data")
metadata <- seurat_object@meta.data
pd <- new('AnnotatedDataFrame', data = seurat_object@meta.data)
print("+ Feature Data")
fDATA <- data.frame(gene_short_name = row.names(data), row.names = row.names(data))
fd <- new('AnnotatedDataFrame', data = fDATA)
# Make sure metadata and expression data have the same cells
cell_IDs <- dplyr::intersect(colnames(data), row.names(metadata))
data <- data[,cell_IDs]
metadata <- metadata[cell_IDs,]
#Construct monocle cds
if(monocle_version==3){
print("+ Converting to monocle (Version 3)")
monocle_cds <- monocle3::new_cell_data_set(expression_data = data,
cell_metadata = metadata,
gene_metadata = fDATA)
} else {
print("+ Converting to monocle (Version 2)")
monocle_cds <- monocle::newCellDataSet(data,
phenoData = pd,
featureData = fd,
lowerDetectionLimit = 0.5,
expressionFamily = VGAM::negbinomial.size())
}
return(monocle_cds)
}
cds <- seurat_to_monocle(seurat_object = DAT, monocle_version = 3)
cds
cds <- preprocess_cds(cds,
num_dim = 100,
residual_model_formula_str = "~ nUMI + percent.mito")
dim(data)
dim(metadata)
dim(fDATA)
seurat_to_monocle <- function(seurat_object, monocle_version=3){
# Make sure Seurat object is up to do date with Seurat v3 format
seurat_object <- Seurat::UpdateSeuratObject(object = DAT)
# From: https://github.com/cole-trapnell-lab/monocle-release/issues/262
print("Processing...")
print("+ Expression data")
data <- seurat_object@raw.data
print("+ Phenotype data")
metadata <- seurat_object@meta.data
pd <- new('AnnotatedDataFrame', data = seurat_object@meta.data)
print("+ Feature Data")
fDATA <- data.frame(gene_short_name = row.names(data), row.names = row.names(data))
fd <- new('AnnotatedDataFrame', data = fDATA)
# Make sure metadata and expression data have the same cells
cell_IDs <- dplyr::intersect(colnames(data), row.names(metadata))
data <- data[,cell_IDs]
metadata <- metadata[cell_IDs,]
print("Expression Data dims:")
dim(data)
print("Metadata dims:")
dim(metadata)
print("Feature Data dims:")
dim(fDATA)
#Construct monocle cds
if(monocle_version==3){
print("+ Converting to monocle (Version 3)")
cds <- monocle3::new_cell_data_set(expression_data = data,
cell_metadata = metadata,
gene_metadata = fDATA)
} else {
print("+ Converting to monocle (Version 2)")
cds <- monocle::newCellDataSet(data,
phenoData = pd,
featureData = fd,
lowerDetectionLimit = 0.5,
expressionFamily = VGAM::negbinomial.size())
}
return(cds)
}
cds <- seurat_to_monocle(seurat_object = DAT, monocle_version = 3)
print(dim(data))
seurat_to_monocle <- function(seurat_object, monocle_version=3){
# Make sure Seurat object is up to do date with Seurat v3 format
seurat_object <- Seurat::UpdateSeuratObject(object = DAT)
# From: https://github.com/cole-trapnell-lab/monocle-release/issues/262
print("Processing...")
print("+ Expression data")
data <- seurat_object@raw.data
print("+ Phenotype data")
metadata <- seurat_object@meta.data
pd <- new('AnnotatedDataFrame', data = seurat_object@meta.data)
print("+ Feature Data")
fDATA <- data.frame(gene_short_name = row.names(data), row.names = row.names(data))
fd <- new('AnnotatedDataFrame', data = fDATA)
# Make sure metadata and expression data have the same cells
cell_IDs <- dplyr::intersect(colnames(data), row.names(metadata))
data <- data[,cell_IDs]
metadata <- metadata[cell_IDs,]
print("Expression Data dims:")
print(dim(data))
print("Metadata dims:")
print(dim(metadata))
print("Feature Data dims:")
print(dim(fDATA))
#Construct monocle cds
if(monocle_version==3){
print("+ Converting to monocle (Version 3)")
cds <- monocle3::new_cell_data_set(expression_data = data,
cell_metadata = metadata,
gene_metadata = fDATA)
} else {
print("+ Converting to monocle (Version 2)")
cds <- monocle::newCellDataSet(data,
phenoData = pd,
featureData = fd,
lowerDetectionLimit = 0.5,
expressionFamily = VGAM::negbinomial.size())
}
return(cds)
}
cds <- seurat_to_monocle(seurat_object = DAT, monocle_version = 3)
mDAT <- estimateSizeFactors(cds) #DESeq2?
cds <- monocle::preprocessCDS(cds, num_dim = 20, residualModelFormulaStr = "~ nUMI + percent.mito")
cds@metadata
pData(cds)
pData(cds)
cds[,pData(cds)$nGene > 0]
is.na(pData(cds))
is.na(pData(cds)) <- 0
cds[,pData(cds)$nGene > 0]
is.na(pData(cds))
pData(cds)[is.na(pData(cds))]
is.na(pData(cds))
pData(cds)[is.na(pData(cds))]
pData(cds)
cds[,pData(cds)$nGene > 0]
pData(cds)
metadata <- pData(cds)
metadata
metadata <- pData(cds)
is.na(metadata)
metadata[is.na(metadata)]
pData(cds)[1]
metadata <- as.data.frame(pData(cds))
metadata
metadata[is.na(metadata)]
is.na(metadata)
metadata[is.na(metadata)] <- NA
metadata[is.na(metadata)] <- 0
metadata
cds[!is.na(pData(cds))]
cds[!is.na(pData(cds))$nGene]
cds[!is.na(pData(cds))$nGene,]
is.na(pData(cds))$nGene
is.na(pData(cds))
cds[!is.na(pData(cds)$nGene),]
# Remove nGenes == NA
cds <- cds[!is.na(pData(cds)["nGene","nUMI","percent.mito"])]
pData(cds)["nGene","nUMI","percent.mito"]
dplyr::select(pData(cds))
dplyr::select(pData(cds), c("nGene","nUMI","percent.mito") )
# Remove nGenes == NA
cds <- cds[!is.na(pData(cds)["nGene"]),]
# Remove nGenes == NA
cds <- cds[!is.na(pData(cds)$nGene),]
pData(cds)$nGene
is.na(pData(cds)$nGene)
cds[!is.na(pData(cds)$nGene),]
cds[!is.na(pData(cds)$nGene)]
cds[!is.na(pData(cds)$nGene),]
cds <- seurat_to_monocle(seurat_object = DAT, monocle_version = 3)
cds <- seurat_to_monocle(seurat_object = DAT, monocle_version = 3)
cds
# Remove nGenes == NA
cds[!is.na(pData(cds)$nGene),]
# Remove nGenes == NA
cds <- cds[!is.na(pData(cds)$nGene),]
pData(cds)
cds <- cds[pData(cds)$nGene!="NA",]
pData(cds)$nGene!="NA"
cds
# Make sure Seurat object is up to do date with Seurat v3 format
seurat_object <- Seurat::UpdateSeuratObject(object = DAT)
data <- seurat_object@raw.data
print("+ Phenotype data")
metadata <- seurat_object@meta.data
metadata <- seurat_object@meta.data
# Filter metadata
metadata
# Filter metadata
is.na(metadata)
metadata==NA
metadata=="NA"
# Filter metadata
metadata[!is.na(metadata)]
# Filter metadata
metadata[!is.na(metadata)]
# Filter metadata
subset(metadata, is.na)
# Filter metadata
as.data.frame(metadata)
metadata <- as.data.frame(seurat_object@meta.data)
# Filter metadata
metadata[!is.na(metadata)]
is.na(metadata)
# Filter metadata
metadata[is.na(metadata)]
is.na(metadata)
?is.na
metadata
dim(metadata)
gsub(NA, 0, metadata)
metadata %>% mutate_all(~replace(., is.na(.), 0))
seurat_object@meta.data
Seurat::SubsetData(object = DAT,  subset.names = "nGene", low.thresholds = 0,
# Subset for testing
cells.use = DAT@cell.names[0:as.numeric(subsetCells) ]
# From: https://github.com/cole-trapnell-lab/monocle-release/issues/262
print("Processing...")
print("+ Expression data")
data <- seurat_object@raw.data
print("+ Phenotype data")
metadata <- as.data.frame(seurat_object@meta.data)
# Filter metadata
metadata[is.na(metadata)]
gsub(NA, 0, metadata)
metadata %>% mutate_all(~replace(., is.na(.), 0))
print("+ Feature Data")
fDATA <- data.frame(gene_short_name = row.names(data), row.names = row.names(data))
# Make sure metadata and expression data have the same cells
cell_IDs <- dplyr::intersect(colnames(data), row.names(metadata))
data <- data[,cell_IDs]
metadata <- metadata[cell_IDs,]
print("Expression Data dims:")
print(dim(data))
print("Metadata dims:")
print(dim(metadata))
print("Feature Data dims:")
print(dim(fDATA))
#Construct monocle cds
if(monocle_version==3){
print("+ Converting to monocle (Version 3)")
cds <- monocle3::new_cell_data_set(expression_data = data,
cell_metadata = metadata,
gene_metadata = fDATA)
} else {
print("+ Converting to monocle (Version 2)")
pd <- new('AnnotatedDataFrame', data = seurat_object@meta.data)
fd <- new('AnnotatedDataFrame', data = fDATA)
cds <- monocle::newCellDataSet(data,
phenoData = pd,
featureData = fd,
lowerDetectionLimit = 0.5,
expressionFamily = VGAM::negbinomial.size())
}
return(cds)
}
Seurat::SubsetData(object = DAT,  subset.names = "nGene", low.thresholds = 0,
# Subset for testing
cells.use = DAT@cell.names[0:as.numeric(subsetCells) ])
# Import functions
root = "./"
source(file.path(root,"general_functions.R"))
import_parameters(params)
# resultsPath <- "Results/Current_Pipeline"
# load(file.path(resultsPath, "scRNAseq_results.RData"))
## Upgrade to alpha (development) version of Monocle, as this version has been optimized for large datasets
if("DDRTree" %in% rownames(installed.packages())==F){
devtools::install_github("cole-trapnell-lab/DDRTree", ref="simple-ppt-like")
}
if("graph" %in% rownames(installed.packages())==F){
devtools::install_github("cole-trapnell-lab/L1-graph")
}
if("reticulate" %in% rownames(installed.packages())==F){
install.packages("reticulate")
}
if("flexclust" %in% rownames(installed.packages())==F){
install.packages("flexclust")
}
if("mcclust" %in% rownames(installed.packages())==F){
install.packages("mcclust")
}
if(py_module_available("umap-learn")==F){
reticulate::py_install('umap-learn')# , pip = T, pip_ignore_installed = T # Ensure the latest version of UMAP is installed
}
start_time <- Sys.time()
# Import functions
root = "./"
source(file.path(root,"MAIN.R"))
import_parameters(params)
# load("Results/Current_Pipeline/scRNAseq_results.RData")
load(file.path(resultsPath, "scRNAseq_results.RData"))
# resultsPath <- "Results/subsetGenes-protein_coding__subsetCells-F__Resolution-0.2__perplexity-40__nCores-4"
print("Written using: Seurat version* 2.3.4 2018-07-17")
# https://satijalab.org/seurat/install.html
library(Seurat) #
paste("Seurat", packageVersion("Seurat"))
# library(monocle) # BiocManager::install("monocle")
# paste("monocle", packageVersion("monocle"))
library(monocle3)
paste("monocle3", packageVersion("monocle3"))
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
paste("garnett", packageVersion("garnett"))
library(cowplot)
library(ggplot2)
library(dplyr)
library(data.table)
library(readxl)
library(reshape2)
library(ggrepel)
library(plotly)
library(GeneOverlap) # BiocManager::install("GeneOverlap")
if(getwd()=="/Users/schilder/Desktop/PD_scRNAseq"){
allGenes <- F
test.use <- "wilcox"
}else{
allGenes <- T
# MAST not install on Minerva...
test.use <- "wilcox"}
allGenes <- T
# Make sure Seurat object is up to do date with Seurat v3 format
seurat_object <- Seurat::UpdateSeuratObject(object = DAT)
DAT <- Seurat::SubsetData(object = DAT,  subset.names = "nGene", low.thresholds = 0)
DAT
DAT@meta.data
DAT@meta.data$nGene
is.na(DAT@meta.data$nGene)
DAT@meta.data[is.na,]
DAT@meta.data[is.na(DAT@meta.data$nGene),]
DAT@meta.data[!is.na(DAT@meta.data$nGene),]
DAT@meta.data  <- DAT@meta.data[!is.na(DAT@meta.data$nGene),]
DAT
fDATA <- data.frame(gene_short_name = row.names(data), row.names = row.names(data))
# Make sure metadata and expression data have the same cells
cell_IDs <- dplyr::intersect(colnames(data), row.names(metadata))
data <- data[,cell_IDs]
data
sDAT <- seurat_object@raw.data
print("+ Phenotype data")
metadata <- as.data.frame(seurat_object@meta.data)
# Filter metadata
DAT <- Seurat::SubsetData(object = sDAT,  subset.names = "nGene", low.thresholds = 0)
# Filter metadata
sDAT@meta.data  <- sDAT@meta.data[!is.na(sDAT@meta.data$nGene),]
sDAT
# Make sure Seurat object is up to do date with Seurat v3 format
sDAT <- Seurat::UpdateSeuratObject(object = DAT)
sDAT <- seurat_object@raw.data
dat <- sDAT@raw.data
# Make sure Seurat object is up to do date with Seurat v3 format
sDAT <- Seurat::UpdateSeuratObject(object = DAT)
dat <- sDAT@raw.data
print("+ Phenotype data")
metadata <- as.data.frame(seurat_object@meta.data)
# Filter metadata
dat@meta.data  <- dat@meta.data[!is.na(dat@meta.data$nGene),]
expr_dat <- sDAT@raw.data
print("+ Phenotype data")
metadata <- as.data.frame(seurat_object@meta.data)
# Filter metadata
sDAT@meta.data  <- sDAT@meta.data[!is.na(sDAT@meta.data$nGene),]
fDATA <- data.frame(gene_short_name = row.names(expr_dat), row.names = row.names(expr_dat))
metadata <- as.data.frame(sDAT@meta.data)
metadata <- sDAT@meta.data
fDATA <- data.frame(gene_short_name = row.names(expr_dat), row.names = row.names(expr_dat))
# Make sure metadata and expression data have the same cells
cell_IDs <- dplyr::intersect(colnames(expr_dat), row.names(metadata))
sDAT <- sDAT[,cell_IDs]
sDAT
cell_IDs
expr_dat <- expr_dat[,cell_IDs]
metadata <- metadata[cell_IDs,]
print("Expression Data dims:")
print(dim(expr_dat))
print("Metadata dims:")
print(dim(metadata))
print("Feature Data dims:")
print(dim(fDATA))
cds <- monocle3::new_cell_data_set(expression_data = expr_dat,
cell_metadata = metadata,
gene_metadata = fDATA)
cds
metadata
seurat_to_monocle <- function(seurat_object, monocle_version=3){
# Make sure Seurat object is up to do date with Seurat v3 format
sDAT <- Seurat::UpdateSeuratObject(object = DAT)
# From: https://github.com/cole-trapnell-lab/monocle-release/issues/262
print("Processing...")
print("+ Expression data")
expr_dat <- sDAT@raw.data
print("+ Phenotype data")
# Filter metadata
sDAT@meta.data  <- sDAT@meta.data[!is.na(sDAT@meta.data$nGene),]
metadata <- sDAT@meta.data
print("+ Feature Data")
fDATA <- data.frame(gene_short_name = row.names(expr_dat), row.names = row.names(expr_dat))
# Make sure metadata and expression data have the same cells
cell_IDs <- dplyr::intersect(colnames(expr_dat), row.names(metadata))
expr_dat <- expr_dat[,cell_IDs]
metadata <- metadata[cell_IDs,]
print("Expression Data dims:")
print(dim(expr_dat))
print("Metadata dims:")
print(dim(metadata))
print("Feature Data dims:")
print(dim(fDATA))
#Construct monocle cds
if(monocle_version==3){
print("+ Converting to monocle (Version 3)")
cds <- monocle3::new_cell_data_set(expression_data = expr_dat,
cell_metadata = metadata,
gene_metadata = fDATA)
} else {
print("+ Converting to monocle (Version 2)")
pd <- new('AnnotatedDataFrame', data = seurat_object@meta.data)
fd <- new('AnnotatedDataFrame', data = fDATA)
cds <- monocle::newCellDataSet(data,
phenoData = pd,
featureData = fd,
lowerDetectionLimit = 0.5,
expressionFamily = VGAM::negbinomial.size())
}
return(cds)
}
cds <- seurat_to_monocle(seurat_object = DAT, monocle_version = 3)
cds <- preprocess_cds(cds,
num_dim = 100,
residual_model_formula_str = "~ nUMI + percent.mito")
cds
# c("UMAP", "tSNE", "PCA", "LSI")
cds <- reduce_dimension(cds, reduction_method = "UMAP")
nCores
nCores <- parallel::detectCores()
nCores
# c("UMAP", "tSNE", "PCA", "LSI")
cds <- reduce_dimension(cds, reduction_method = "UMAP",
max_components = 3,
cores=nCores)
cds
?cluster_cells
cds <- cluster_cells(cds, resolution=NULL)
cds <- cluster_cells(cds, resolution=NULL)
cds
cds@clusters
cds@clusters@metadata
str(cds@clusters)
cds@clusters@listData
cds@clusters@elementType
cds@clusters@elementMetadata
cds@clusters@listData$UMAP$partitions
cds@clusters@listData$UMAP$clusters
cds <- cluster_cells(cds, resolution=NULL, reduction_method = "UMAP")
cds <- learn_graph(cds)
cds <- order_cells(cds)
plot_cells(cds)
cds <- cluster_cells(cds, resolution=1e-04, reduction_method = "UMAP")
monocle3::plot_cells_3d(cds)
monocle3::plot_cells(cds)
monocle3::plot_genes_in_pseudotime(cds)
monocle3::plot_pc_variance_explained(cds)
monocle3::plot_pc_variance_explained(cds)
monocle3::plot_cells_3d(cds)
pData(dcs)
pData(cds)
