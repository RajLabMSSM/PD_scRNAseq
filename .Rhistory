# load("DAT.R")
# Convert Seurat objt to CDS object
mDAT <- monocle::importCDS(DAT,  import_all = T)
# generate size factors for normalization later
mDAT <- estimateSizeFactors(mDAT)
# Get pre-trained PBMC classifer
load("./Garnet/hsPBMC") # Download from: https://cole-trapnell-lab.github.io/garnett/classifiers/hsPBMC
# Get pre-trained PBMC classifer
load("./Data/Garnet/hsPBMC") # Download from: https://cole-trapnell-lab.github.io/garnett/classifiers/hsPBMC
# Get pre-trained PBMC classifer
load("./Data/Garnett/hsPBMC") # Download from: https://cole-trapnell-lab.github.io/garnett/classifiers/hsPBMC
# Get feature genes for each cell type
feature_genes <- get_feature_genes(classifier = hsPBMC,
node = "root",
db = org.Hs.eg.db,
convert_ids = T)
# BiocManager::install("DelayedMatrixStats")
BiocManager::install(c('DelayedArray', 'DelayedMatrixStats', 'org.Hs.eg.db', 'org.Mm.eg.db'))
library(enrichR) #BiocManager::install("enrichR")
library(monocle) #BiocManager::install("monocle")
library(org.Hs.eg.db)
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
# generate size factors for normalization later
mDAT <- estimateSizeFactors(mDAT)
# Get pre-trained PBMC classifer
load("./Data/Garnett/hsPBMC") # Download from: https://cole-trapnell-lab.github.io/garnett/classifiers/hsPBMC
# Get feature genes for each cell type
feature_genes <- get_feature_genes(classifier = hsPBMC,
node = "root",
db = org.Hs.eg.db,
convert_ids = T)
devtools::install_github("cole-trapnell-lab/garnett")
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
# load("DAT.R")
# Convert Seurat objt to CDS object
mDAT <- monocle::importCDS(DAT,  import_all = T)
# generate size factors for normalization later
mDAT <- estimateSizeFactors(mDAT)
# Get pre-trained PBMC classifer
load("./Data/Garnett/hsPBMC") # Download from: https://cole-trapnell-lab.github.io/garnett/classifiers/hsPBMC
# Get feature genes for each cell type
feature_genes <- get_feature_genes(classifier = hsPBMC,
node = "root",
db = org.Hs.eg.db,
convert_ids = T)
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
install.packages("BiocManager")
BiocManager::install()
# Import functions
root = "./"
source(file.path(root,"general_functions.R"))
import_parameters(params)
load(file.path(resultsPath, "scRNAseq_results.RData"))
# load(file.path('Results","scRNAseq_results.RData"))
remove.packages("monocle")
install.packages("BiocManager")
BiocManager::install()
BiocManager::install(c("monocle"))
devtools::install_github("cole-trapnell-lab/monocle")
library(monocle) # BiocManager::install("monocle")
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
# Import functions
root = "./"
source(file.path(root,"general_functions.R"))
import_parameters(params)
load(file.path(resultsPath, "scRNAseq_results.RData"))
library(monocle) # BiocManager::install("monocle")
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
# load("DAT.R")
# Convert Seurat objt to CDS object
mDAT <- monocle::importCDS(DAT,  import_all = T)
# load("DAT.R")
# Convert Seurat objt to CDS object
mDAT <- importCDS(DAT,  import_all = T)
devtools::uninstall("monocle")
devtools::uninstall("cole-trapnell-/monocle")
devtools::uninstall("cole-trapnell/monocle")
devtools::uninstall(monocle)
remove.packages("monocle")
remove.packages(monocle)
remove.packages("monocle")
dev_mode(true)
devtools::dev_mode(true)
devtools::dev_mode(T)
remove.packages('monocle')
# devtools::install_github("cole-trapnell-lab/monocle")
.libPaths()
remove.packages('/Users/schilder/R-devmonocle')
remove.packages('/Users/schilder/R-dev/monocle')
BiocManager::install(c("monocle"))
BiocManager::install(c("monocle"))
library(monocle) # BiocManager::install("monocle")
library(monocle) # BiocManager::install("monocle")
# Import functions
root = "./"
source(file.path(root,"general_functions.R"))
import_parameters(params)
load(file.path(resultsPath, "scRNAseq_results.RData"))
# load(file.path('Results","scRNAseq_results.RData"))
# load("DAT.R")
# Convert Seurat objt to CDS object
mDAT <- monocle::importCDS(DAT,  import_all = T)
mDAT
# generate size factors for normalization later
mDAT <- estimateSizeFactors(mDAT)
# Get pre-trained PBMC classifer
load("./Data/Garnett/hsPBMC") # Download from: https://cole-trapnell-lab.github.io/garnett/classifiers/hsPBMC
# Get feature genes for each cell type
feature_genes <- get_feature_genes(classifier = hsPBMC,
node = "root",
db = org.Hs.eg.db,
convert_ids = T)
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
feature_genes <- get_feature_genes(classifier = hsPBMC,
node = "root",
db = org.Hs.eg.db,
convert_ids = T)
feature_genes <- garnett::get_feature_genes(classifier = hsPBMC,
node = "root",
db = org.Hs.eg.db,
convert_ids = T)
# Get feature genes for each cell type
garnett::get_classifier_references(hsPBMC)
# Get feature genes for each cell type
garnett::get_feature_genes(hsPBMC)
# Get feature genes for each cell type
garnett::get_feature_genes(hsPBMC, convert_ids = T, db = org.Hs.eg.db)
# generate size factors for normalization later
mDAT <- estimateSizeFactors(mDAT)
# Get feature genes for each cell type
feature_genes <- garnett::get_feature_genes(classifier = hsPBMC,
node = "root",
db = org.Hs.eg.db,
convert_ids = T)
mDAT <- classify_cells(mDAT, hsPBMC,
db = org.Hs.eg.db,
cluster_extend = TRUE,
cds_gene_id_type = "SYMBOL")
seurat::
seurat::
library(org.Hs.eg.db)
# Get feature genes for each cell type
feature_genes <- garnett::get_feature_genes(classifier = hsPBMC,
node = "root",
db = org.Hs.eg.db,
convert_ids = T)
head(feature_genes)
mDAT <- classify_cells(mDAT, hsPBMC,
db = org.Hs.eg.db,
cluster_extend = TRUE,
cds_gene_id_type = "SYMBOL")
mDAT <- classify_cells(mDAT, hsPBMC,
db = org.Hs.eg.db,
cluster_extend = TRUE,
cds_gene_id_type = "SYMBOL")
assi
mDAT
head(pData(mDAT))
# Get feature genes for each cell type
feature_genes <- garnett::get_feature_genes(classifier = hsPBMC,
node = "root",
db = org.Hs.eg.db,
convert_ids = F)
feature_genes
library(Seurat)
# Convert Seurat objt to CDS object
mDAT <- monocle::importCDS(DAT,  import_all = T)
# generate size factors for normalization later
mDAT <- estimateSizeFactors(mDAT)
# Get pre-trained PBMC classifer
load("./Data/Garnett/hsPBMC") # Download from: https://cole-trapnell-lab.github.io/garnett/classifiers/hsPBMC
# Get feature genes for each cell type
feature_genes <- garnett::get_feature_genes(classifier = hsPBMC,
node = "root",
db = org.Hs.eg.db,
convert_ids = F)
# head(feature_genes)
mDAT <- classify_cells(mDAT, hsPBMC,
db = org.Hs.eg.db,
cluster_extend = TRUE,
cds_gene_id_type = "SYMBOL")
# head(feature_genes)
mDAT <- classify_cells(mDAT, hsPBMC,
db = org.Hs.eg.db,
cluster_extend = TRUE,
cds_gene_id_type = "SYMBOL")
head(pData(mDAT))
# generate size factors for normalization later
mDAT <-  DESeq2::estimateSizeFactors(mDAT)
mDAT
# head(feature_genes)
mDAT <- garnett::classify_cells(mDAT, hsPBMC,
db = org.Hs.eg.db,
cluster_extend = TRUE,
cds_gene_id_type = "SYMBOL")
# Run tSNE: Plot Clusters and Cell Types
mDAT <- reduceDimension(mDAT, max_components = 3, reduction_method = "tSNE")
commonGeoms <- labs(x="tSNE1",y="tSNE2")
plot_grid(nrow = 2,
qplot(data = pData(mDAT), mDAT@reducedDimA[1,], mDAT@reducedDimA[2,], color = cell_type) + theme_bw() + commonGeoms,
qplot(data = pData(mDAT), mDAT@reducedDimA[1,], mDAT@reducedDimA[2,], color = cluster_ext_type) + theme_bw() + commonGeoms
)
# Unsupervised Clustering
mDAT <- clusterCells(mDAT, num_clusters = 5)
pData(mDAT)
plot_cell_clusters(mDAT, 1, 2, color = "Cluster",  markers = c("CD14", "FCGR3A"))
plot_cell_clusters(mDAT, 1, 2, color = "Cluster") + facet_wrap(~dx)
plot_cell_clusters(mDAT, 1, 2, color = "Cluster") + facet_wrap(~mut)
plot_cell_clusters(mDAT, 1, 2, color = "Cluster") + facet_wrap(~cell_type)
DAT <- Seurat::AddMetaData(DAT, pData(mDAT)[c("garnett_cluster","cell_type","cluster_ext_type","Cluster")])
library(Seurat)
library(dplyr)
library(gridExtra)
# library(knitr)
library(plotly)
library(ggplot2)
library(viridis)
library(reshape2)
library(ggrepel)
library(DT)
# library(ComplexHeatmap); #BiocManager::install("ComplexHeatmap") # NOT on Minerva currently
library(enrichR) #BiocManager::install("enrichR")
# library(biomaRt) # BiocManager::install(c("biomaRt"))
# library(DESeq2) # BiocManager::install(c("DESeq2"))
sessionInfo()
print(paste("Seurat ", packageVersion("Seurat")))
library(Seurat)
library(dplyr)
library(gridExtra)
# library(knitr)
library(plotly)
library(ggplot2)
library(viridis)
library(reshape2)
library(ggrepel)
library(DT)
# library(ComplexHeatmap); #BiocManager::install("ComplexHeatmap") # NOT on Minerva currently
library(enrichR) #BiocManager::install("enrichR")
# library(biomaRt) # BiocManager::install(c("biomaRt"))
# library(DESeq2) # BiocManager::install(c("DESeq2"))
sessionInfo()
print(paste("Seurat ", packageVersion("Seurat")))
View(DAT)
View(DAT)
DAT@meta.data
write.csv(DAT@meta.data, file.path(resultsPath, "garnett_results.csv"), quote = F,row.names = F)
load(file.path('Results","subsetGenes-protein_coding__subsetCells-F__Resolution-0.5__perplexity-30__nCores-64","scRNAseq_results.RData"))
load(file.path('Results","subsetGenes-protein_coding__subsetCells-F__Resolution-0.5__perplexity-30__nCores-64","scRNAseq_results.RData"))
load(file.path("Results","subsetGenes-protein_coding__subsetCells-F__Resolution-0.5__perplexity-30__nCores-64","scRNAseq_results.RData"))
library(monocle) # BiocManager::install("monocle")
# BiocManager::install(c('DelayedArray', 'DelayedMatrixStats', 'org.Hs.eg.db', 'org.Mm.eg.db'))
library(org.Hs.eg.db)
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
# Convert Seurat objt to CDS object
mDAT <- monocle::importCDS(DAT,  import_all = T)
DAT
# generate size factors for normalization later
mDAT <-  DESeq2::estimateSizeFactors(mDAT)
# Get pre-trained PBMC classifer
load(file.path(root, "Data/Garnett/hsPBMC")) # Download from: https://cole-trapnell-lab.github.io/garnett/classifiers/hsPBMC
# Get feature genes for each cell type
feature_genes <- garnett::get_feature_genes(classifier = hsPBMC,
node = "root",
db = org.Hs.eg.db,
convert_ids = F)
feature_genes
# head(feature_genes)
mDAT <- garnett::classify_cells(mDAT, hsPBMC,
db = org.Hs.eg.db,
cluster_extend = TRUE,
cds_gene_id_type = "SYMBOL")
# head(feature_genes)
mDAT <- garnett::classify_cells(mDAT, hsPBMC,
db = org.Hs.eg.db,
cluster_extend = TRUE,
cds_gene_id_type = "SYMBOL")
head(pData(mDAT))
table(pData(mDAT)$cell_type)
table(pData(mDAT)$cluster_ext_type)
DAT <- Seurat::AddMetaData(DAT, pData(mDAT)[c("garnett_cluster","cell_type","cluster_ext_type","Cluster")])
pData(mDAT)
DAT <- Seurat::AddMetaData(DAT, pData(mDAT)[c("garnett_cluster","cell_type","cluster_ext_type")])
write.csv(DAT@meta.data, file.path(resultsPath, "garnett_results.csv"), quote = F,row.names = F)
# Import functions
root = "./"
source(file.path(root,"general_functions.R"))
import_parameters(params)
load(file.path(resultsPath, "scRNAseq_results.RData"))
# load(file.path("Results","subsetGenes-protein_coding__subsetCells-F__Resolution-0.5__perplexity-30__nCores-64","scRNAseq_results.RData"))
var <- "cell_type"
p1 <- TSNEPlot(DAT, do.return = T, do.label = T,label.size = labSize,
group.by = var,
plot.title=var, vector.friendly=T)  +
theme(legend.position = "top") +
scale_color_brewer( palette = "Set1", aesthetics = aes(alpha=.5))
DAT
DAT
# Import functions
root = "./"
source(file.path(root,"general_functions.R"))
import_parameters(params)
# load(file.path(resultsPath, "scRNAseq_results.RData"))
load(file.path("Results","subsetGenes-protein_coding__subsetCells-F__Resolution-0.5__perplexity-30__nCores-64","scRNAseq_results.RData"))
library(monocle) # BiocManager::install("monocle")
# BiocManager::install(c('DelayedArray', 'DelayedMatrixStats', 'org.Hs.eg.db', 'org.Mm.eg.db'))
library(org.Hs.eg.db)
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
# Convert Seurat objt to CDS object
mDAT <- monocle::importCDS(DAT,  import_all = T)
params$perplexity
as.numeric(params$perplexity)
as.numeric(params$perplexity)
as.numeric(params$perplexity)[1]
as.numeric(params$perplexity)[[1]]
as.numeric(params$perplexity[[1]])
30
# Import functions
root <- "./"
source(file.path(root,"general_functions.R"))
import_parameters(params)
c( params$perplexity,5,20,30,100)
# Import functions
root = "./"
source(file.path(root,"general_functions.R"))
import_parameters(params)
# load(file.path(resultsPath, "scRNAseq_results.RData"))
load(file.path("Results","subsetGenes-protein_coding__subsetCells-F__Resolution-0.2__perplexity-40__nCores-4","scRNAseq_results.RData"))
library(Seurat)
library(cowplot)
library(ggplot2)
library(dplyr)
library(data.table)
library(monocle) # BiocManager::install("monocle")
# BiocManager::install(c('DelayedArray', 'DelayedMatrixStats', 'org.Hs.eg.db', 'org.Mm.eg.db'))
library(org.Hs.eg.db)
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
tSNE_metadata_plot("dx")
# MonocyteSubtype.markers <- FindMarkers(DAT, min.pct = 0.25,
#                                 ident.1 = 2, ident.2 = c(0:1), test.use = "DESeq2",
#                                 print.bar = T, only.pos = F, parallel=TRUE
#                                 )
MonocyteSubtype.markers <- FindMarkers(DAT, min.pct = 0.25,
ident.1 = 1, ident.2 = 0, test.use = "wilcox",
only.pos = F
)
# MonocyteSubtype.markers <- FindMarkers(DAT, min.pct = 0.25,
#                                 ident.1 = 2, ident.2 = c(0:1), test.use = "DESeq2",
#                                 print.bar = T, only.pos = F, parallel=TRUE
#                                 )
MonocyteSubtype.markers <- FindMarkers(DAT, min.pct = 0.25,
ident.1 = 1, ident.2 = 0, test.use = "wilcox",
only.pos = F
)
print(x = head(x = cluster5.markers, n = 5))
dim(MonocyteSubtype.markers)
createDT(MonocyteSubtype.markers, caption="DEGs between cluster 0 (CD16- monocytes) and cluster 1 (CD16+ monocytes")
# Convert Seurat objt to CDS object
mDAT <- monocle::importCDS(DAT,  import_all = T)
# generate size factors for normalization later
mDAT <-  DESeq2::estimateSizeFactors(mDAT)
# Get pre-trained PBMC classifer
load(file.path(root, "Data/Garnett/hsPBMC")) # Download from: https://cole-trapnell-lab.github.io/garnett/classifiers/hsPBMC
mDAT <- garnett::classify_cells(mDAT, hsPBMC,
db = org.Hs.eg.db,
cluster_extend = TRUE,
cds_gene_id_type = "SYMBOL")
table(pData(mDAT)$cell_type)
table(pData(mDAT)$cluster_ext_type)
# Get feature genes for each cell type
feature_genes <- garnett::get_feature_genes(classifier = hsPBMC,
node = "root",
db = org.Hs.eg.db,
convert_ids = F)
head(feature_genes)
length(unique(pData(mDAT)$post_clustering ))
# Re-Cluster using Monocle's algorithm
mDAT <- monocle::clusterCells(mDAT, num_clusters = length(unique(pData(mDAT)$post_clustering )))
# Re-Cluster using Monocle's algorithm
mDAT <- monocle::clusterCells(mDAT, num_clusters = length(unique(pData(mDAT)$post_clustering )))
mDAT
# Re-Cluster using Monocle's algorithm
mDAT <- monocle::clusterCells(mDAT, num_clusters = length(unique(pData(mDAT)$post_clustering )))
# Convert back to Seurat object & save results
DAT <- Seurat::AddMetaData(DAT, pData(mDAT)[c("garnett_cluster","cell_type","cluster_ext_type")])
write.csv(DAT@meta.data, file.path(resultsPath, "garnett_results.csv"), quote = F,row.names = F)
markerList <- c("CD14", "FCGR3A")
markerData <- DAT@scale.data[row.names(DAT@scale.data) %in% markerList,] %>% t() %>% data.frame()
## Efficiently merge using data.table
dt1 <- data.table(markerData, keep.rownames = "Cell", key = "Cell") %>% copy()
dt2 <- data.table(DAT@meta.data[c("cell_type","post_clustering")], keep.rownames = "Cell", key = "Cell") %>% copy()
markerDT <- dt1[dt2]
ggplot(data = markerDT, aes(x=CD14, y=FCGR3A) ) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="purple", bins = 100, size=.1) +
geom_point(aes(color=as.factor(cell_type)), shape=16, stroke=0, size=2, alpha=.1) +
guides(colour = guide_legend(title="cell_type",override.aes = list(alpha = 1)))
tSNE_metadata_plot <- function(var, labSize=12){
# Metadata plot
p1 <- Seurat::TSNEPlot(DAT, do.return = T,  do.label = T,  group.by = var,label.size = labSize,
plot.title=paste(var), vector.friendly=T) +
theme(legend.position = "top") +
scale_color_brewer( palette = "Dark2",  aesthetics = aes(alpha=.5))
# t-SNE clusters plot
p2 <- Seurat::TSNEPlot(DAT, do.return = T, do.label = T,label.size = labSize,
plot.title=paste("Unsupervised Clusters"), vector.friendly=T)  +
theme(legend.position = "top") +
scale_color_brewer( palette = "Set1", aesthetics = aes(alpha=.5))
print(cowplot::plot_grid(p1,p2))
}
tSNE_metadata_plot("cell_type")
tSNE_metadata_plot("cluster_ext_type")
tSNE_metadata_plot("mut")
FeaturePlot(DAT,features.plot =  c("CD14","FCGR3A", "LRRK2", "GBA"),  cols.use = c("grey","purple","magenta"), dark.theme = T, nCol = 2 )
FeatureHeatmap(DAT,  c("CD14","FCGR3A","LRRK2", "GBA"), pt.size = 0.5, cols.use = c("grey","purple"), plot.horiz =T)
FeatureHeatmap(DAT,  c("CD14","FCGR3A","LRRK2", "GBA"), pt.size = 0.5, cols.use = c("grey","purple"), plot.horiz =T, group.by = NULL)
FeatureHeatmap(DAT,  c("CD14","FCGR3A","LRRK2", "GBA"), pt.size = 0.5,
cols.use = c("grey","purple"), plot.horiz =T, group.by = F)
FeatureHeatmap(DAT,  c("CD14","FCGR3A","LRRK2", "GBA"), pt.size = 0.5,
cols.use = c("grey","purple"), plot.horiz =T, idents.use = NULL)
FeatureHeatmap(DAT,  c("CD14","FCGR3A","LRRK2", "GBA"), pt.size = 0.5,
cols.use = c("grey","purple"), plot.horiz =T, group.by = NULL)
FeaturePlot(DAT,features.plot =  c("CD14","FCGR3A", "LRRK2", "GBA"),
cols.use = c("grey","purple","magenta"), dark.theme = T, nCol = 2 )
FeaturePlot(DAT,features.plot =  c("CD14","FCGR3A", "LRRK2", "GBA", "SNCA"),
cols.use = c("grey","purple","magenta"), dark.theme = T, nCol = 2 )
FeaturePlot(DAT,features.plot =  c("CD14","FCGR3A", "LRRK2", "GBA"),
cols.use = c("grey","purple","magenta"), dark.theme = T, nCol = 2 )
write.csv(MonocyteSubtype.markers, file.path(resultsPath, "MonocyteSubtype.markers.csv"), quote = F,row.names = F)
write.csv(MonocyteSubtype.markers, file.path(resultsPath, "MonocyteSubtype.markers.csv"), quote = F,row.names = T)
write.csv(MonocyteSubtype.markers, file.path(resultsPath, "MonocyteSubtype.markers.csv"), quote = F,row.names = "Gene")
MonocyteSubtype.markers
library(enrichR) #BiocManager::install("enrichR")
c(row.names(MonocyteSubtype.markers), qnorm(MonocyteSubtype.markers$p_val_adj))
list(Gene=row.names(MonocyteSubtype.markers), Weight=qnorm(1-MonocyteSubtype.markers$p_val_adj))
list(Gene=row.names(MonocyteSubtype.markers), Weight=1-MonocyteSubtype.markers$p_val_adj)
1-MonocyteSubtype.markers$p_val_adj
MonocyteSubtype.markers$p_val_adj
list(Gene=row.names(MonocyteSubtype.markers), Weight=1-log(MonocyteSubtype.markers$p_val_adj))
1-MonocyteSubtype.markers$p_val_adj
list(Gene=row.names(MonocyteSubtype.markers), Weight=1:length(MonocyteSubtype.markers))
list(Gene=row.names(MonocyteSubtype.markers), Weight=1:length(MonocyteSubtype.markers$p_val_adj))
list(Gene=row.names(MonocyteSubtype.markers), Weight=length(MonocyteSubtype.markers$p_val_adj):1)
list(Gene=row.names(MonocyteSubtype.markers), Weight=qnorm(length(MonocyteSubtype.markers$p_val_adj):1))
list(Gene=row.names(MonocyteSubtype.markers), Weight=scales::rescale(MonocyteSubtype.markers$p_val_adj))
list(Gene=row.names(MonocyteSubtype.markers), Weight=scales::rescale(1-MonocyteSubtype.markers$p_val_adj))
list(Gene=row.names(MonocyteSubtype.markers), Weight=scales::rescale(1-log(MonocyteSubtype.markers$p_val_adj)))
list(Gene=row.names(MonocyteSubtype.markers), Weight=scales::rescale(log(MonocyteSubtype.markers$p_val_adj)))
scaledWeights <- scales::rescale(1-log(MonocyteSubtype.markers$p_val_adj))
scaledWeights
scaledWeights <- 1-log(MonocyteSubtype.markers$p_val_adj)
scaledWeights
scaledWeights <- log(1-MonocyteSubtype.markers$p_val_adj)
scaledWeights
list(Gene=row.names(MonocyteSubtype.markers), Weight=scales::rescale(length(MonocyteSubtype.markers$p_val_adj):1)
list(Gene=row.names(MonocyteSubtype.markers), Weight=scales::rescale(length(MonocyteSubtype.markers$p_val_adj):1))
length(MonocyteSubtype.markers$p_val_adj):1
scales::rescale(length(MonocyteSubtype.markers$p_val_adj):1)
list(Gene=row.names(MonocyteSubtype.markers),
Weight=scales::rescale(length(MonocyteSubtype.markers$p_val_adj):1))
geneList <-list(Gene=row.names(MonocyteSubtype.markers),
Weight=scales::rescale(length(MonocyteSubtype.markers$p_val_adj):1))
enrichr_dbs <- c("KEGG_2018", "Reactome_2016",
"GO_Biological_Process_2018", "GO_Molecular_Function_2018", "GO_Cellular_Component_2018",
"Rare_Diseases_AutoRIF_ARCHS4_Predictions", "Human_Gene_Atlas")
results <- enrichr(genes = geneList, databases = enrichr_dbs )
results
geneList <- data.frame(Gene=row.names(MonocyteSubtype.markers),
Weight=scales::rescale(length(MonocyteSubtype.markers$p_val_adj):1))
results <- enrichr(genes = geneList, databases = enrichr_dbs )
results
createDT(results, "Enriched Terms in Weighted DEG list")
enrichr_dbs <- c("KEGG_2018", "Reactome_2016",
"GO_Biological_Process_2018", "GO_Molecular_Function_2018", "GO_Cellular_Component_2018",
"Rare_Diseases_AutoRIF_ARCHS4_Predictions", "Human_Gene_Atlas")
# createDT(enrichR::listEnrichrDbs(), "Enrichr Databases")
geneList <- data.frame(Gene=row.names(MonocyteSubtype.markers),
Weight=scales::rescale(length(MonocyteSubtype.markers$p_val_adj):1))
results <- enrichr(genes = geneList, databases = enrichr_dbs )
createDT(results, "Enriched Terms in Weighted DEG list")
for (db in enrichr_dbs){
cat('\n')
cat("### ",db,"\n")
createDT_html(subset(results[[db]], Adjusted.P.value<=0.05), paste("Enrichr Results:",db,"Module", mod))
cat('\n')
}
enrichr_dbs <- c("KEGG_2018", "Reactome_2016",
"GO_Biological_Process_2018", "GO_Molecular_Function_2018", "GO_Cellular_Component_2018",
"Rare_Diseases_AutoRIF_ARCHS4_Predictions", "Human_Gene_Atlas")
# createDT(enrichR::listEnrichrDbs(), "Enrichr Databases")
geneList <- data.frame(Gene=row.names(MonocyteSubtype.markers),
Weight=scales::rescale(length(MonocyteSubtype.markers$p_val_adj):1))
results <- enrichr(genes = geneList, databases = enrichr_dbs )
for (db in enrichr_dbs){
cat('\n')
cat("### ",db,"\n")
createDT_html(subset(results[[db]], Adjusted.P.value<=0.05), paste("Enrichr Results:",db,"Module", mod))
cat('\n')
}
enrichr_dbs <- c("KEGG_2018", "Reactome_2016",
"GO_Biological_Process_2018", "GO_Molecular_Function_2018", "GO_Cellular_Component_2018",
"Rare_Diseases_AutoRIF_ARCHS4_Predictions", "Human_Gene_Atlas")
# createDT(enrichR::listEnrichrDbs(), "Enrichr Databases")
geneList <- data.frame(Gene=row.names(MonocyteSubtype.markers),
Weight=scales::rescale(length(MonocyteSubtype.markers$p_val_adj):1))
results <- enrichr(genes = geneList, databases = enrichr_dbs )
for (db in enrichr_dbs){
cat('\n')
cat("### ",db,"\n")
createDT_html(subset(results[[db]], Adjusted.P.value<=0.05), paste("Enrichr Results:",db ))
cat('\n')
}
