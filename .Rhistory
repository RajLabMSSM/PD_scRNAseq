geom_violin() +
geom_point( position=position_jitterdodge(jitter.width = .2, dodge.width = .9 ),   alpha=0.6, color="turquoise3") +
labs(title = title, x=meta_var) +
theme(plot.title = element_text( size=10)) +
scale_fill_manual(values=c("brown", "slategray"))
}
marker_vs_metadata(markerDF, "dx")
marker_vs_metadata(markerDF, "mut")
# load("DAT.R")
# Convert Seurat objt to CDS object
mDAT <- monocle::importCDS(DAT,  import_all = T)
# generate size factors for normalization later
mDAT <- estimateSizeFactors(mDAT)
# Get pre-trained PBMC classifer
load("./Garnet/hsPBMC") # Download from: https://cole-trapnell-lab.github.io/garnett/classifiers/hsPBMC
# Get feature genes for each cell type
feature_genes <- get_feature_genes(classifier = hsPBMC,
node = "root",
db = org.Hs.eg.db,
convert_ids = T)
# marker_file_path <- system.file("extdata", "pbmc_test.txt",
#                                 package = "garnett")
# # Plot chosen markers
# marker_check <- check_markers(mDAT, marker_file_path,
#                               db=org.Hs.eg.db,
#                               cds_gene_id_type = "SYMBOL",
#                               marker_file_gene_id_type = "SYMBOL")
#
# plot_markers(marker_check)
# Classify Cells
## Get classifier from
# write.table( RCurl::getURL("https://cole-trapnell-lab.github.io/garnett/marker_files/hsPBMC_markers.txt"),
#              file = "pbmc_markerFile.txt",row.names = F, col.names = F, quote = F, )
# Train Classifier
# classifier <- train_cell_classifier(cds = mDAT,
#                                          marker_file = "pbmc_markerFile.txt",
#                                          db=org.Hs.eg.db,
#                                          cds_gene_id_type = "SYMBOL",
#                                          num_unknown = 50,
#                                          marker_file_gene_id_type = "SYMBOL")
#get_classifier_references(classifier)
mDAT <- reduceDimension(mDAT, max_components = 2, method = 'DDRTree')
markerDF <- get_markerDF(DAT, markerList,
meta_vars =c("barcode", "dx", "mut","ID","post_clustering", "percent.mito","nGene", "nUMI",
"cell_type"))
markerDF <- get_markerDF(DAT, markerList,
meta_vars =c("barcode", "dx", "mut","ID","post_clustering", "percent.mito","nGene", "nUMI" ))# cell_type
Spectral <- grDevices::colorRampPalette(RColorBrewer::brewer.pal(length(unique(DAT@meta.data$mut)), "Spectral"))
# DAT <- DoKMeans(DAT, k.genes = 3)
# KMeansHeatmap(DAT)
if (T==F){
# Spectral <- heatmaply::Spectral(length(unique(DAT@meta.data$mut)))
markerMelt <- reshape2::acast(markerDF, Cell~Gene, value.var="Expression", fun.aggregate = mean, drop = F, fill = 0)
heatmaply::heatmaply(markerMelt,  key.title="Expression",#plot_method= "ggplot",
k_row = dim(markerMelt)[2], dendrogram = "row",
showticklabels = c(T, F), xlab = "Known Markers", ylab = "Cells", column_text_angle = 45,
row_side_colors =  DAT@meta.data[,c("dx","mut", "cell_type")], row_side_palette = Spectral
)  %>%  colorbar(tickfont = list(size = 12), titlefont = list(size = 14), which = 2)  %>%
colorbar(tickfont = list(size = 12), titlefont = list(size = 14), which = 1)
}else{
# markerDF_sub <-subset(markerDF, Gene==markerList[1])
# var_to_colors(markerDF_sub, "post_clustering")
# library(pheatmap)
# pheatmap(markerMelt, annotation_row = markerDF_sub[c("dx","mut","cell_type")])
# pheatmap(markerMelt, kmeans_k = NA, annotation_row = markerDF_sub[c("dx","mut","cell_type")],
#         cluster_cols = F, cutree_rows = length(unique(markerDF$post_clustering)),  angle_col=45 )
library(RColorBrewer)
var_to_colors <- function(markerDF, metaVar){
colors <- brewer.pal(length(unique(markerDF[metaVar]) ), "Dark2")
sample(colors, length(unique(markerDF[metaVar])), replace = TRUE, prob = NULL)
# metaColors <- colors[ subset(markerDF, Gene==markerList[1])[metaVar][,1] %>% as.factor() ]
return(metaColors)
}
# library(GMD)
# myCols = cbind(var_to_colors(markerDF, "dx"), var_to_colors(markerDF, "mut"))
# rlab=t(cbind(
#   var_to_colors(markerDF, "post_clustering"),
#   var_to_colors(markerDF, "dx")
#   ))
#   heatmap.2(marker.matrix, key.title="Expression",  col = viridis(300), trace="none",Colv = F, Rowv = F,
#             labRow = F, xlab = "Biomarker", ylab="Cell", cexCol=1, RowSideColors = var_to_colors(markerDF, "post_clustering")
#             )
# heatmap.3(markerMelt, dendrogram = 'row', kr = length(unique(markerDF)), labRow = F,
#           xlab = "Biomarker", ylab = "Cell", RowSideColors = rlab, RowSideColorsSize=2 )
markerDF <- markerDF %>%
mutate_at(vars(post_clustering, dx, mut, ID, cell_type), as.factor) %>%
mutate(Cluster = post_clustering) %>%
arrange(post_clustering)
# markerMelt <- reshape2::acast(markerDF, Cell~Gene, value.var="Expression", fun.aggregate = mean, drop = F, fill = 0)
markerMelt <- dcast(markerDF,  Cell + post_clustering + dx + mut + ID + cell_type ~ Gene,
fun.aggregate = mean, value.var = "Expression") %>% arrange(post_clustering)
marker.matrix <- markerMelt[markerList] %>%as.matrix()
row.names(marker.matrix) <- markerMelt$Cell
ha = HeatmapAnnotation(df = markerDF[c("dx","mut","ID","cell_type","post_clustering")], which = "row")
ComplexHeatmap::Heatmap(marker.matrix, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F,show_row_dend =T,
cluster_rows = T, column_title_side = "bottom",km = length(unique(markerMelt$post_clustering))) + ha
}
markerDF <- get_markerDF(DAT, markerList,
meta_vars =c("barcode", "dx", "mut","ID","post_clustering", "percent.mito","nGene", "nUMI" ))# cell_type
Spectral <- grDevices::colorRampPalette(RColorBrewer::brewer.pal(length(unique(DAT@meta.data$mut)), "Spectral"))
# DAT <- DoKMeans(DAT, k.genes = 3)
# KMeansHeatmap(DAT)
if (T==F){
# Spectral <- heatmaply::Spectral(length(unique(DAT@meta.data$mut)))
markerMelt <- reshape2::acast(markerDF, Cell~Gene, value.var="Expression", fun.aggregate = mean, drop = F, fill = 0)
heatmaply::heatmaply(markerMelt,  key.title="Expression",#plot_method= "ggplot",
k_row = dim(markerMelt)[2], dendrogram = "row",
showticklabels = c(T, F), xlab = "Known Markers", ylab = "Cells", column_text_angle = 45,
row_side_colors =  DAT@meta.data[,c("dx","mut")], row_side_palette = Spectral
)  %>%  colorbar(tickfont = list(size = 12), titlefont = list(size = 14), which = 2)  %>%
colorbar(tickfont = list(size = 12), titlefont = list(size = 14), which = 1)
}else{
# markerDF_sub <-subset(markerDF, Gene==markerList[1])
# var_to_colors(markerDF_sub, "post_clustering")
# library(pheatmap)
# pheatmap(markerMelt, annotation_row = markerDF_sub[c("dx","mut","cell_type")])
# pheatmap(markerMelt, kmeans_k = NA, annotation_row = markerDF_sub[c("dx","mut","cell_type")],
#         cluster_cols = F, cutree_rows = length(unique(markerDF$post_clustering)),  angle_col=45 )
library(RColorBrewer)
var_to_colors <- function(markerDF, metaVar){
colors <- brewer.pal(length(unique(markerDF[metaVar]) ), "Dark2")
sample(colors, length(unique(markerDF[metaVar])), replace = TRUE, prob = NULL)
# metaColors <- colors[ subset(markerDF, Gene==markerList[1])[metaVar][,1] %>% as.factor() ]
return(metaColors)
}
# library(GMD)
# myCols = cbind(var_to_colors(markerDF, "dx"), var_to_colors(markerDF, "mut"))
# rlab=t(cbind(
#   var_to_colors(markerDF, "post_clustering"),
#   var_to_colors(markerDF, "dx")
#   ))
#   heatmap.2(marker.matrix, key.title="Expression",  col = viridis(300), trace="none",Colv = F, Rowv = F,
#             labRow = F, xlab = "Biomarker", ylab="Cell", cexCol=1, RowSideColors = var_to_colors(markerDF, "post_clustering")
#             )
# heatmap.3(markerMelt, dendrogram = 'row', kr = length(unique(markerDF)), labRow = F,
#           xlab = "Biomarker", ylab = "Cell", RowSideColors = rlab, RowSideColorsSize=2 )
markerDF <- markerDF %>%
mutate_at(vars(post_clustering, dx, mut, ID, cell_type), as.factor) %>%
mutate(Cluster = post_clustering) %>%
arrange(post_clustering)
# markerMelt <- reshape2::acast(markerDF, Cell~Gene, value.var="Expression", fun.aggregate = mean, drop = F, fill = 0)
markerMelt <- dcast(markerDF,  Cell + post_clustering + dx + mut + ID + cell_type ~ Gene,
fun.aggregate = mean, value.var = "Expression") %>% arrange(post_clustering)
marker.matrix <- markerMelt[markerList] %>%as.matrix()
row.names(marker.matrix) <- markerMelt$Cell
ha = HeatmapAnnotation(df = markerDF[c("dx","mut","ID","cell_type","post_clustering")], which = "row")
ComplexHeatmap::Heatmap(marker.matrix, col=viridis(300), column_title = "Biomarker", row_title = "Cell",
row_dend_reorder = F,show_row_names = F, show_column_dend = F,show_row_dend =T,
cluster_rows = T, column_title_side = "bottom",km = length(unique(markerMelt$post_clustering))) + ha
}
# Convert Seurat objt to CDS object
mDAT <- monocle::importCDS(DAT,  import_all = T)
# generate size factors for normalization later
mDAT <- estimateSizeFactors(mDAT)
# Get pre-trained PBMC classifer
load("./Garnet/hsPBMC") # Download from: https://cole-trapnell-lab.github.io/garnett/classifiers/hsPBMC
# Get feature genes for each cell type
feature_genes <- get_feature_genes(classifier = hsPBMC,
node = "root",
db = org.Hs.eg.db,
convert_ids = T)
# load("DAT.R")
load(org.Hs.eg.db)
# load("DAT.R")
load("org.Hs.eg.db")
# Get feature genes for each cell type
feature_genes <- get_feature_genes(classifier = hsPBMC )
# Get feature genes for each cell type
feature_genes <- get_feature_genes(classifier = hsPBMC,
db = org.Hs.eg.db,
convert_ids = T)
DAT
mDAT
# Get feature genes for each cell type
feature_genes <- get_feature_genes(classifier = hsPBMC,
node = "root",
db = org.Hs.eg.db,
convert_ids = T)
mDAT@featureData
mDAT@annotation
mDAT@annotation <- org.Hs.eg.db
# generate size factors for normalization later
mDAT <- estimateSizeFactors(mDAT)
mDAT
# generate size factors for normalization later
mDAT <- monocle::estimateSizeFactors(mDAT)
# generate size factors for normalization later
mDAT <- monocle:::estimateSizeFactors(mDAT)
# load("DAT.R")
library(monocle)
# generate size factors for normalization later
mDAT <- monocle:::estimateSizeFactorsForSparseMatrix(mDAT)
# generate size factors for normalization later
mDAT <- monocle:::estimateDispersionsForCellDataSet(mDAT)
# generate size factors for normalization later
mDAT <- monocle:::estimateSizeFactorsForMatrix(mDAT  )
# Get feature genes for each cell type
feature_genes <- get_feature_genes(classifier = hsPBMC,
node = "root",
db = org.Hs.eg.db,
convert_ids = T)
# Convert Seurat objt to CDS object
mDAT <- monocle::importCDS(DAT,  import_all = T)
# Get feature genes for each cell type
feature_genes <- get_feature_genes(classifier = hsPBMC,
node = "root",
db = org.Hs.eg.db,
convert_ids = T)
DAT
# Convert Seurat objt to CDS object
mDAT <- monocle::importCDS(DAT,  import_all = T)
mDAT
# generate size factors for normalization later
mDAT <- monocle:::estimateSizeFactorsForMatrix(mDAT  )
# generate size factors for normalization later
m <- monocle:::estimateSizeFactorsForMatrix(mDAT  )
mDAT@featureData
# generate size factors for normalization later
mDAT <- monocle:::estimateSizeFactorsForMatrix(mDAT@featureData  )
# load("DAT.R")
library(garnett)
# generate size factors for normalization later
mDAT <- garnett:estimateSizeFactors()
library(Seurat)
library(dplyr)
library(gridExtra)
library(knitr)
library(plotly)
library(ggplot2)
library(viridis)
library(reshape2)
library(shiny)
library(ggrepel)
library(DT)
library(ComplexHeatmap); #BiocManager::install("ComplexHeatmap")
## Install Bioconductor
#  if (!requireNamespace("BiocManager"))
#     install.packages("BiocManager")
library(biomaRt) # BiocManager::install(c("biomaRt"))
# library(DESeq2) # BiocManager::install(c("DESeq2"))
library(enrichR) #BiocManager::install("enrichR")
library(monocle) #BiocManager::install("monocle")
# BiocManager::install("DelayedMatrixStats")
# BiocManager::install("org.Mm.eg.db")
library(org.Hs.eg.db)
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
sessionInfo()
print(paste("Seurat ", packageVersion("Seurat")))
load("DAT.R")
# load("DAT.R")
# Convert Seurat objt to CDS object
mDAT <- monocle::importCDS(DAT,  import_all = T)
# load("DAT.R")
# Convert Seurat objt to CDS object
mDAT <- monocle::importCDS(DAT,  import_all = T)
# generate size factors for normalization later
mDAT <- estimateSizeFactors(mDAT)
# Get pre-trained PBMC classifer
load("./Garnet/hsPBMC") # Download from: https://cole-trapnell-lab.github.io/garnett/classifiers/hsPBMC
# Get feature genes for each cell type
feature_genes <- get_feature_genes(classifier = hsPBMC,
node = "root",
db = org.Hs.eg.db,
convert_ids = T)
# Get pre-trained PBMC classifer
load("hsPBMC") # Download from: https://cole-trapnell-lab.github.io/garnett/classifiers/hsPBMC
# Get pre-trained PBMC classifer
load("hsPBMC") # Download from: https://cole-trapnell-lab.github.io/garnett/classifiers/hsPBMC
# Get feature genes for each cell type
feature_genes <- get_feature_genes(classifier = hsPBMC,
node = "root",
db = org.Hs.eg.db,
convert_ids = T)
rm(hsPBMC)
# Get pre-trained PBMC classifer
load("hsPBMC") # Download from: https://cole-trapnell-lab.github.io/garnett/classifiers/hsPBMC
# Get feature genes for each cell type
feature_genes <- get_feature_genes(classifier = hsPBMC,
node = "root",
db = org.Hs.eg.db,
convert_ids = T)
# load("DAT.R")
# Convert Seurat objt to CDS object
mDAT <- monocle::importCDS(DAT,  import_all = F)
# generate size factors for normalization later
mDAT <- estimateSizeFactors(mDAT)
# Get pre-trained PBMC classifer
load("./Garnet/hsPBMC") # Download from: https://cole-trapnell-lab.github.io/garnett/classifiers/hsPBMC
# Get feature genes for each cell type
feature_genes <- get_feature_genes(classifier = hsPBMC,
node = "root",
db = org.Hs.eg.db,
convert_ids = T)
# Import functions
source("./general_functions.R")
import_parameters(params)
load(file.path(resultsPath, "scRNAseq_results.RData"))
enrichr_dbs <- c("KEGG_2018", "Reactome_2016",
"GO_Biological_Process_2018", "GO_Molecular_Function_2018", "GO_Cellular_Component_2018",
"Rare_Diseases_AutoRIF_ARCHS4_Predictions", "Human_Gene_Atlas")
createDT(enrichR::listEnrichrDbs(), "Enrichr Databases")
for (clust in unique(DAT.markers.sig$cluster)){
cat('\n')
cat("### Cluster ",clust,"{.tabset .tabset-fade}\n")
geneList <- subset(DAT.markers.sig, cluster==clust)$gene  %>% as.character()
results <- enrichr(genes = geneList, databases = enrichr_dbs )
for (db in enrichr_dbs){
cat('\n')
cat("#### ",db,"\n")
createDT_html(subset(results[[db]], Adjusted.P.value<=0.05), paste("Enrichr Results: ",db,"Cluster ", clust))
cat('\n')
}
cat('\n')
}
# Import functions
source("./general_functions.R")
import_parameters(params)
load(file.path(resultsPath, "scRNAseq_results.RData"))
import_parameters(params)
library(Seurat)
library(dplyr)
library(gridExtra)
library(knitr)
library(plotly)
library(ggplot2)
library(viridis)
library(reshape2)
library(shiny)
library(ggrepel)
library(DT)
library(ComplexHeatmap); #BiocManager::install("ComplexHeatmap")
## Install Bioconductor
#  if (!requireNamespace("BiocManager"))
#     install.packages("BiocManager")
library(biomaRt) # BiocManager::install(c("biomaRt"))
library(DESeq2) # BiocManager::install(c("DESeq2"))
library(enrichR) #BiocManager::install("enrichR")
library(monocle) #BiocManager::install("monocle")
# BiocManager::install("DelayedMatrixStats")
# BiocManager::install("org.Mm.eg.db")
library(org.Hs.eg.db)
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
sessionInfo()
print(paste("Seurat ", packageVersion("Seurat")))
enrichr_dbs <- c("KEGG_2018", "Reactome_2016",
"GO_Biological_Process_2018", "GO_Molecular_Function_2018", "GO_Cellular_Component_2018",
"Rare_Diseases_AutoRIF_ARCHS4_Predictions", "Human_Gene_Atlas")
createDT(enrichR::listEnrichrDbs(), "Enrichr Databases")
# Import functions
source("./general_functions.R")
import_parameters(params)
load(file.path(resultsPath, "scRNAseq_results.RData"))
enrichr_dbs <- c("KEGG_2018", "Reactome_2016",
"GO_Biological_Process_2018", "GO_Molecular_Function_2018", "GO_Cellular_Component_2018",
"Rare_Diseases_AutoRIF_ARCHS4_Predictions", "Human_Gene_Atlas")
createDT(enrichR::listEnrichrDbs(), "Enrichr Databases")
DAT.markers.sig
# Import functions
source("./general_functions.R")
import_parameters(params)
library(Seurat)
library(dplyr)
library(gridExtra)
library(knitr)
library(plotly)
library(ggplot2)
library(viridis)
library(reshape2)
library(shiny)
library(ggrepel)
library(DT)
library(ComplexHeatmap); #BiocManager::install("ComplexHeatmap")
## Install Bioconductor
#  if (!requireNamespace("BiocManager"))
#     install.packages("BiocManager")
library(biomaRt) # BiocManager::install(c("biomaRt"))
library(DESeq2) # BiocManager::install(c("DESeq2"))
library(enrichR) #BiocManager::install("enrichR")
library(monocle) #BiocManager::install("monocle")
# BiocManager::install("DelayedMatrixStats")
# BiocManager::install("org.Mm.eg.db")
library(org.Hs.eg.db)
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
sessionInfo()
print(paste("Seurat ", packageVersion("Seurat")))
enrichr_dbs <- c("KEGG_2018", "Reactome_2016",
"GO_Biological_Process_2018", "GO_Molecular_Function_2018", "GO_Cellular_Component_2018",
"Rare_Diseases_AutoRIF_ARCHS4_Predictions", "Human_Gene_Atlas")
createDT(enrichR::listEnrichrDbs(), "Enrichr Databases")
DAT.markers.sig
DAT.markers.sig
DAT.markers <- FindAllMarkers(object = DAT, min.pct = 0.25, thresh.use = 0.25,  only.pos = F,
test.use = "wilcox") # DESeq2
# Import functions
source("./general_functions.R")
import_parameters(params)
load(file.path(resultsPath, "scRNAseq_results.RData"))
resultsPath
load(file.path(resultsPath, "scRNAseq_results.RData"))
resultsPath <- params$resultsPath
import_parameters(params)
resultsPath
import_parameters(params)
load(file.path(resultsPath, "scRNAseq_results.RData"))
library(Seurat)
library(dplyr)
library(gridExtra)
library(knitr)
library(plotly)
library(ggplot2)
library(viridis)
library(reshape2)
library(shiny)
library(ggrepel)
library(DT)
library(ComplexHeatmap); #BiocManager::install("ComplexHeatmap")
## Install Bioconductor
#  if (!requireNamespace("BiocManager"))
#     install.packages("BiocManager")
library(biomaRt) # BiocManager::install(c("biomaRt"))
library(DESeq2) # BiocManager::install(c("DESeq2"))
library(enrichR) #BiocManager::install("enrichR")
library(monocle) #BiocManager::install("monocle")
# BiocManager::install("DelayedMatrixStats")
# BiocManager::install("org.Mm.eg.db")
library(org.Hs.eg.db)
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
sessionInfo()
print(paste("Seurat ", packageVersion("Seurat")))
enrichr_dbs <- c("KEGG_2018", "Reactome_2016",
"GO_Biological_Process_2018", "GO_Molecular_Function_2018", "GO_Cellular_Component_2018",
"Rare_Diseases_AutoRIF_ARCHS4_Predictions", "Human_Gene_Atlas")
createDT(enrichR::listEnrichrDbs(), "Enrichr Databases")
for (clust in unique(DAT.markers.sig$cluster)){
cat('\n')
cat("### Cluster ",clust,"{.tabset .tabset-fade}\n")
geneList <- subset(DAT.markers.sig, cluster==clust)$gene  %>% as.character()
results <- enrichr(genes = geneList, databases = enrichr_dbs )
for (db in enrichr_dbs){
cat('\n')
cat("#### ",db,"\n")
createDT_html(subset(results[[db]], Adjusted.P.value<=0.05), paste("Enrichr Results: ",db,"Cluster ", clust))
cat('\n')
}
cat('\n')
}
source("./general_functions.R")
# Import functions
source("./general_functions.R")
View(params)
View(params)
p <- import_parameters(params)
load(file.path(p$resultsPath, "scRNAseq_results.RData"))
p$resultsPath
load(file.path(params$resultsPath, "scRNAseq_results.RData"))
# Import functions
source("./general_functions.R")
import_parameters(params)
load(file.path(params$resultsPath, "scRNAseq_results.RData"))
params
rm(params)
rm(params, envir = .GlobalEnv)
orig_wd <- getwd()
resultsPath
resultsPath
# Import functions
root <- "../.."
file.path(root,"general_functions.R")
bindingIsLocked("params", env = .GlobalEnv)
unlockBinding("params", env = .GlobalEnv)
for (p in params_list){
assign(names(p), p)
}
params_list <- list(
resultsPath=params$resultsPath,
nCores=params$nCores,
subsetGenes=params$subsetGenes,
subsetCells=params$subsetCells,
resolution=params$resolution,
perplexity=params$perplexity
)
params_list
for (p in params_list){
assign(names(p), p)
}
names(p)
params_list
for (p in params_list){
assign(names(p), p)
}
p
names(p)
assign(p, params_list[p])
p
names(params_list)
for (n in names(params_list) ){
assign(n, params_list[n])
}
import_parameters(params)
source(file.path(root,"general_functions.R"))
# Import functions
root <- "./"
source(file.path(root,"general_functions.R"))
import_parameters(params)
import_parameters(params)
# Import functions
root <- "./"
source(file.path(root,"general_functions.R"))
import_parameters(params)
source(file.path(root,"general_functions.R"))
import_parameters(params)
