import_parameters(params)
######################################################
#### #### PACKAGES #### ####
######################################################
library(monocle3)
paste("monocle3", packageVersion("monocle3"))
library(cowplot)
library(ggplot2)
library(dplyr)
library(data.table)
library(readxl)
library(reshape2)
library(ggrepel)
library(plotly)
library(GeneOverlap) # BiocManager::install("GeneOverlap")
######################################################
# Exporting 3D plots
knitr::knit_hooks$set(webgl = rgl::hook_webgl)
dge_limit <- F # 100
nCores <- 4#parallel::detectCores()
set.seed(2019)
# Load preprocessed data
load("./Data/monocle3_CDS.RData")
cds
dge_path="./Results/across_Clust1.vs.Clust2.csv"
dge = data.table::fread("./Results/across_Clust1.vs.Clust2.csv")
dge
library(plotly)
plot_ly(dge, x = ~estimate, y = ~ -log10(q_value), z = ~normalized_effect,
color = ~ -log10(q_value))
p <- plot_ly(dge, x = ~estimate, y = ~ -log10(q_value), z = ~normalized_effect,
color = ~ -log10(q_value)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Effect'),
yaxis = list(title = '-log(q-value)'),
zaxis = list(title = 'Z')))
p
p <- plot_ly(dge,
x = ~estimate,
y = ~ -log10(q_value),
z = ~normalized_effect) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Effect'),
yaxis = list(title = '-log(q-value)'),
zaxis = list(title = 'Z')))
p
p <- plot_ly(dge,
x = ~normalized_effect,
y = ~estimate,
z = ~-log10(q_value),
color=estimate) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p <- plot_ly(dge,
x = ~normalized_effect,
y = ~estimate,
z = ~-log10(q_value),
color=estimate) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
dge
p <- plot_ly(dge,
x = ~normalized_effect,
y = ~estimate,
z = ~-log10(q_value) ) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
p <- plot_ly(dge,
x = ~normalized_effect,
y = ~estimate,
z = ~-log10(q_value),
marker = list(color = ~estimate,
colorscale = c('#FFE1A1', '#683531'), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
scale(dge$estimate)
dge <- scale(dge$estimate) +  scale(-log10(dge$q_value))
dge["colorscale"] <- scale(dge$estimate) +  scale(-log10(dge$q_value))
dge = data.table::fread("./Results/across_Clust1.vs.Clust2.csv")
dge["colorscale"] <- scale(dge$estimate) +  scale(-log10(dge$q_value))
dge = data.table::fread("./Results/across_Clust1.vs.Clust2.csv")
dge["colorscale"] <- scale(dge$estimate) +  scale(-log10(dge$q_value))
dge$colorscale <- scale(dge$estimate) +  scale(-log10(dge$q_value))
dge
scale(dge$estimate)
as.numeric(scale(dge$estimate) )
as.numeric(scale(dge$estimate) )+  scale(-log10(dge$q_value))
as.numeric(scale(dge$estimate) )+ as.numeric( scale(-log10(dge$q_value)))
dge$estimate_norm <- scale(dge$estimate)
dge$estimate.norm <- scale(dge$estimate)
dge$q_value.norm
dge$q_value.norm <- scale(-log10(dge$q_value))
dge
dge = data.table::fread("./Results/across_Clust1.vs.Clust2.csv")
dge$estimate.norm <- scale(dge$estimate)
dge$q_value.norm <- scale(-log10(dge$q_value))
dge
scale(-log10(dge$q_value))
scale(dge$estimate)
-log10(dge$q_value)
dge$q_value.norm <- scale(-log10(dge$q_value), center = T)
dge
scale(-log10(dge$q_value), center = T)
scale(-log10(dge$q_value), center = F)
max(scale)
dge$q_value.norm <- scale(-log10(dge$q_value), center = F)
dge
hist( dge$q_value.norm)
function(dge$estimate) {(x - min(x)) / (max(x) - min(x))}
norm <- function(x) {(x - min(x)) / (max(x) - min(x))}
norm(dge$estimat)
norm(dge$estimate)
norm(-log10(dge$q_value))
dge$estimate.norm <- scale(dge$estimate)
dge$q_value.norm <- scale(-log10(dge$q_value), center = F)
dge = data.table::fread("./Results/across_Clust1.vs.Clust2.csv")
norm <- function(x) {(x - min(x)) / (max(x) - min(x))}
dge$estimate.norm <-  norm(dge$estimate)
dge$q_value.norm <-  norm(-log10(dge$q_value))
dge$colorscale <- dge$estimate.norm + dge$q_value.norm
dge
dge[is.na(dge)] <-0
dge
p <- plot_ly(dge,
x = ~normalized_effect,
y = ~estimate,
z = ~-log10(q_value),
marker = list(color = ~estimate,
colorscale = c('#FFE1A1', '#683531'), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p <- plot_ly(dge,
x = ~normalized_effect,
y = ~estimate,
z = ~-log10(q_value),
marker = list(color = ~colorscale,
colorscale = c('#FFE1A1', '#683531'), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
p <- plot_ly(dge,
x = ~estimate,
y = ~estimate,
z = ~-log10(q_value),
marker = list(color = ~colorscale,
colorscale = c('#FFE1A1', '#683531'), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
dge
p <- plot_ly(dge,
x = ~normalized_effect,
y = ~estimate,
z = ~-log10(q_value),
marker = list(color = ~-log10(q_value),
colorscale = c('#FFE1A1', '#683531'), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
colorRampPalette(brewer.pal(11,"Spectral"))(100)
?
colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(100)
colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))
(100)
colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(100)
p <- plot_ly(dge,
x = ~normalized_effect,
y = ~estimate,
z = ~-log10(q_value),
marker = list(color = ~-log10(q_value),
colorscale = colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(100),
showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
p <- plot_ly(dge,
x = ~normalized_effect,
y = ~estimate,
z = ~-log10(q_value),
marker = list(color = ~-log10(q_value),
colorscale = colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(100),
showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
p <- plot_ly(dge,
x = ~normalized_effect,
y = ~estimate,
z = ~-log10(q_value),
marker = list(color = ~-log10(q_value),
colors = "Spectral",
showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
plot_ly(dge,
x = ~normalized_effect,
y = ~estimate,
z = ~-log10(q_value),
marker = list(color = ~-log10(q_value),
colors = "Spectral",
showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p <- plot_ly(dge,
x = ~normalized_effect,
y = ~estimate,
z = ~-log10(q_value),
marker = list(color = ~-log10(q_value),
colors = "spectral",
showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
reove(p)
remove(p)
p <- plot_ly(dge,
x = ~normalized_effect,
y = ~estimate,
z = ~-log10(q_value),
marker = list(color = ~-log10(q_value),
colors = "Spectral",
showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
p <- plot_ly(dge,
x = ~normalized_effect,
y = ~estimate,
z = ~-log10(q_value),
marker = list(color = ~-log10(q_value),
colorscale = colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(100), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
p <- plot_ly(dge,
x = ~normalized_effect,
y = ~estimate,
z = ~-log10(q_value),
marker = list(
colorscale = colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(100), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
color = colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(100), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
p <- plot_ly(dge,
x = ~normalized_effect,
y = ~estimate,
z = ~-log10(q_value),
marker = list( color = colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(100), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
p <- plot_ly(dge,
x = ~normalized_effect,
y = ~estimate,
z = ~-log10(q_value),
marker = list( color = colorRampPalette(RColorBrewer::brewer.pal(100,"Spectral"))(100), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
p <- plot_ly(dge,
x = ~normalized_effect,
y = ~estimate,
z = ~-log10(q_value),
marker = list( color = colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(100), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
p <- plot_ly(dge,
x = ~normalized_effect,
y = ~estimate,
z = ~-log10(q_value),
marker = list( color = colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(41), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
p <- plot_ly(dge,
x = ~normalized_effect,
y = ~estimate,
z = ~-log10(q_value),
marker = list( color = colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(200), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
pi
pi*((dge$estimate)^2)*(-log10(dge$q_value)/3)
dge$cone <-  pi*((dge$estimate)^2)*(-log10(dge$q_value)/3)
p <- plot_ly(dge,
x = ~cone,
y = ~estimate,
z = ~-log10(q_value),
marker = list( color = colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(200), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
dge$cone <-  pi*dge$estimate#((dge$estimate)^2)*(-log10(dge$q_value)/3)
p <- plot_ly(dge,
x = ~cone,
y = ~estimate,
z = ~-log10(q_value),
marker = list( color = colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(200), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
dge$cone.surface = pi*dge$estimate(dge$estimate+sqrt(dge$q_value^2+dge$estimate^2))
dge$cone.surface = pi*dge$estimate*(dge$estimate+sqrt(dge$q_value^2+dge$estimate^2))
p <- plot_ly(dge,
x = ~cone.surface,
y = ~estimate,
z = ~-log10(q_value),
marker = list( color = colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(200), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
dge$estimate.norm <-  norm(dge$estimate)
dge$q_value.norm <-  norm(-log10(dge$q_value))
dge$colorscale <-
# dge$estimate.norm <-  norm(dge$estimate)
# dge$q_value.norm <-  norm(-log10(dge$q_value))
# dge$colorscale <- dge$estimate.norm + dge$q_value.norm
# dge[is.na(dge)] <-0
# dge$cone <-  pi*dge$estimate#((dge$estimate)^2)*(-log10(dge$q_value)/3)
# dge$cone.surface = pi*dge$estimate*(dge$estimate+sqrt(dge$q_value^2+dge$estimate^2))
p <- plot_ly(dge,
x = ~dge$test_val,
y = ~estimate,
z = ~-log10(q_value),
marker = list( color = colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(200), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
# dge$estimate.norm <-  norm(dge$estimate)
# dge$q_value.norm <-  norm(-log10(dge$q_value))
# dge$colorscale <- dge$estimate.norm + dge$q_value.norm
# dge[is.na(dge)] <-0
# dge$cone <-  pi*dge$estimate#((dge$estimate)^2)*(-log10(dge$q_value)/3)
# dge$cone.surface = pi*dge$estimate*(dge$estimate+sqrt(dge$q_value^2+dge$estimate^2))
p <- plot_ly(dge,
x = ~dge$test_val,
y = ~estimate,
z = ~-log10(q_value),
text = ~ gene,
marker = list( color = colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(200), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
# dge$estimate.norm <-  norm(dge$estimate)
# dge$q_value.norm <-  norm(-log10(dge$q_value))
# dge$colorscale <- dge$estimate.norm + dge$q_value.norm
# dge[is.na(dge)] <-0
# dge$cone <-  pi*dge$estimate#((dge$estimate)^2)*(-log10(dge$q_value)/3)
# dge$cone.surface = pi*dge$estimate*(dge$estimate+sqrt(dge$q_value^2+dge$estimate^2))
p <- plot_ly(dge,
x = ~dge$test_val,
y = ~estimate,
z = ~-log10(q_value),
text = ~ gene_short_name,
marker = list( color = colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(200), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
# dge$estimate.norm <-  norm(dge$estimate)
# dge$q_value.norm <-  norm(-log10(dge$q_value))
# dge$colorscale <- dge$estimate.norm + dge$q_value.norm
# dge[is.na(dge)] <-0
# dge$cone <-  pi*dge$estimate#((dge$estimate)^2)*(-log10(dge$q_value)/3)
# dge$cone.surface = pi*dge$estimate*(dge$estimate+sqrt(dge$q_value^2+dge$estimate^2))
p <- plot_ly(dge,
mode = 'markers+text'
x = ~dge$test_val,
y = ~estimate,
z = ~-log10(q_value),
text = ~ gene_short_name,
marker = list( color = colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(200), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
# dge$estimate.norm <-  norm(dge$estimate)
# dge$q_value.norm <-  norm(-log10(dge$q_value))
# dge$colorscale <- dge$estimate.norm + dge$q_value.norm
# dge[is.na(dge)] <-0
# dge$cone <-  pi*dge$estimate#((dge$estimate)^2)*(-log10(dge$q_value)/3)
# dge$cone.surface = pi*dge$estimate*(dge$estimate+sqrt(dge$q_value^2+dge$estimate^2))
p <- plot_ly(dge,
mode = 'markers+text',
x = ~dge$test_val,
y = ~estimate,
z = ~-log10(q_value),
text = ~ gene_short_name,
marker = list( color = colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(200), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
dge
# dge$estimate.norm <-  norm(dge$estimate)
# dge$q_value.norm <-  norm(-log10(dge$q_value))
# dge$colorscale <- dge$estimate.norm + dge$q_value.norm
# dge[is.na(dge)] <-0
# dge$cone <-  pi*dge$estimate#((dge$estimate)^2)*(-log10(dge$q_value)/3)
# dge$cone.surface = pi*dge$estimate*(dge$estimate+sqrt(dge$q_value^2+dge$estimate^2))
p <- plot_ly(dge,
mode = 'markers+text',
x = ~std_err,
y = ~estimate,
z = ~-log10(q_value),
text = ~ gene_short_name,
marker = list( color = colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(200), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
# dge$estimate.norm <-  norm(dge$estimate)
# dge$q_value.norm <-  norm(-log10(dge$q_value))
# dge$colorscale <- dge$estimate.norm + dge$q_value.norm
# dge[is.na(dge)] <-0
# dge$cone <-  pi*dge$estimate#((dge$estimate)^2)*(-log10(dge$q_value)/3)
# dge$cone.surface = pi*dge$estimate*(dge$estimate+sqrt(dge$q_value^2+dge$estimate^2))
p <- plot_ly(dge,
mode = 'markers+text',
x = ~estimate,
y = ~estimate,
z = ~-log10(q_value),
text = ~ gene_short_name,
marker = list( color = colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(200), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
# dge$estimate.norm <-  norm(dge$estimate)
# dge$q_value.norm <-  norm(-log10(dge$q_value))
# dge$colorscale <- dge$estimate.norm + dge$q_value.norm
# dge[is.na(dge)] <-0
# dge$cone <-  pi*dge$estimate#((dge$estimate)^2)*(-log10(dge$q_value)/3)
# dge$cone.surface = pi*dge$estimate*(dge$estimate+sqrt(dge$q_value^2+dge$estimate^2))
p <- plot_ly(dge,
x = ~test_val,
y = ~estimate,
z = ~-log10(q_value),
text = ~ gene_short_name,
marker = list( color = colorRampPalette(RColorBrewer::brewer.pal(11,"Spectral"))(200), showscale = T)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Normalized Effect'),
yaxis = list(title = 'Effect'),
zaxis = list(title = '-log(q-value)')))
p
