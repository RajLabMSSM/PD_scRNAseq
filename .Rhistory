meta_var,
group1, group2,
test.use="MAST",
show_plot=T,
show_table=T,
save_path="./Results/Seurat",
compress=F,
cluster="allClusters",
latent.vars=NULL){
#print(paste("DGE_allCells",meta_var,sep="_"))
# DAT <- SetAllIdent(DAT, id = meta_var)
# DAT <- StashIdent(DAT, save.name = meta_var)
# DAT[[meta_var]] <- Idents(object = DAT)
cds <- SetIdent(cds, value=meta_var)
DEGs <- FindMarkers(object = cds,
ident.1=group1,
ident.2=group2,
test.use=test.use,
min.pct = 0.1,
logfc.threshold = 0.25,
min.cells.feature = 3,
min.cells.group = 3,
only.pos = F,
verbose = F,
latent.vars = latent.vars)
DEGs$gene <- row.names(DEGs)
cds <- SetIdent(cds, value="post_clustering")
cap <- paste("Cluster",cluster,"DEGs:",group1, "vs.", group2)
if(show_table){
createDT(DEGs, caption = cap)
}
if(show_plot){
vol <- volcanoPlot(DEGs, caption = cap, show_plot = F)
print(vol)
}
if(save_path!=F){
res_path <- file.path(save_path,
paste0("DGE.results_",meta_var,"_cluster",cluster,".tsv",
ifelse(compress,".gz","")))
message("Saving DGE results ==> ",res_path)
dir.create(dirname(res_path), showWarnings = F, recursive = T)
data.table::fwrite(DEGs,
file = res_path,
sep="\t",
nThread = 4)
}
return(DEGs)
}
createDT <- function(DF, caption="", scrollY=500){
data <- DT::datatable(DF, caption=caption,
extensions =  'Buttons',
options = list( dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
scrollY = scrollY, scrollX=T, scrollCollapse = T, paging = F,
columnDefs = list(list(className = 'dt-center', targets = "_all"))
)
)
return(data)
}
# Need to wrap inside tagList when rendering DTs within a for loop
createDT_html <- function(DF, caption="", scrollY=400){
print( htmltools::tagList( createDT(DF, caption, scrollY)) )
}
##Construct the plot object
volcanoPlot <- function(DEG_df,
caption="",
topFC_labeled=Inf,
FC_cutoff=1,
Q_cutoff=.05,
show_plot=T){
yMax  <- max(-log10(DEG_df$p_val_adj)) + max(-log10(DEG_df$p_val_adj))/3
# IMPORTANT!# Must replace 0s with small numbers to avoid getting errors when taking the -log
DEG_df[DEG_df$p_val_adj==0,"p_val_adj"] <- .Machine$double.xmin
rownames(DEG_df) <- DEG_df$gene
labeled_genes <- subset(DEG_df, p_val_adj<Q_cutoff | avg_logFC>=FC_cutoff)
if(nrow(labeled_genes)>topFC_labeled){
labeled_genes <- arrange(labeled_genes, p_val_adj, desc(avg_logFC))[1:topFC_labeled,]
}
xlimit <- max(abs(DEG_df$avg_logFC))*1.1
# EnhancedVolcano library
vol <- EnhancedVolcano::EnhancedVolcano(toptable = DEG_df,
x="avg_logFC",
y="p_val_adj",
transcriptPointSize = 3,
pCutoff = Q_cutoff,
FCcutoff = FC_cutoff,
lab=rownames(DEG_df),
cutoffLineCol = 'grey30',
col = c("grey30", "forestgreen", "royalblue", "red2"),
legend = c("NA",
paste("log2(FC) ≥", FC_cutoff),
paste("q-value <",Q_cutoff),
paste("q-value <",Q_cutoff,"& log2(FC) ≥", FC_cutoff)
),
xlab = "log2(FC)",
ylab = "-log10(q-value)",
# legend = c("Bonferonni < .05",),
# col = c("black","purple","turquoise"),
title=caption,
subtitle = "") +
xlim(c(-xlimit,xlimit)) +
labs(fill="DGE Group") +
theme_bw()
if(show_plot){print(vol)}
return(vol)
# # Custom volcano plot
#   DEG_df$sig<-  ifelse( DEG_df$p_val_adj<0.05 & DEG_df$avg_logFC<1.5, "p_val_adj<0.05",
#             ifelse( DEG_df$p_val_adj<0.05  & DEG_df$avg_logFC>1.5, "p_val_adj<0.05 & avg_logFC>1.5",
# 		        "p_val_adj>0.05"
# 		))
#   DEG_df <- arrange(DEG_df, desc(sig))
# vol <- ggplot(data=DEG_df, aes(x=avg_logFC, y= -log10(p_val_adj))) +
#   geom_point(alpha=0.5, size=3, aes(col=sig)) +
#   scale_color_manual(values=list("p_val_adj<0.05"="turquoise3",
#                                  "p_val_adj<0.05 & avg_logFC>1.5"="purple",
#                                  "p_val_adj>0.05" = "darkgray")) +
#   theme(legend.position = "none") +
#   xlab(expression(paste("Average ",log^{2},"(fold change)"))) +
#   ylab(expression(paste(-log^{10},"(p-value)"))) +
#   xlim(-2,2) + ylim(0, yMax) +
#   ## ggrepl labels
#   ggrepel::geom_text_repel(data=labeled_genes,
#                             aes(label=gene, x=avg_logFC, y= -log10(p_val_adj)),
#                             color="black", alpha=.5,
#                             segment.color="black", segment.alpha=.5
#                   ) +
#   # Lines
#   geom_vline(xintercept= -1.5,lty=4, lwd=.3, alpha=.5) +
#   geom_vline(xintercept= 1.5,lty=4, lwd=.3, alpha=.5) +
#   geom_hline(yintercept= -log10(0.05),lty=4, lwd=.3, alpha=.5) +
#   ggtitle(caption)
# print(vol)
}
DEG_df <- runDGE(DAT, meta_var = "dx", group1 = "PD", group2 = "control",
test.use = "MAST")
DEG_id <- runDGE(DAT_id, meta_var = "dx", group1 = "PD", group2 = "control",
test.use = "MAST")
DEG_mut.id <- runDGE(DAT_id, meta_var = "mut", group1 = "PD", group2 = "control",
test.use = "MAST")
DEG_mut.id <- runDGE(DAT_id, meta_var = "mut", group1 = "PD", group2 = "LRRK2",
test.use = "MAST")
DEG_mut.id <- runDGE(DAT_id, meta_var = "mut", group1 = "LRRK2", group2 = "PD",
test.use = "MAST")
DEG_df <- runDGE(DAT, meta_var = "mut", group1 = "LRRK2", group2 = "PD",  test.use = "MAST")
?FindMarkers
DAT_id@assays$RNA@data
DAT_id@assays$RNA@scale.data
DEG_mut.id <- runDGE(DAT_id, slot="scale.data",
meta_var = "mut", group1 = "LRRK2", group2 = "PD",
test.use = "MAST")
# Available DGE methods:
## "wilcox", "bimod", "roc", "t", "tobit", "poisson", "negbinom", "MAST", "DESeq2"
runDGE <- function(cds,
meta_var,
group1, group2,
test.use="MAST",
show_plot=T,
show_table=T,
save_path="./Results/Seurat",
compress=F,
cluster="allClusters",
latent.vars=NULL){
#print(paste("DGE_allCells",meta_var,sep="_"))
# DAT <- SetAllIdent(DAT, id = meta_var)
# DAT <- StashIdent(DAT, save.name = meta_var)
# DAT[[meta_var]] <- Idents(object = DAT)
cds <- SetIdent(cds, value=meta_var)
DEGs <- FindMarkers(object = cds,
slot="scale.data",
ident.1=group1,
ident.2=group2,
test.use=test.use,
min.pct = 0.1,
logfc.threshold = 0.25,
min.cells.feature = 3,
min.cells.group = 3,
only.pos = F,
verbose = F,
latent.vars = latent.vars)
DEGs$gene <- row.names(DEGs)
cds <- SetIdent(cds, value="post_clustering")
cap <- paste("Cluster",cluster,"DEGs:",group1, "vs.", group2)
if(show_table){
createDT(DEGs, caption = cap)
}
if(show_plot){
vol <- volcanoPlot(DEGs, caption = cap, show_plot = F)
print(vol)
}
if(save_path!=F){
res_path <- file.path(save_path,
paste0("DGE.results_",meta_var,"_cluster",cluster,".tsv",
ifelse(compress,".gz","")))
message("Saving DGE results ==> ",res_path)
dir.create(dirname(res_path), showWarnings = F, recursive = T)
data.table::fwrite(DEGs,
file = res_path,
sep="\t",
nThread = 4)
}
return(DEGs)
}
DEG_df <- runDGE(DAT, meta_var = "dx", group1 = "PD", group2 = "control",
test.use = "MAST")
meta_var = "dx"
group1 = "PD"
group2 = "control"
test.use = "MAST"
cds=DAT
#print(paste("DGE_allCells",meta_var,sep="_"))
# DAT <- SetAllIdent(DAT, id = meta_var)
# DAT <- StashIdent(DAT, save.name = meta_var)
# DAT[[meta_var]] <- Idents(object = DAT)
cds <- SetIdent(cds, value=meta_var)
latent.vars=NULL
DEGs <- FindMarkers(object = cds,
slot="scale.data",
ident.1=group1,
ident.2=group2,
test.use=test.use,
min.pct = 0.1,
logfc.threshold = 0.25,
min.cells.feature = 3,
min.cells.group = 3,
only.pos = F,
verbose = F,
latent.vars = latent.vars)
DEGs
DEGs
# Available DGE methods:
## "wilcox", "bimod", "roc", "t", "tobit", "poisson", "negbinom", "MAST", "DESeq2"
runDGE <- function(cds,
meta_var,
group1, group2,
test.use="MAST",
show_plot=T,
show_table=T,
save_path="./Results/Seurat",
compress=F,
cluster="allClusters",
latent.vars=NULL,
slot = "data"){
#print(paste("DGE_allCells",meta_var,sep="_"))
# DAT <- SetAllIdent(DAT, id = meta_var)
# DAT <- StashIdent(DAT, save.name = meta_var)
# DAT[[meta_var]] <- Idents(object = DAT)
cds <- SetIdent(cds, value=meta_var)
DEGs <- FindMarkers(object = cds,
slot = slot,
ident.1=group1,
ident.2=group2,
test.use=test.use,
min.pct = 0.1,
logfc.threshold = 0.25,
min.cells.feature = 3,
min.cells.group = 3,
only.pos = F,
verbose = F,
latent.vars = latent.vars)
if("avg_diff" %in% colnames(DEGs)){DEGs$avg_logFC <- DEGs$avg_diff}
DEGs$gene <- row.names(DEGs)
cds <- SetIdent(cds, value="post_clustering")
cap <- paste("Cluster",cluster,"DEGs:",group1, "vs.", group2)
if(show_table){
createDT(DEGs, caption = cap)
}
if(show_plot){
vol <- volcanoPlot(DEGs, caption = cap, show_plot = F)
print(vol)
}
if(save_path!=F){
res_path <- file.path(save_path,
paste0("DGE.results_",meta_var,"_cluster",cluster,".tsv",
ifelse(compress,".gz","")))
message("Saving DGE results ==> ",res_path)
dir.create(dirname(res_path), showWarnings = F, recursive = T)
data.table::fwrite(DEGs,
file = res_path,
sep="\t",
nThread = 4)
}
return(DEGs)
}
DEG_df <- runDGE(DAT, meta_var = "dx", group1 = "PD", group2 = "control",
test.use = "MAST", slot="scale.data")
DEG_df <- runDGE(DAT_id, meta_var = "dx", group1 = "PD", group2 = "control",
test.use = "MAST", slot="scale.data")
DEG_id <- runDGE(DAT_id, meta_var = "dx", group1 = "PD", group2 = "control",
test.use = "MAST", slot = "scale.data")
# Available DGE methods:
## "wilcox", "bimod", "roc", "t", "tobit", "poisson", "negbinom", "MAST", "DESeq2"
runDGE <- function(cds,
meta_var,
group1, group2,
test.use="MAST",
show_plot=T,
show_table=T,
save_path="./Results/Seurat",
compress=F,
cluster="allClusters",
latent.vars=NULL,
slot = "data"){
#print(paste("DGE_allCells",meta_var,sep="_"))
# DAT <- SetAllIdent(DAT, id = meta_var)
# DAT <- StashIdent(DAT, save.name = meta_var)
# DAT[[meta_var]] <- Idents(object = DAT)
cds <- SetIdent(cds, value=meta_var)
DEGs <- Seurat::FindMarkers(object = cds,
slot = slot,
ident.1=group1,
ident.2=group2,
test.use=test.use,
min.pct = 0.1,
logfc.threshold = 0.25,
min.cells.feature = 3,
min.cells.group = 3,
only.pos = F,
verbose = F,
latent.vars = latent.vars)
if("avg_diff" %in% colnames(DEGs)){DEGs$avg_logFC <- DEGs$avg_diff}
DEGs$gene <- row.names(DEGs)
cds <- SetIdent(cds, value="post_clustering")
cap <- paste("Cluster",cluster,"DEGs:",group1, "vs.", group2)
if(show_table){
createDT(DEGs, caption = cap)
}
if(show_plot){
vol <- volcanoPlot(DEGs, caption = cap, show_plot = F)
print(vol)
}
if(save_path!=F){
res_path <- file.path(save_path,
paste0("DGE.results_",meta_var,"_cluster",cluster,".tsv",
ifelse(compress,".gz","")))
message("Saving DGE results ==> ",res_path)
dir.create(dirname(res_path), showWarnings = F, recursive = T)
data.table::fwrite(DEGs,
file = res_path,
sep="\t",
nThread = 4)
}
return(DEGs)
}
DEG_df <- runDGE(DAT, meta_var = "dx", group1 = "PD", group2 = "control",
test.use = "MAST")
# Available DGE methods:
## "wilcox", "bimod", "roc", "t", "tobit", "poisson", "negbinom", "MAST", "DESeq2"
runDGE <- function(cds,
meta_var,
group1, group2,
test.use="MAST",
show_plot=T,
show_table=T,
save_path="./Results/Seurat",
compress=F,
cluster="allClusters",
latent.vars=NULL,
slot = "data"){
#print(paste("DGE_allCells",meta_var,sep="_"))
# DAT <- SetAllIdent(DAT, id = meta_var)
# DAT <- StashIdent(DAT, save.name = meta_var)
# DAT[[meta_var]] <- Idents(object = DAT)
cds <- SetIdent(cds, value=meta_var)
DEGs <- Seurat::FindMarkers(object = cds,
slot = slot,
ident.1=group1,
ident.2=group2,
test.use=test.use,
min.pct = 0.1,
logfc.threshold = 0.25,
min.cells.feature = 3,
min.cells.group = 3,
only.pos = F,
verbose = F,
latent.vars = latent.vars)
if("avg_diff" %in% colnames(DEGs)){DEGs$avg_logFC <- DEGs$avg_diff}
DEGs$gene <- row.names(DEGs)
cds <- SetIdent(cds, value="post_clustering")
cap <- paste("Cluster",cluster,"DEGs:",group1, "vs.", group2)
if(show_table){
createDT(DEGs, caption = cap)
}
if(show_plot){
vol <- volcanoPlot(DEGs, caption = cap, show_plot = F)
print(vol)
}
if(save_path!=F){
res_path <- file.path(save_path,
paste0("DGE.results_",meta_var,"_cluster",cluster,
"_",slot,".tsv",
ifelse(compress,".gz","")))
message("Saving DGE results ==> ",res_path)
dir.create(dirname(res_path), showWarnings = F, recursive = T)
data.table::fwrite(DEGs,
file = res_path,
sep="\t",
nThread = 4)
}
return(DEGs)
}
DEG_dx <- runDGE(DAT, meta_var = "dx", group1 = "PD", group2 = "control",
test.use = "MAST")
DEG_mut <- runDGE(DAT, meta_var = "mut", group1 = "LRRK2", group2 = "PD",  test.use = "MAST")
# After normalizing for individual
DEG_mut.id <- runDGE(DAT_id, meta_var = "mut", group1 = "LRRK2", group2 = "PD",
test.use = "MAST", slot = "scale.data")
for (clust in unique(DAT@meta.data$post_clustering)){
DAT_clustSub<-NULL; DEGs<-NULL
# Subset cells by cluster
cat('  \n###',paste('Cluster ',clust,'- ',group1,' vs. ', group2, sep='') , '  \n')
DAT_clustSub <- subset(DAT_id, post_clustering==clust)
print(DAT_clustSub)
DEGs <-runDGE(cds = DAT_clustSub,
meta_var = meta_var,
group1 = group1, group2 = group2,
test.use = "MAST",
cluster = clust,
show_plot = F,
show_table = F,
slot = "scale.data")
vol <- volcanoPlot(DEG_df = DEGs,
caption = paste("Cluster",clust,"DEGs:",group1,"vs.",group2),
show_plot = F)
print(vol)
createDT_html(DEGs)
cat('  \n')
}
# NOTE: If you try to wrap the functions below into a function, it will just duplicate the results of the last cluster for all the others. This is totally bizarre...
meta_var = "dx"; group1 = "PD"; group2 = "control";
for (clust in unique(DAT@meta.data$post_clustering)){
DAT_clustSub<-NULL; DEGs<-NULL
# Subset cells by cluster
cat('  \n###',paste('Cluster ',clust,'- ',group1,' vs. ', group2, sep='') , '  \n')
DAT_clustSub <- subset(DAT, post_clustering==clust)
print(DAT_clustSub)
DEGs <-runDGE(cds = DAT_clustSub,
meta_var = meta_var,
group1 = group1, group2 = group2,
test.use = "MAST",
cluster = clust,
show_plot = F,
show_table = F,
slot = "data")
vol <- volcanoPlot(DEG_df = DEGs,
caption = paste("Cluster",clust,"DEGs:",group1,"vs.",group2),
show_plot = F)
print(vol)
createDT_html(DEGs)
cat('  \n')
}
meta_var = "mut"; group1 = "LRRK2"; group2 = "PD";
for (clust in unique(DAT@meta.data$post_clustering)){
DAT_clustSub<-NULL; DEGs<-NULL
# Subset cells by cluster
cat('  \n###',paste('Cluster ',clust,'- ',group1,' vs. ', group2, sep='') , '  \n')
DAT_clustSub <- subset(DAT, post_clustering==clust)
print(DAT_clustSub)
DEGs <-runDGE(cds = DAT_clustSub,
meta_var = meta_var,
group1 = group1, group2 = group2,
test.use = "MAST",
cluster = clust,
show_plot = F,
show_table = F)
vol <- volcanoPlot(DEG_df = DEGs,
caption = paste("Cluster",clust,"DEGs:",group1,"vs.",group2),
show_plot = F)
print(vol)
createDT_html(DEGs)
cat('  \n')
}
meta_var = "mut"; group1 = "LRRK2"; group2 = "PD";
for (clust in unique(DAT@meta.data$post_clustering)){
DAT_clustSub<-NULL; DEGs<-NULL
# Subset cells by cluster
cat('  \n###',paste('Cluster ',clust,'- ',group1,' vs. ', group2, sep='') , '  \n')
DAT_clustSub <- subset(DAT_id, post_clustering==clust)
print(DAT_clustSub)
DEGs <-runDGE(cds = DAT_clustSub,
meta_var = meta_var,
group1 = group1, group2 = group2,
test.use = "MAST",
cluster = clust,
show_plot = F,
show_table = F, slot = "scale.daa")
vol <- volcanoPlot(DEG_df = DEGs,
caption = paste("Cluster",clust,"DEGs:",group1,"vs.",group2),
show_plot = F)
print(vol)
createDT_html(DEGs)
cat('  \n')
}
for (clust in unique(DAT@meta.data$post_clustering)){
DAT_clustSub<-NULL; DEGs<-NULL
# Subset cells by cluster
cat('  \n###',paste('Cluster ',clust,'- ',group1,' vs. ', group2, sep='') , '  \n')
DAT_clustSub <- subset(DAT_id, post_clustering==clust)
print(DAT_clustSub)
DEGs <-runDGE(cds = DAT_clustSub,
meta_var = meta_var,
group1 = group1, group2 = group2,
test.use = "MAST",
cluster = clust,
show_plot = F,
show_table = F, slot = "scale.data")
vol <- volcanoPlot(DEG_df = DEGs,
caption = paste("Cluster",clust,"DEGs:",group1,"vs.",group2),
show_plot = F)
print(vol)
createDT_html(DEGs)
cat('  \n')
}
