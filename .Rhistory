# DAT[[meta_var]] <- Idents(object = DAT)
DAT <- SetIdent(DAT, value=meta_var)
DEGs <- FindMarkers(DAT,
ident.1=group1,
ident.2=group2,
test.use=test.use,
min.pct = 0.1,
logfc.threshold = 0.25,
min.cells.feature = 3,
min.cells.group = 3,
only.pos = F)
DEGs$gene <- row.names(DEGs)
cap <- paste("DEGs:\n",group1, "vs.", group2)
createDT_html(DEG_df, caption = cap)
volcanoPlot(DEG_df, caption = cap)
DAT <- SetIdent(DAT, value="post_clustering")
if(save_results!=F){
res_path <- "./Results"
dir.create(res_path, showWarnings = F, recursive = T)
data.table::fwrite(DEG_df,
file = file.path(res_path, paste0("DGE.results_",meta_var,"_",cluster,"tsv.gz")),
sep="\t",
nThread = 4)
}
return(DEGs)
}
# Available DGE methods:
## "wilcox", "bimod", "roc", "t", "tobit", "poisson", "negbinom", "MAST", "DESeq2"
runDGE <- function(DAT,
meta_var,
group1, group2,
test.use="MAST",
save_results=F,
cluster="allClusters"){
#print(paste("DGE_allCells",meta_var,sep="_"))
# DAT <- SetAllIdent(DAT, id = meta_var)
# DAT <- StashIdent(DAT, save.name = meta_var)
# DAT[[meta_var]] <- Idents(object = DAT)
DAT <- SetIdent(DAT, value=meta_var)
DEGs <- FindMarkers(DAT,
ident.1=group1,
ident.2=group2,
test.use=test.use,
min.pct = 0.1,
logfc.threshold = 0.25,
min.cells.feature = 3,
min.cells.group = 3,
only.pos = F)
DEGs$gene <- row.names(DEGs)
cap <- paste("DEGs:\n",group1, "vs.", group2)
createDT_html(DEG_df, caption = cap)
volcanoPlot(DEG_df, caption = cap)
DAT <- SetIdent(DAT, value="post_clustering")
if(save_results!=F){
res_path <- file.path("./Results", paste0("DGE.results_",meta_var,"_",cluster,"tsv.gz"))
message("Saving DGE results ==>",res_path)
dir.create(dirname(res_path), showWarnings = F, recursive = T)
data.table::fwrite(DEG_df,
file = res_path,
sep="\t",
nThread = 4)
}
return(DEGs)
}
DEG_df <- runDGE(DAT, "dx", group1 = "PD", group2 = "control", test.use = "MAST")
DEG_df <- runDGE(DAT, meta_var = "mut", group1 = "LRRK2", group2 = "PD",  test.use = "MAST")
# Available DGE methods:
## "wilcox", "bimod", "roc", "t", "tobit", "poisson", "negbinom", "MAST", "DESeq2"
runDGE <- function(DAT,
meta_var,
group1, group2,
test.use="MAST",
save_results=F,
cluster="allClusters"){
#print(paste("DGE_allCells",meta_var,sep="_"))
# DAT <- SetAllIdent(DAT, id = meta_var)
# DAT <- StashIdent(DAT, save.name = meta_var)
# DAT[[meta_var]] <- Idents(object = DAT)
DAT <- SetIdent(DAT, value=meta_var)
DEGs <- FindMarkers(DAT,
ident.1=group1,
ident.2=group2,
test.use=test.use,
min.pct = 0.1,
logfc.threshold = 0.25,
min.cells.feature = 3,
min.cells.group = 3,
only.pos = F)
DEGs$gene <- row.names(DEGs)
cap <- paste("DEGs:\n",group1, "vs.", group2)
createDT_html(DEG_df, caption = cap)
volcanoPlot(DEG_df, caption = cap)
DAT <- SetIdent(DAT, value="post_clustering")
if(save_results!=F){
res_path <- file.path("./Results/Seurat", paste0("DGE.results_",meta_var,"_",cluster,"tsv.gz"))
message("Saving DGE results ==>",res_path)
dir.create(dirname(res_path), showWarnings = F, recursive = T)
data.table::fwrite(DEG_df,
file = res_path,
sep="\t",
nThread = 4)
}
return(DEGs)
}
DEG_df <- runDGE(DAT, "dx", group1 = "PD", group2 = "control", test.use = "MAST")
# Available DGE methods:
## "wilcox", "bimod", "roc", "t", "tobit", "poisson", "negbinom", "MAST", "DESeq2"
runDGE <- function(DAT,
meta_var,
group1, group2,
test.use="MAST",
save_results=T,
cluster="allClusters"){
#print(paste("DGE_allCells",meta_var,sep="_"))
# DAT <- SetAllIdent(DAT, id = meta_var)
# DAT <- StashIdent(DAT, save.name = meta_var)
# DAT[[meta_var]] <- Idents(object = DAT)
DAT <- SetIdent(DAT, value=meta_var)
DEGs <- FindMarkers(DAT,
ident.1=group1,
ident.2=group2,
test.use=test.use,
min.pct = 0.1,
logfc.threshold = 0.25,
min.cells.feature = 3,
min.cells.group = 3,
only.pos = F)
DEGs$gene <- row.names(DEGs)
cap <- paste("DEGs:\n",group1, "vs.", group2)
createDT_html(DEG_df, caption = cap)
volcanoPlot(DEG_df, caption = cap)
DAT <- SetIdent(DAT, value="post_clustering")
if(save_results!=F){
res_path <- file.path("./Results/Seurat", paste0("DGE.results_",meta_var,"_",cluster,"tsv.gz"))
message("Saving DGE results ==>",res_path)
dir.create(dirname(res_path), showWarnings = F, recursive = T)
data.table::fwrite(DEG_df,
file = res_path,
sep="\t",
nThread = 4)
}
return(DEGs)
}
# Available DGE methods:
## "wilcox", "bimod", "roc", "t", "tobit", "poisson", "negbinom", "MAST", "DESeq2"
runDGE <- function(DAT,
meta_var,
group1, group2,
test.use="MAST",
save_path="./Results/Seurat",
cluster="allClusters"){
#print(paste("DGE_allCells",meta_var,sep="_"))
# DAT <- SetAllIdent(DAT, id = meta_var)
# DAT <- StashIdent(DAT, save.name = meta_var)
# DAT[[meta_var]] <- Idents(object = DAT)
DAT <- SetIdent(DAT, value=meta_var)
DEGs <- FindMarkers(DAT,
ident.1=group1,
ident.2=group2,
test.use=test.use,
min.pct = 0.1,
logfc.threshold = 0.25,
min.cells.feature = 3,
min.cells.group = 3,
only.pos = F)
DEGs$gene <- row.names(DEGs)
cap <- paste("DEGs:\n",group1, "vs.", group2)
createDT_html(DEG_df, caption = cap)
volcanoPlot(DEG_df, caption = cap)
DAT <- SetIdent(DAT, value="post_clustering")
if(save_results!=F){
res_path <- file.path(save_path, paste0("DGE.results_",meta_var,"_",cluster,"tsv.gz"))
message("Saving DGE results ==>",res_path)
dir.create(dirname(res_path), showWarnings = F, recursive = T)
data.table::fwrite(DEG_df,
file = res_path,
sep="\t",
nThread = 4)
}
return(DEGs)
}
DEG_df <- runDGE(DAT, "dx", group1 = "PD", group2 = "control", test.use = "MAST")
# Available DGE methods:
## "wilcox", "bimod", "roc", "t", "tobit", "poisson", "negbinom", "MAST", "DESeq2"
runDGE <- function(DAT,
meta_var,
group1, group2,
test.use="MAST",
save_path="./Results/Seurat",
cluster="allClusters"){
#print(paste("DGE_allCells",meta_var,sep="_"))
# DAT <- SetAllIdent(DAT, id = meta_var)
# DAT <- StashIdent(DAT, save.name = meta_var)
# DAT[[meta_var]] <- Idents(object = DAT)
DAT <- SetIdent(DAT, value=meta_var)
DEGs <- FindMarkers(DAT,
ident.1=group1,
ident.2=group2,
test.use=test.use,
min.pct = 0.1,
logfc.threshold = 0.25,
min.cells.feature = 3,
min.cells.group = 3,
only.pos = F)
DEGs$gene <- row.names(DEGs)
cap <- paste("DEGs:\n",group1, "vs.", group2)
createDT_html(DEG_df, caption = cap)
volcanoPlot(DEG_df, caption = cap)
DAT <- SetIdent(DAT, value="post_clustering")
if(save_path!=F){
res_path <- file.path(save_path, paste0("DGE.results_",meta_var,"_",cluster,"tsv.gz"))
message("Saving DGE results ==>",res_path)
dir.create(dirname(res_path), showWarnings = F, recursive = T)
data.table::fwrite(DEG_df,
file = res_path,
sep="\t",
nThread = 4)
}
return(DEGs)
}
# Available DGE methods:
## "wilcox", "bimod", "roc", "t", "tobit", "poisson", "negbinom", "MAST", "DESeq2"
runDGE <- function(DAT,
meta_var,
group1, group2,
test.use="MAST",
show_plot=T,
show_table=T,
save_path="./Results/Seurat",
cluster="allClusters"){
#print(paste("DGE_allCells",meta_var,sep="_"))
# DAT <- SetAllIdent(DAT, id = meta_var)
# DAT <- StashIdent(DAT, save.name = meta_var)
# DAT[[meta_var]] <- Idents(object = DAT)
DAT <- SetIdent(DAT, value=meta_var)
DEGs <- FindMarkers(DAT,
ident.1=group1,
ident.2=group2,
test.use=test.use,
min.pct = 0.1,
logfc.threshold = 0.25,
min.cells.feature = 3,
min.cells.group = 3,
only.pos = F)
DEGs$gene <- row.names(DEGs)
DAT <- SetIdent(DAT, value="post_clustering")
cap <- paste("DEGs:\n",group1, "vs.", group2)
if(show_plot){
volcanoPlot(DEG_df, caption = cap)
}
if(show_table){
createDT_html(DEG_df, caption = cap)
}
if(save_path!=F){
res_path <- file.path(save_path, paste0("DGE.results_",meta_var,"_",cluster,"tsv.gz"))
message("Saving DGE results ==>",res_path)
dir.create(dirname(res_path), showWarnings = F, recursive = T)
data.table::fwrite(DEG_df,
file = res_path,
sep="\t",
nThread = 4)
}
return(DEGs)
}
# Available DGE methods:
## "wilcox", "bimod", "roc", "t", "tobit", "poisson", "negbinom", "MAST", "DESeq2"
runDGE <- function(DAT,
meta_var,
group1, group2,
test.use="MAST",
show_plot=T,
show_table=T,
save_path="./Results/Seurat",
cluster="allClusters"){
#print(paste("DGE_allCells",meta_var,sep="_"))
# DAT <- SetAllIdent(DAT, id = meta_var)
# DAT <- StashIdent(DAT, save.name = meta_var)
# DAT[[meta_var]] <- Idents(object = DAT)
DAT <- SetIdent(DAT, value=meta_var)
DEGs <- FindMarkers(DAT,
ident.1=group1,
ident.2=group2,
test.use=test.use,
min.pct = 0.1,
logfc.threshold = 0.25,
min.cells.feature = 3,
min.cells.group = 3,
only.pos = F)
DEGs$gene <- row.names(DEGs)
DAT <- SetIdent(DAT, value="post_clustering")
cap <- paste("DEGs:\n",group1, "vs.", group2)
if(show_plot){
volcanoPlot(DEG_df, caption = cap)
}
if(show_table){
createDT_html(DEG_df, caption = cap)
}
if(save_path!=F){
res_path <- file.path(save_path, paste0("DGE.results_",meta_var,"_",cluster,"tsv.gz"))
message("Saving DGE results ==>",res_path)
dir.create(dirname(res_path), showWarnings = F, recursive = T)
data.table::fwrite(DEG_df,
file = res_path,
sep="\t",
nThread = 4)
}
return(DEGs)
}
DEG_df <- runDGE(DAT, meta_var = "dx", group1 = "PD", group2 = "control", test.use = "MAST")
DEG_df <- runDGE(DAT, meta_var = "mut", group1 = "LRRK2", group2 = "PD",  test.use = "MAST")
# Available DGE methods:
## "wilcox", "bimod", "roc", "t", "tobit", "poisson", "negbinom", "MAST", "DESeq2"
runDGE <- function(DAT,
meta_var,
group1, group2,
test.use="MAST",
show_plot=T,
show_table=T,
save_path="./Results/Seurat",
cluster="allClusters"){
#print(paste("DGE_allCells",meta_var,sep="_"))
# DAT <- SetAllIdent(DAT, id = meta_var)
# DAT <- StashIdent(DAT, save.name = meta_var)
# DAT[[meta_var]] <- Idents(object = DAT)
DAT <- SetIdent(DAT, value=meta_var)
DEGs <- FindMarkers(DAT,
ident.1=group1,
ident.2=group2,
test.use=test.use,
min.pct = 0.1,
logfc.threshold = 0.25,
min.cells.feature = 3,
min.cells.group = 3,
only.pos = F)
DEGs$gene <- row.names(DEGs)
DAT <- SetIdent(DAT, value="post_clustering")
cap <- paste("DEGs:\n",group1, "vs.", group2)
if(show_plot){
volcanoPlot(DEG_df, caption = cap)
}
if(show_table){
createDT_html(DEG_df, caption = cap)
}
if(save_path!=F){
res_path <- file.path(save_path, paste0("DGE.results_",meta_var,"_",cluster,".tsv.gz"))
message("Saving DGE results ==>",res_path)
dir.create(dirname(res_path), showWarnings = F, recursive = T)
data.table::fwrite(DEG_df,
file = res_path,
sep="\t",
nThread = 4)
}
return(DEGs)
}
DEG_df <- runDGE(DAT, meta_var = "mut", group1 = "LRRK2", group2 = "PD",  test.use = "MAST")
DGE_within_clusters <- function(DAT, meta_var, group1, group2){
for (clust in unique(DAT@meta.data$post_clustering)){
# Subset cells by cluster
cat('\n')
cat("### ",paste("Cluster ",clust,": ",group1," vs. ", group2, sep="") , "\n")
DAT_clustSub <- subset(DAT, seurat_clusters==clust)
DEG_df <-runDGE(DAT_clustSub,
meta_var = meta_var,
group1 = group1, group2 = group2,
test.use = "MAST",
cluster = clust)
cat('\n')
}
}
DGE_within_clusters(DAT, meta_var = "dx", group1 = "PD", group2 = "control")
DGE_within_clusters(DAT,meta_var = "mut", group1 = "LRRK2", group2 =  "PD")
?FindMarkers
##Construct the plot object
volcanoPlot <- function(DEG_df,
caption="",
topFC_labeled=Inf,
FC_cutoff=1,
Q_cutoff=.05,
show_plot=T){
yMax  <- max(-log10(DEG_df$p_val_adj)) + max(-log10(DEG_df$p_val_adj))/3
# IMPORTANT!# Must replace 0s with small numbers to avoid getting errors when taking the -log
DEG_df[DEG_df$p_val_adj==0,"p_val_adj"] <- .Machine$double.xmin
rownames(DEG_df) <- DEG_df$gene
labeled_genes <- subset(DEG_df, p_val_adj<Q_cutoff | avg_logFC>=FC_cutoff)
if(nrow(labeled_genes)>topFC_labeled){
labeled_genes <- arrange(labeled_genes, p_val_adj, desc(avg_logFC))[1:topFC_labeled,]
}
xlimit <- max(abs(DEG_df$avg_logFC))*1.1
# EnhancedVolcano library
vol <- EnhancedVolcano::EnhancedVolcano(toptable = DEG_df,
x="avg_logFC",
y="p_val_adj",
transcriptPointSize = 3,
pCutoff = Q_cutoff,
FCcutoff = FC_cutoff,
lab=rownames(DEG_df),
cutoffLineCol = 'grey30',
col = c("grey30", "forestgreen", "royalblue", "red2"),
legend = c("NA",
paste("log2(FC) ≥", FC_cutoff),
paste("q-value <",Q_cutoff),
paste("q-value <",Q_cutoff,"& log2(FC) ≥", FC_cutoff)
),
xlab = "log2(FC)",
ylab = "-log10(q-value)",
# legend = c("Bonferonni < .05",),
# col = c("black","purple","turquoise"),
title=caption,
subtitle = "") +
xlim(c(-xlimit,xlimit)) +
labs(legend="DGE Group") +
theme_bw()
if(show_plot){print(vol)}
return(vol)
# # Custom volcano plot
#   DEG_df$sig<-  ifelse( DEG_df$p_val_adj<0.05 & DEG_df$avg_logFC<1.5, "p_val_adj<0.05",
#             ifelse( DEG_df$p_val_adj<0.05  & DEG_df$avg_logFC>1.5, "p_val_adj<0.05 & avg_logFC>1.5",
# 		        "p_val_adj>0.05"
# 		))
#   DEG_df <- arrange(DEG_df, desc(sig))
# vol <- ggplot(data=DEG_df, aes(x=avg_logFC, y= -log10(p_val_adj))) +
#   geom_point(alpha=0.5, size=3, aes(col=sig)) +
#   scale_color_manual(values=list("p_val_adj<0.05"="turquoise3",
#                                  "p_val_adj<0.05 & avg_logFC>1.5"="purple",
#                                  "p_val_adj>0.05" = "darkgray")) +
#   theme(legend.position = "none") +
#   xlab(expression(paste("Average ",log^{2},"(fold change)"))) +
#   ylab(expression(paste(-log^{10},"(p-value)"))) +
#   xlim(-2,2) + ylim(0, yMax) +
#   ## ggrepl labels
#   ggrepel::geom_text_repel(data=labeled_genes,
#                             aes(label=gene, x=avg_logFC, y= -log10(p_val_adj)),
#                             color="black", alpha=.5,
#                             segment.color="black", segment.alpha=.5
#                   ) +
#   # Lines
#   geom_vline(xintercept= -1.5,lty=4, lwd=.3, alpha=.5) +
#   geom_vline(xintercept= 1.5,lty=4, lwd=.3, alpha=.5) +
#   geom_hline(yintercept= -log10(0.05),lty=4, lwd=.3, alpha=.5) +
#   ggtitle(caption)
# print(vol)
}
##Construct the plot object
volcanoPlot <- function(DEG_df,
caption="",
topFC_labeled=Inf,
FC_cutoff=1,
Q_cutoff=.05,
show_plot=T){
yMax  <- max(-log10(DEG_df$p_val_adj)) + max(-log10(DEG_df$p_val_adj))/3
# IMPORTANT!# Must replace 0s with small numbers to avoid getting errors when taking the -log
DEG_df[DEG_df$p_val_adj==0,"p_val_adj"] <- .Machine$double.xmin
rownames(DEG_df) <- DEG_df$gene
labeled_genes <- subset(DEG_df, p_val_adj<Q_cutoff | avg_logFC>=FC_cutoff)
if(nrow(labeled_genes)>topFC_labeled){
labeled_genes <- arrange(labeled_genes, p_val_adj, desc(avg_logFC))[1:topFC_labeled,]
}
xlimit <- max(abs(DEG_df$avg_logFC))*1.1
# EnhancedVolcano library
vol <- EnhancedVolcano::EnhancedVolcano(toptable = DEG_df,
x="avg_logFC",
y="p_val_adj",
transcriptPointSize = 3,
pCutoff = Q_cutoff,
FCcutoff = FC_cutoff,
lab=rownames(DEG_df),
cutoffLineCol = 'grey30',
col = c("grey30", "forestgreen", "royalblue", "red2"),
legend = c("NA",
paste("log2(FC) ≥", FC_cutoff),
paste("q-value <",Q_cutoff),
paste("q-value <",Q_cutoff,"& log2(FC) ≥", FC_cutoff)
),
xlab = "log2(FC)",
ylab = "-log10(q-value)",
# legend = c("Bonferonni < .05",),
# col = c("black","purple","turquoise"),
title=caption,
subtitle = "") +
xlim(c(-xlimit,xlimit)) +
labs(legend="DGE Group") +
theme_bw()
if(show_plot){print(vol)}
return(vol)
# # Custom volcano plot
#   DEG_df$sig<-  ifelse( DEG_df$p_val_adj<0.05 & DEG_df$avg_logFC<1.5, "p_val_adj<0.05",
#             ifelse( DEG_df$p_val_adj<0.05  & DEG_df$avg_logFC>1.5, "p_val_adj<0.05 & avg_logFC>1.5",
# 		        "p_val_adj>0.05"
# 		))
#   DEG_df <- arrange(DEG_df, desc(sig))
# vol <- ggplot(data=DEG_df, aes(x=avg_logFC, y= -log10(p_val_adj))) +
#   geom_point(alpha=0.5, size=3, aes(col=sig)) +
#   scale_color_manual(values=list("p_val_adj<0.05"="turquoise3",
#                                  "p_val_adj<0.05 & avg_logFC>1.5"="purple",
#                                  "p_val_adj>0.05" = "darkgray")) +
#   theme(legend.position = "none") +
#   xlab(expression(paste("Average ",log^{2},"(fold change)"))) +
#   ylab(expression(paste(-log^{10},"(p-value)"))) +
#   xlim(-2,2) + ylim(0, yMax) +
#   ## ggrepl labels
#   ggrepel::geom_text_repel(data=labeled_genes,
#                             aes(label=gene, x=avg_logFC, y= -log10(p_val_adj)),
#                             color="black", alpha=.5,
#                             segment.color="black", segment.alpha=.5
#                   ) +
#   # Lines
#   geom_vline(xintercept= -1.5,lty=4, lwd=.3, alpha=.5) +
#   geom_vline(xintercept= 1.5,lty=4, lwd=.3, alpha=.5) +
#   geom_hline(yintercept= -log10(0.05),lty=4, lwd=.3, alpha=.5) +
#   ggtitle(caption)
# print(vol)
}
