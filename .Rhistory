print("Written using: Seurat version* 2.3.4 2018-07-17")
# https://satijalab.org/seurat/install.html
# source("http://bit.ly/archived-seurat")
library(Seurat)
paste("Seurat", packageVersion("Seurat"))
# library(monocle) # BiocManager::install("monocle")
# paste("monocle", packageVersion("monocle"))
library(monocle3)
paste("monocle3", packageVersion("monocle3"))
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
paste("garnett", packageVersion("garnett"))
library(cowplot)
library(ggplot2)
library(dplyr)
library(data.table)
library(readxl)
library(reshape2)
library(ggrepel)
library(plotly)
######################################################
# Exporting 3D plots
knitr::knit_hooks$set(webgl = rgl::hook_webgl)
dge_limit <- F # 100
nCores <- 4#parallel::detectCores()
set.seed(2019)
biotypes <- get_biotypes(DAT)
DAT
start_time <- Sys.time()
#### #### Load Objects & Functions #### ####
######################################################
# Import functions
root = "./"
source(file.path(root,"MAIN.R"))
import_parameters(params)
# load("Results/Current_Pipeline/scRNAseq_results.RData")
# load(file.path(resultsPath, "3-11-2019/scRNAseq_results.RData"))
load(file.path("Data", "monocle3_CDS.RData"))
######################################################
#### #### PACKAGES #### ####
######################################################
print("Written using: Seurat version* 2.3.4 2018-07-17")
# https://satijalab.org/seurat/install.html
# source("http://bit.ly/archived-seurat")
library(Seurat)
paste("Seurat", packageVersion("Seurat"))
# library(monocle) # BiocManager::install("monocle")
# paste("monocle", packageVersion("monocle"))
library(monocle3)
paste("monocle3", packageVersion("monocle3"))
library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
paste("garnett", packageVersion("garnett"))
library(cowplot)
library(ggplot2)
library(dplyr)
library(data.table)
library(readxl)
library(reshape2)
library(ggrepel)
library(plotly)
######################################################
# Exporting 3D plots
knitr::knit_hooks$set(webgl = rgl::hook_webgl)
dge_limit <- F # 100
nCores <- 4#parallel::detectCores()
set.seed(2019)
cds <- monocle3::preprocess_cds(cds,
num_dim = 20, #100 by default
residual_model_formula_str = "~ nUMI + percent.mito")
monocle3::plot_pc_variance_explained(cds)
# Import functions
import_parameters(params)
# Import parameters supplied through yaml header
import_parameters <- function(params){
params_list <- list(
resultsPath=params$resultsPath,
# nCores=as.numeric(params$nCores),
subsetGenes=params$subsetGenes,
subsetCells=params$subsetCells,
resolution=params$resolution,
perplexity=as.numeric(params$perplexity)
)
# Have to setwd via knitr
knitr::opts_chunk$set(echo=T, error=T, root.dir = params$resultsPath
# cache=T, cache.lazy=T
)
# Utilize parallel processing later on
cat("**** __Utilized Cores__ **** =", params$nCores)
bindingIsLocked("params", env = .GlobalEnv)
unlockBinding("params", env = .GlobalEnv)
print(params)
for (n in names(params_list) ){
assign(n, params_list[n],  env = .GlobalEnv)
}
}
# Import functions
import_parameters(params)
# Import functions
import_parameters(params)
library(gprofiler2)
library(dplyr)
library(ggplot2)
root = "./"
source(file.path(root,"MAIN.R"))
load("./Data/monocle3_CDS.RData")
nCores <- 4
library(dplyr)
library(ggplot2)
root = "./"
source(file.path(root,"MAIN.R"))
import_parameters(params)
load("./Data/monocle3_CDS.RData")
nCores <- 4
cds
bulk.hubs <- data.table::fread("./Data/Katia_Modules/hubs_gencode30.tbl.txt")
bulk.hubs
bulk.hubs <- data.table::fread("./Data/Katia_Modules/hubs_gencode30.tbl.txt") %>% arrange(module)
bulk.hubs
bulk.hubs
bulk.hubs <- data.table::fread("./Data/Katia_Modules/hubs_gencode30.tbl.txt")
View(bulk.hubs)
# Hubs per module
bulk.hubs %>% dplyr::group_by(module)%>% count()
bulk.hubs
monocle3::plot_cells(cds,
genes=bulk.hubs$symbol,
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F) #  rasterize = T (for super high-res figures)
MOD.dt
library(dplyr)
library(ggplot2)
root = "./"
source(file.path(root,"MAIN.R"))
import_parameters(params)
load("./Data/monocle3_CDS.RData")
nCores <- 4
MOD.dt <- data.table::fread("./Results/bulk.modules_vs_sc.modules.txt")
MOD.dt
head(MOD.dt, 10)$Module1.name %>% unique()
top.bulk.mods <- head(MOD.dt, 10)$Module1.name %>% unique()
# module-module comparisons
MOD.dt <- data.table::fread("./Results/bulk.modules_vs_sc.modules.txt") %>% arrange(FDR, desc(Jaccard))
# module-module comparisons
MOD.dt <- data.table::fread("./Results/bulk.modules_vs_sc.modules.txt") %>% arrange(FDR, desc(Jaccard.index))
MOD.dt
# module-module comparisons
MOD.dt <- data.table::fread("./Results/bulk.modules_vs_sc.modules.txt") %>%
arrange(FDR)
MOD.dt
# module-module comparisons
MOD.dt <- data.table::fread("./Results/bulk.modules_vs_sc.modules.txt") %>%
arrange(FDR, desc(Jaccard.index))
MOD.dt
# module-module comparisons
MOD.dt <- data.table::fread("./Results/bulk.modules_vs_sc.modules.txt") %>%
arrange(FDR, desc(Jaccard.index))
top.bulk.mods <- head(MOD.dt, 10)$Module1.name %>% unique()
# module-module comparisons
MOD.dt <- data.table::fread("./Results/bulk.modules_vs_sc.modules.txt") %>%
arrange(FDR)
top.bulk.mods <- head(MOD.dt, 10)$Module1.name %>% unique()
# One hub per module
bulk.hubs <- data.table::fread("./Data/Katia_Modules/hubs_gencode30.tbl.txt")
# Plot hub expression in sc data
monocle3::plot_cells(cds,
genes=top.bulk.mods,
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F) #  rasterize = T (for super high-res figures)
# One hub per module
bulk.hubs <- data.table::fread("./Data/Katia_Modules/hubs_gencode30.tbl.txt")
# module-module comparisons
MOD.dt <- data.table::fread("./Results/bulk.modules_vs_sc.modules.txt") %>%
arrange(FDR)
top.bulk.mods <- head(MOD.dt, 10)$Module1.name %>% unique()
top.bulk.mods
top.bulk.mods
bulk.hubs
subset(bulk.hubs, module %in% top.bulk.mods)$symbol %>% unique()
top.bulk.hubs <- subset(bulk.hubs, module %in% top.bulk.mods)
# Plot hub expression in sc data
monocle3::plot_cells(cds,
genes=top.bulk.hubs$symbol,
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F) #  rasterize = T (for super high-res figures)
top.bulk.hubs$symbol
top.bulk.hubs
top.bulk.hubs
monocle3::plot_cells_3d(cds,
genes=subset(top.bulk.hubs, module=="darkmagenta")$symbol,
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F) #  rasterize = T (for super high-res figures)
monocle3::plot_cells_3d(cds,
genes=subset(top.bulk.hubs, module=="darkmagenta")$symbol,
show_trajectory_graph=F) #  rasterize = T (for super high-res figures)
monocle3::plot_cells_3d(cds,
genes=subset(top.bulk.hubs, module=="red")$symbol,
show_trajectory_graph=F) #  rasterize = T (for super high-res figures)
# Plot hub expression in sc data
monocle3::plot_cells(cds,
genes=top.bulk.hubs$symbol,
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F) #  rasterize = T (for super high-res figures)
View(top.bulk.hubs)
# Plot hub expression in sc data
monocle3::plot_cells(cds,
genes=top.bulk.hubs$symbol,
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F) #  rasterize = T (for super high-res figures)
top.bulk.hubs
MOD.dt
# Plot hub expression in sc data
monocle3::plot_cells(cds,
genes=top.bulk.hubs$symbol,
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F) #  rasterize = T (for super high-res figures)
gene_module_df = monocle3::find_gene_modules(cds[var.genes[1:1000], ],
resolution=1e-2,
reduction_method = "UMAP",
max_components = 3,
cores=nCores,
random_seed = 2019)
data.table::fwrite(gene_module_df, "./Results/sc.modules_by_gene.txt", sep="\t")
createDT(gene_module_df)
# Create pheatmap table
cell_group_df = tibble::tibble(cell=row.names(SummarizedExperiment::colData(cds)),
cell_group=monocle3::clusters(cds)[colnames(cds)])
agg_mat = monocle3::aggregate_gene_expression(cds, gene_module_df, cell_group_df)
row.names(agg_mat) = stringr::str_c("Module ", row.names(agg_mat))
colnames(agg_mat) = stringr::str_c("Cluster ", colnames(agg_mat))
data.table::fwrite(data.table::data.table(data.frame(as.matrix(agg_mat)), keep.rownames = "Module"),
"./Results/sc.modules_by_cluster.txt", sep="\t" )
# Plot
pheatmap::pheatmap(agg_mat, cluster_rows=TRUE, cluster_cols=TRUE,
scale="column", clustering_method="ward.D2",
fontsize=6)
cell_group_df
agg_mat
gene_module_df
agg_mat
agg_mat
module_cluster_exp <- data.frame(as.matrix(agg_mat))
data.table::fwrite(data.table::data.table(module_cluster_exp, keep.rownames = "Module"),
"./Results/sc.modules_by_cluster.txt", sep="\t" )
# Plot
pheatmap::pheatmap(agg_mat, cluster_rows=TRUE, cluster_cols=TRUE,
scale="column", clustering_method="ward.D2",
fontsize=6)
# Plot
pheatmap::pheatmap(agg_mat, cluster_rows=T, cluster_cols=F,
scale="column", clustering_method="ward.D2",
fontsize=6)
set.seed(2019)
gene_module_df = monocle3::find_gene_modules(cds[var.genes[1:1000], ],
resolution=1e-2,
reduction_method = "UMAP",
max_components = 3,
cores=nCores,
random_seed = 2019)
data.table::fwrite(gene_module_df, "./Results/sc.modules_by_gene.txt", sep="\t")
createDT(gene_module_df)
# Create pheatmap table
cell_group_df = tibble::tibble(cell=row.names(SummarizedExperiment::colData(cds)),
cell_group=monocle3::clusters(cds)[colnames(cds)])
agg_mat = monocle3::aggregate_gene_expression(cds, gene_module_df, cell_group_df)
row.names(agg_mat) = stringr::str_c("Module ", row.names(agg_mat))
colnames(agg_mat) = stringr::str_c("Cluster ", colnames(agg_mat))
module_cluster_exp <- data.frame(as.matrix(agg_mat))
data.table::fwrite(data.table::data.table(module_cluster_exp, keep.rownames = "Module"),
"./Results/sc.modules_by_cluster.txt", sep="\t" )
# Plot
pheatmap::pheatmap(agg_mat, cluster_rows=T, cluster_cols=F,
scale="column", clustering_method="ward.D2",
fontsize=6)
gene_module_df = monocle3::find_gene_modules(cds[var.genes[1:1000], ],
resolution=1e-2,
reduction_method = "UMAP",
max_components = 3,
cores=nCores,
umap.fast_sgd = F, # Slower but determinstic results
random_seed = 2019)
# Create pheatmap table
cell_group_df = tibble::tibble(cell=row.names(SummarizedExperiment::colData(cds)),
cell_group=monocle3::clusters(cds)[colnames(cds)])
agg_mat = monocle3::aggregate_gene_expression(cds, gene_module_df, cell_group_df)
row.names(agg_mat) = stringr::str_c("Module ", row.names(agg_mat))
colnames(agg_mat) = stringr::str_c("Cluster ", colnames(agg_mat))
module_cluster_exp <- data.frame(as.matrix(agg_mat))
data.table::fwrite(data.table::data.table(module_cluster_exp, keep.rownames = "Module"),
"./Results/sc.modules_by_cluster.txt", sep="\t" )
# Plot
pheatmap::pheatmap(agg_mat, cluster_rows=T, cluster_cols=F,
scale="column", clustering_method="ward.D2",
fontsize=6)
module_cluster_exp
t.test()
module_cluster_exp
```
## 3D Scatter
```{r Gene Modules - 3D Scatter}
# plotly R documentation: https://plot.ly/r/
# rgl::plot3d(x = gene_module_df$dim_1, y=gene_module_df$dim_2, z=gene_module_df$dim_3, )
p.3d <- plotly::plot_ly(gene_module_df,
x = ~dim_1, y = ~dim_2, z = ~dim_3,
color = ~module,
text = ~paste("Gene:",id),
colors = "Dark2",
# alpha = .7,
size = 5
) %>%
plotly::layout(title = 'scRNA-seq Gene Co-expression Modules')  %>%
plotly::add_markers() %>%
plotly::layout(scene = list(xaxis = list(title = 'UMAP 1'),
yaxis = list(title = 'UMAP 2'),
zaxis = list(title = 'UMAP 3')))
htmltools::tagList(setNames(list(p.3d), NULL))
# module_cluster_exp
# plotly R documentation: https://plot.ly/r/
# rgl::plot3d(x = gene_module_df$dim_1, y=gene_module_df$dim_2, z=gene_module_df$dim_3, )
p.3d <- plotly::plot_ly(gene_module_df,
x = ~dim_1, y = ~dim_2, z = ~dim_3,
color = ~module,
text = ~paste("Gene:",id),
colors = "Dark2",
# alpha = .7,
size = 5
) %>%
plotly::layout(title = 'scRNA-seq Gene Co-expression Modules')  %>%
plotly::add_markers() %>%
plotly::layout(scene = list(xaxis = list(title = 'UMAP 1'),
yaxis = list(title = 'UMAP 2'),
zaxis = list(title = 'UMAP 3')))
htmltools::tagList(setNames(list(p.3d), NULL))
set.seed(2019)
gene_module_df = monocle3::find_gene_modules(cds[var.genes[1:1000], ],
resolution=1e-2,
reduction_method = "UMAP",
max_components = 3,
cores=nCores,
umap.fast_sgd = F, # Slower but determinstic results
random_seed = 2019)
data.table::fwrite(gene_module_df, "./Results/sc.modules_by_gene.txt", sep="\t")
createDT(gene_module_df)
# Create pheatmap table
cell_group_df = tibble::tibble(cell=row.names(SummarizedExperiment::colData(cds)),
cell_group=monocle3::clusters(cds)[colnames(cds)])
agg_mat = monocle3::aggregate_gene_expression(cds, gene_module_df, cell_group_df)
row.names(agg_mat) = stringr::str_c("Module ", row.names(agg_mat))
colnames(agg_mat) = stringr::str_c("Cluster ", colnames(agg_mat))
module_cluster_exp <- data.frame(as.matrix(agg_mat))
data.table::fwrite(data.table::data.table(module_cluster_exp, keep.rownames = "Module"),
"./Results/sc.modules_by_cluster.txt", sep="\t" )
# Plot
pheatmap::pheatmap(agg_mat, cluster_rows=T, cluster_cols=F,
scale="column", clustering_method="ward.D2",
fontsize=6)
set.seed(2019)
gene_module_df = monocle3::find_gene_modules(cds[var.genes[1:1000], ],
# resolution=1e-2,
reduction_method = "UMAP",
max_components = 3,
cores=nCores,
umap.fast_sgd = F, # Slower but determinstic results
random_seed = 2019)
data.table::fwrite(gene_module_df, "./Results/sc.modules_by_gene.txt", sep="\t")
createDT(gene_module_df)
gene_module_df
# Create pheatmap table
cell_group_df = tibble::tibble(cell=row.names(SummarizedExperiment::colData(cds)),
cell_group=monocle3::clusters(cds)[colnames(cds)])
agg_mat = monocle3::aggregate_gene_expression(cds, gene_module_df, cell_group_df)
row.names(agg_mat) = stringr::str_c("Module ", row.names(agg_mat))
colnames(agg_mat) = stringr::str_c("Cluster ", colnames(agg_mat))
module_cluster_exp <- data.frame(as.matrix(agg_mat))
data.table::fwrite(data.table::data.table(module_cluster_exp, keep.rownames = "Module"),
"./Results/sc.modules_by_cluster.txt", sep="\t" )
# Plot
pheatmap::pheatmap(agg_mat, cluster_rows=T, cluster_cols=F,
scale="column", clustering_method="ward.D2",
fontsize=6)
# plotly R documentation: https://plot.ly/r/
# rgl::plot3d(x = gene_module_df$dim_1, y=gene_module_df$dim_2, z=gene_module_df$dim_3, )
p.3d <- plotly::plot_ly(gene_module_df,
x = ~dim_1, y = ~dim_2, z = ~dim_3,
color = ~module,
text = ~paste("Gene:",id),
colors = "Dark2",
# alpha = .7,
size = 5
) %>%
plotly::layout(title = 'scRNA-seq Gene Co-expression Modules')  %>%
plotly::add_markers() %>%
plotly::layout(scene = list(xaxis = list(title = 'UMAP 1'),
yaxis = list(title = 'UMAP 2'),
zaxis = list(title = 'UMAP 3')))
htmltools::tagList(setNames(list(p.3d), NULL))
monocle3::plot_cells(cds,
genes=gene_module_df,
group_cells_by="cluster",
color_cells_by="cluster",
show_trajectory_graph=F) #  rasterize = T (for super high-res figures)
# Prepare bulk modules
bulk.modules <- data.table::fread("./Data/Katia_Modules/Gene_modules.tbl.txt")
# bulk.modules$ensembl.id <- gsub("\\.*","", bulk.modules$gene_ids)
# ensembl.dict <- ENSG_to_HGNC(ensembl_ids = unique(bulk.modules$gene_ids),
#                              reference_genome="grch38",
#                              input = "ensembl_transcript_id")
if(!file.exists("./Data/Katia_Modules/ens.geneid.gencode.v30")){
system("scp schilb03@chimera.hpc.mssm.edu:/sc/hydra/projects/pd-omics/GRCH38.p12/ens.geneid.gencode.v30 ./Data/Katia_Modules")
}
ensembl.dt <- data.table::fread("./Data/Katia_Modules/ens.geneid.gencode.v30")
ensembl.dict <- setNames(ensembl.dt$GeneSymbol, ensembl.dt$gene_id)
bulk.modules$gene.symbol <- ensembl.dict[bulk.modules$gene_ids]
bulk.modules <- bulk.modules %>% dplyr::rename(module=moduleColors)
createDT(bulk.modules)
# Prepare sc modules
sc.modules <- data.table::fread("./Results/sc.modules_by_gene.txt") %>% dplyr::rename(gene.symbol=id)
createDT(sc.modules)
bulk.modules
genomeSize <- length(union(unique(bulk.modules$gene.symbol), monocle3::fData(cds)$gene_short_name))
MOD.dt <- module_vs_module_enrichment(mod.df1 = bulk.modules,
mod.df2 = sc.modules,
genomeSize = genomeSize,
verbose = F)
createDT(MOD.dt)
# library(heatmaply)
mod.cast <- reshape2::acast(MOD.dt,
Module1.name~Module2.name,
value.var="Jaccard.index")
hm <- heatmaply::heatmaply(mod.cast,
k_row = 5, k_col = 5,
height = 10,
column_text_angle = 0,
xlab = "scRNA-seq Louvain Modules",
ylab = "bulk RNA-seq WGCNA Modules",
cexRow = .7,
key.title = "Jaccard Index") # file = "module-module.heatmap.html"
# shiny::includeHTML("module-module.heatmap.html")
htmltools::tagList(setNames(list(hm), NULL))
module_vs_module_enrichment <- function(mod.df1,
mod.df2,
genomeSize,
verbose=T,
save_file="./Results/bulk.modules_vs_sc.modules.txt"
){
mod1.unique <- length(unique(mod.df1$module))
mod2.unique <- length(unique(mod.df2$module))
print(paste("mod.df1 contains", mod1.unique, "unique modules."))
print(paste("mod.df2 contains", mod2.unique, "unique modules."))
print(paste("Conducting enrichment tests on",mod1.unique*mod2.unique,"module-module combinations..."))
start.mod <- Sys.time()
# Level 1
MOD.dt <-lapply(unique(mod.df1$module), function(MOD){
sub.df1 <- subset(mod.df1, module==MOD)
# Level 2
mod.dt <- lapply(unique(mod.df2$module), function(mod, MOD.=MOD){
if(verbose){print(paste(MOD.,"(mod.df1) vs.",mod,"(mod.df2)"))}
sub.df2 <- subset(mod.df2, module==mod)
res.list <- report_overlap(genomeSize = genomeSize,
list1 = sub.df1$gene.symbol,
list2 = sub.df2$gene.symbol,
verbose = F)
go.obj <- res.list$go.obj
# overlappingGenes <- res.list$overlappingGenes
summary.dt <- data.table::data.table(Module1.name = MOD,
Module2.name = mod,
Module1.size = length(go.obj@listA),
Module2.size = length(go.obj@listB),
Module1.proportion.overlap = round(length(go.obj@intersection) / length(go.obj@listA),3),
Module2.proportion.overlap = round(length(go.obj@intersection) / length(go.obj@listB),3),
intersection.size = length(go.obj@intersection),
union.size = length(go.obj@union),
genome.size = go.obj@genome.size,
p.value = go.obj@pval,
odds.ratio = go.obj@odds.ratio,
Jaccard.index = go.obj@Jaccard)
}) %>% data.table::rbindlist()
}) %>% data.table::rbindlist()
MOD.dt <- MOD.dt %>% dplyr::mutate(FDR=p.adjust(p.value, method="fdr"),
Bonferroni=p.adjust(p.value, method="bonferroni")) %>% arrange(FDR)
MOD.sig <- MOD.dt %>% subset(FDR<=0.05)
end.mod <- Sys.time()
print(paste(nrow(MOD.dt),"enrichment tests conducted in", round(end.mod-start.mod,2),"seconds."))
print(paste(nrow(MOD.sig),"enrichment tests were significant (at FDR ≤ 0.05)."))
# MOdule conservation
mod.df1.convervation <- length(unique(MOD.sig$Module1.name)) / length(unique(MOD.dt$Module1.name))
mod.df2.convervation <- length(unique(MOD.sig$Module2.name)) / length(unique(MOD.dt$Module2.name))
print(paste0(round(mod.df1.convervation*100,2),"% of mod.df1 modules showed enrichment for a mod.df2 module."))
print(paste0(round(mod.df2.convervation*100,2),"% of mod.df2 modules showed enrichment for a mod.df1 module."))
if(save_file!=F){
data.table::fwrite(MOD.dt, save_file)
}
return(MOD.dt)
}
"CSF2" %in% fData(cds)
"CSF2" %in% monocle3::fData(cds)
monocle3::fData(cds)
"CSF2" %in% monocle3::fData(cds)$gene_short_name
"GM-CSF" %in% monocle3::fData(cds)$gene_short_name
"GM-CSF" %like% monocle3::fData(cds)$gene_short_name
library(dplyr)
"GM-CSF" %like% monocle3::fData(cds)$gene_short_name
"GM-CSF" %LIKE% monocle3::fData(cds)$gene_short_name
"IL4" %like% monocle3::fData(cds)$gene_short_name
"IL4" %in% monocle3::fData(cds)$gene_short_name
"IL-4" %in% monocle3::fData(cds)$gene_short_name
monocle3::fData(cds)$gene_short_name
