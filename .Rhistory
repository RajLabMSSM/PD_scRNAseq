source(file.path(root,"general_functions.R"))
library(enrichR) # BiocManager::install("enrichR") # devtools::install_github("wjawaid/enrichR")
library(fgsea)
library(reactome.db) # BiocManager::install("reactome.db")
library(dplyr)
library(ggplot2)
load("./Data/monocle3_CDS.RData")
cds
# DEGs
dge.dx <- read.csv("Results/across_PD.vs.Ctrl.csv", row.names = 1)
dge.clust <- read.csv("Results/across_Clust1.vs.Clust2.csv")
AD_overlap <- report_overlap(genomeSize=dim(cds)[1],
list1=subset(dge.clust, q_value<=0.05)$gene_short_name,
list2=ADgenes$Gene)
overlap_expression_plot(DEG_table,
geneList = AD_overlap,
title="Overlapping AD-associated Genes / Cluster DGEs")
PD_overlap <- report_overlap(genomeSize=dim(cds)[1],
list1=subset(dge.clust, q_value<=0.05)$gene_short_name,
list2=PDgenes$Gene)
overlap_expression_plot(DEG_table,
geneList = PD_overlap,
title="Overlapping PD-associated Genes / Cluster DGEs")
View(DEG_table)
exampleRanks
dge.clust
volcano_plot <- function(dge, caption="", topN_labeled=6){
# dge <- res
# Replace zeros with smallest representable number in R to prevent turning into Infs
dge[dge$q_value==0, "q_value"] <- .Machine$double.xmin
dge$sig<-  ifelse( dge$q_value<0.05 & abs(dge$estimate)<=1.5, "q_value<0.05",
ifelse( dge$q_value<0.05  & abs(dge$estimate)>=1.5, "q_value<0.05 & estimate>=1.5",
"q_value>0.05"
))
dge <- arrange(dge, desc(sig))
neg.log.pvals <- -log10(dge$q_value)
maximum <- max(neg.log.pvals)
yMax  <- maximum + maximum/8 #ifelse(max(-log10(dge$p_val_adj))<45, 50, max(-log10(dge$p_val_adj)) + 10)
vol <- ggplot(data=dge, aes(x=estimate, y= -log10(q_value))) +
geom_point(alpha=0.5, size=3, aes(col=sig)) +
scale_color_manual(values=list("q_value<0.05"="turquoise3",
"q_value<0.05 & estimate>=1.5"="purple",
"q_value>0.05" = "darkgray")) +
theme(legend.position = "none") +
theme_bw() +
xlab(expression(paste("Estimate"))) +
ylab(expression(paste(-log^{10},"(q_value)"))) +
## ggrepl labels
geom_text_repel(data=arrange(dge,  q_value, desc(estimate))[1:topN_labeled,],
# filter(dge, avg_logFC>=1.5)[1:10,],
aes(label=gene_short_name),  color="black", alpha=.5,
segment.color="black", segment.alpha=.5, seed = 2019) +
# Lines
geom_vline(xintercept= -1.5,lty=4, lwd=.3, alpha=.5) +
geom_vline(xintercept= 1.5,lty=4, lwd=.3, alpha=.5) +
geom_hline(yintercept= -log10(0.05),lty=4, lwd=.3, alpha=.5) +
ggtitle(caption) +
# xlim(-2,2) +
ylim(0, yMax) +
theme(plot.title = element_text(hjust = 0.5))
return(vol)
}
dge
volcano_plot <- function(dge, caption="", topN_labeled=6){
# dge <- res
# Replace zeros with smallest representable number in R to prevent turning into Infs
dge[dge$q_value==0, "q_value"] <- .Machine$double.xmin
dge$sig<-  ifelse( dge$q_value<0.05 & abs(dge$estimate)<=1.5, "q_value<0.05",
ifelse( dge$q_value<0.05  & abs(dge$estimate)>=1.5, "q_value<0.05 & estimate>=1.5",
"q_value>0.05"
))
dge <- arrange(dge, desc(sig))
# Y max
neg.log.pvals <- -log10(dge$q_value)
yMaximum <- max(neg.log.pvals)
yMax  <- yMaximum + yMaximum/8 #ifelse(max(-log10(dge$p_val_adj))<45, 50, max(-log10(dge$p_val_adj)) + 10)
# X max
xMaximum <- max(abs(dge$estimate))
xMax <- xMaximum + xMaximum/8
vol <- ggplot(data=dge, aes(x=estimate, y= -log10(q_value))) +
geom_point(alpha=0.5, size=3, aes(col=sig)) +
scale_color_manual(values=list("q_value<0.05"="turquoise3",
"q_value<0.05 & estimate>=1.5"="purple",
"q_value>0.05" = "darkgray")) +
theme(legend.position = "none") +
theme_bw() +
xlab(expression(paste("Estimate"))) +
ylab(expression(paste(-log^{10},"(q_value)"))) +
## ggrepl labels
geom_text_repel(data=arrange(dge,  q_value, desc(estimate))[1:topN_labeled,],
# filter(dge, avg_logFC>=1.5)[1:10,],
aes(label=gene_short_name),  color="black", alpha=.5,
segment.color="black", segment.alpha=.5, seed = 2019) +
# Lines
geom_vline(xintercept= -1.5,lty=4, lwd=.3, alpha=.5) +
geom_vline(xintercept= 1.5,lty=4, lwd=.3, alpha=.5) +
geom_hline(yintercept= -log10(0.05),lty=4, lwd=.3, alpha=.5) +
ggtitle(caption) +
xlim(-xMax, xMax) +
ylim(0, yMax) +
theme(plot.title = element_text(hjust = 0.5))
return(vol)
}
start_time <- Sys.time()
#### #### Load Objects & Functions #### ####
######################################################
# Import functions
root = "./"
source(file.path(root,"MAIN.R"))
import_parameters(params)
######################################################
#### #### PACKAGES #### ####
######################################################
library(monocle3)
paste("monocle3", packageVersion("monocle3"))
library(cowplot)
library(ggplot2)
library(dplyr)
library(data.table)
library(readxl)
library(reshape2)
library(ggrepel)
library(plotly)
library(GeneOverlap) # BiocManager::install("GeneOverlap")
######################################################
# Exporting 3D plots
knitr::knit_hooks$set(webgl = rgl::hook_webgl)
dge_limit <- F # 100
nCores <- 4#parallel::detectCores()
set.seed(2019)
# Load preprocessed data
load("./Data/monocle3_CDS.RData")
cds
dge.dx <- monocle3_DGE(cds_DGE = cds_DGE,
variable = "dx",
nCores = nCores,
expression_family = expression_family,
plot_volcano = T,
results_path = "./Results/across_PD.vs.Ctrl.csv")
createDT(head(dge.dx, DT_max))
start_time <- Sys.time()
#### #### Load Objects & Functions #### ####
######################################################
# Import functions
root = "./"
source(file.path(root,"MAIN.R"))
import_parameters(params)
######################################################
#### #### PACKAGES #### ####
######################################################
library(monocle3)
paste("monocle3", packageVersion("monocle3"))
library(cowplot)
library(ggplot2)
library(dplyr)
library(data.table)
library(readxl)
library(reshape2)
library(ggrepel)
library(plotly)
library(GeneOverlap) # BiocManager::install("GeneOverlap")
######################################################
# Exporting 3D plots
knitr::knit_hooks$set(webgl = rgl::hook_webgl)
dge_limit <- F # 100
nCores <- 4#parallel::detectCores()
set.seed(2019)
# Load preprocessed data
load("./Data/monocle3_CDS.RData")
cds
# DGE limiter
# dge_limit <- 10
if(dge_limit){
cds_DGE <- cds[var.genes[1:dge_limit],]
print(paste0("Testing only the top ",dge_limit," most variable genes in DGE analysis."))
} else{
cds_DGE <- cds
print(paste0("Testing all ",dim(cds)[1]," genes in DGE analysis."))
}
# DGE distribution type
expression_family <- "quasipoisson" # Recommended by Monocle3 authors for most cases.
within_clusters <- c(1,2)
DT_max <- 1000
dge.dx <- monocle3_DGE(cds_DGE = cds_DGE,
variable = "dx",
nCores = nCores,
expression_family = expression_family,
plot_volcano = T,
results_path = "./Results/across_PD.vs.Ctrl.csv")
createDT(head(dge.dx, DT_max))
# X max
dge_sig <- subset(dge, q_value<0.05)
volcano_plot <- function(dge, caption="", topN_labeled=6){
# dge <- res
# Replace zeros with smallest representable number in R to prevent turning into Infs
dge[dge$q_value==0, "q_value"] <- .Machine$double.xmin
dge$sig<-  ifelse( dge$q_value<0.05 & abs(dge$estimate)<=1.5, "q_value<0.05",
ifelse( dge$q_value<0.05  & abs(dge$estimate)>=1.5, "q_value<0.05 & estimate>=1.5",
"q_value>0.05"
))
dge <- arrange(dge, desc(sig))
# Y max
neg.log.pvals <- -log10(dge$q_value)
yMaximum <- max(neg.log.pvals)
yMax  <- yMaximum + yMaximum/8 #ifelse(max(-log10(dge$p_val_adj))<45, 50, max(-log10(dge$p_val_adj)) + 10)
# X max
dge_sig <- subset(dge, q_value<0.05)
xMaximum <- max(abs(dge_sig$estimate))
xMax <- xMaximum + xMaximum/8
vol <- ggplot(data=dge, aes(x=estimate, y= -log10(q_value))) +
geom_point(alpha=0.5, size=3, aes(col=sig)) +
scale_color_manual(values=list("q_value<0.05"="turquoise3",
"q_value<0.05 & estimate>=1.5"="purple",
"q_value>0.05" = "darkgray")) +
theme(legend.position = "none") +
theme_bw() +
xlab(expression(paste("Estimate"))) +
ylab(expression(paste(-log^{10},"(q_value)"))) +
## ggrepl labels
geom_text_repel(data=arrange(dge,  q_value, desc(estimate))[1:topN_labeled,],
# filter(dge, avg_logFC>=1.5)[1:10,],
aes(label=gene_short_name),  color="black", alpha=.5,
segment.color="black", segment.alpha=.5, seed = 2019) +
# Lines
geom_vline(xintercept= -1.5,lty=4, lwd=.3, alpha=.5) +
geom_vline(xintercept= 1.5,lty=4, lwd=.3, alpha=.5) +
geom_hline(yintercept= -log10(0.05),lty=4, lwd=.3, alpha=.5) +
ggtitle(caption) +
xlim(-xMax, xMax) +
ylim(0, yMax) +
theme(plot.title = element_text(hjust = 0.5))
return(vol)
}
dge.dx <- monocle3_DGE(cds_DGE = cds_DGE,
variable = "dx",
nCores = nCores,
expression_family = expression_family,
plot_volcano = T,
results_path = "./Results/across_PD.vs.Ctrl.csv")
createDT(head(dge.dx, DT_max))
top_cluster_markers <- function(cds_DGE,
cluster_list=c(1,2),
genes_to_test_per_group=100,
save_path= "./Results/cluster_markers.csv",
verbose=F){
# Subset clusters
cds_clusts <- cds_DGE[,(pData(cds_DGE)$Cluster %in% cluster_list)]
# Test
marker_test_res = monocle3::top_markers(cds_clusts,
group_cells_by="cluster",
genes_to_test_per_group = genes_to_test_per_group,
cores=nCores,
verbose=verbose)
# Sort
marker_test_res <- marker_test_res %>% arrange(desc(fraction_expressing), marker_test_q_value, desc(specificity), desc(pseudo_R2))
# Save
if(save_path!=F){
data.table::fwrite(marker_test_res, save_path)
}
# Filter
filtered_res <- marker_test_res %>%
filter(fraction_expressing >= 0.10 & marker_test_q_value <=0.05) %>%
group_by(cell_group) %>% arrange(desc(specificity), desc(pseudo_R2))
# createDT_html(filtered_res) %>% print()
# Plot
top_specific_markers <-filtered_res$gene_id[1:min(c(10,nrow(filtered_res)))] %>% unique()
print(paste("Plotting the top",length(top_specific_markers), "specific markers."))
monocle3::plot_cells(cds_DGE,
genes = top_specific_markers,
show_trajectory_graph = F)
return(marker_test_res)
}
pathways <- reactomePathways(names(exampleRanks))
pathways
fgseaRes <- fgsea(pathways, exampleRanks, nperm=1000, maxSize=500)
head(fgseaRes)
# Reactome
geneSet <- setNames(dge.clust$normalized_effect, nm = dge.clust$gene_short_name)
geneSet
pathways <- reactomePathways(geneSet)
pathways <- reactomePathways(names(geneSet))
# Reactome
geneSet <- subset(dge.clust, q_value<0.05)$gene_short_name
geneSet
# Reactome
geneSet <- subset(dge.clust, q_value<0.05)$gene_short_name %>% as.character()
geneSet
pathways <- reactomePathways(geneSet)
GSEABase::AnnoOrEntrezIdentifier(geneSet)
GSEABase::GeneSet(geneSet)
GSEABase::GeneSet(geneSet, setIdentifier = "GeneList")
GSEABase::GeneSet(geneSet, "GeneList")
# Reactome
geneSet <- subset(dge.clust, q_value<0.05)$gene_short_name %>% as.character() %>% GSEABase::GeneSet()
GSEABase::AnnoOrEntrezIdentifier(geneSet)
geneSet
GSEABase::ENSEMBLIdentifier(geneSet)
# Reactome
geneSet <- subset(dge.clust, q_value<0.05)$gene_short_name %>% as.character()
GSEABase::ENSEMBLIdentifier(geneSet)
GSEABase::ENSEMBLIdentifier(annotation(geneSet))
GSEABase::ENSEMBLIdentifier(annotation(GSEABase::GeneSet(geneSet)
))
GSEABase::ENSEMBLIdentifier(annotation(GSEABase::GeneSet(geneSet)))
AD_overlap <- report_overlap(genomeSize=dim(cds)[1],
list1=subset(dge.dx, q_value<=0.05)$gene_short_name,
list2=ADgenes$Gene)
overlap_expression_plot(dge.dx,
geneList = AD_overlap,
title="Overlapping AD-associated Genes / dx DGEs")
AD_overlap <- report_overlap(genomeSize=dim(cds)[1],
list1=subset(dge.clust, q_value<=0.05)$gene_short_name,
list2=ADgenes$Gene)
overlap_expression_plot(dge.clust,
geneList = AD_overlap,
title="Overlapping AD-associated Genes / Cluster DGEs")
PD_overlap <- report_overlap(genomeSize=dim(cds)[1],
list1=subset(dge.dx, q_value<=0.05)$gene_short_name,
list2=PDgenes$Gene)
overlap_expression_plot(dge.dx,
geneList = PD_overlap,
title="Overlapping PD-associated Genes / dx DGEs")
PD_overlap <- report_overlap(genomeSize=dim(cds)[1],
list1=subset(dge.clust, q_value<=0.05)$gene_short_name,
list2=PDgenes$Gene)
overlap_expression_plot(dge.clust,
geneList = PD_overlap,
title="Overlapping PD-associated Genes / Cluster DGEs")
# Import functions
root = "./"
source(file.path(root,"MAIN.R"))
library(enrichR) # BiocManager::install("enrichR") # devtools::install_github("wjawaid/enrichR")
library(fgsea)
library(reactome.db) # BiocManager::install("reactome.db")
library(dplyr)
library(ggplot2)
load("./Data/monocle3_CDS.RData")
cds
AD_overlap <- report_overlap(genomeSize=dim(cds)[1],
list1=subset(dge.dx, q_value<=0.05)$gene_short_name,
list2=ADgenes$Gene)
overlap_expression_plot(dge.dx,
geneList = AD_overlap,
title="Overlapping AD-associated Genes / dx DGEs")
# Import functions
root = "./"
source(file.path(root,"MAIN.R"))
library(enrichR) # BiocManager::install("enrichR") # devtools::install_github("wjawaid/enrichR")
library(fgsea)
library(reactome.db) # BiocManager::install("reactome.db")
library(dplyr)
library(ggplot2)
load("./Data/monocle3_CDS.RData")
cds
install.packages("gprofiler")
install.packages("gProfileR")
library(gProfileR)
gProfileR::gorth(query, source_organism = "hsapiens",
target_organism = "mmusculus", numeric_ns = "", mthreshold = Inf,
filter_na = TRUE)
# Import functions
root = "./"
source(file.path(root,"MAIN.R"))
library(enrichR) # BiocManager::install("enrichR") # devtools::install_github("wjawaid/enrichR")
library(fgsea)
library(reactome.db) # BiocManager::install("reactome.db")
library(gProfileR)
library(dplyr)
library(ggplot2)
load("./Data/monocle3_CDS.RData")
cds
# DEGs
dge.dx <- read.csv("Results/across_PD.vs.Ctrl.csv")
dge.clust <- read.csv("Results/across_Clust1.vs.Clust2.csv")
dge.dx.sigGenes <- subset(dge.dx, q_value<0.05)$gene_short_name
dge.dx.sigGenes
gProfileR::gorth(dge.dx.sigGenes,
source_organism = "hsapiens",
target_organism = "mmusculus",
numeric_ns = "",
mthreshold = Inf,
filter_na = TRUE)
gconvert(dge.dx.sigGenes,
organism = "hsapiens",
target = "ENSG",
numeric_ns = "",
mthreshold = Inf,
filter_na = TRUE)
query
query <- subset(dge.dx, q_value<0.05)$gene_short_name
gProfileR::gost(query,
organism = "hsapiens",
ordered_query = FALSE,
multi_query = FALSE,
significant = TRUE,
exclude_iea = TRUE,
measure_underrepresentation = FALSE,
evcodes = FALSE,
user_threshold = 0.05,
correction_method = c("g_SCS", "bonferroni","fdr", "false_discovery_rate", "gSCS", "analytical"),
domain_scope = c("annotated", "known"),
custom_bg = NULL,
numeric_ns = "",
sources = NULL)
?gost
?
gprofiler
gprof.rs <-gProfileR::gprofiler(query,
organism = "hsapiens",
sort_by_structure = T,
ordered_query = F,
significant = T,
exclude_iea = F,
underrep = F,
evcodes = F,
region_query = F,
max_p_value = 1,
min_set_size = 0,
max_set_size = 0,
min_isect_size = 0,
correction_method = "analytical",
hier_filtering = "none",
domain_size = "annotated",
custom_bg = "",
numeric_ns = "",
png_fn = NULL,
include_graph = F,
src_filter = NULL)
query
gprof.rs <-gProfileR::gprofiler(query = query,
organism = "hsapiens",
sort_by_structure = T,
ordered_query = F,
significant = T,
exclude_iea = F,
underrep = F,
evcodes = F,
region_query = F,
max_p_value = 1,
min_set_size = 0,
max_set_size = 0,
min_isect_size = 0,
correction_method = "analytical",
hier_filtering = "none",
domain_size = "annotated",
custom_bg = "",
numeric_ns = "",
png_fn = NULL,
include_graph = F,
src_filter = NULL)
gprof.rs
query
query
query <- subset(dge.dx, q_value<0.05)$gene_short_name %>% as.character()
gprof.rs <-gProfileR::gprofiler(query = query,
organism = "hsapiens")
gprof.rs
gprof.rs <-gProfileR::gprofiler(query = query,
organism = "hsapiens",
include_graph=T)
gprof.rs
gprof.rs <-gProfileR::gprofiler(query = query,
organism = "hsapiens",
include_graph=F, png_fn=T)
gprof.rs
gprof.rs <-gProfileR::gprofiler(query = query,
organism = "hsapiens",
include_graph=F,
png_fn="./gprofiler.png")
install.packages("gprofiler2")
library(gprofiler2)
remove.packages("reactome.db")
# Import functions
root = "./"
source(file.path(root,"MAIN.R"))
# library(enrichR) # BiocManager::install("enrichR") # devtools::install_github("wjawaid/enrichR")
# library(fgsea)
library(gprofiler2)
library(dplyr)
library(ggplot2)
load("./Data/monocle3_CDS.RData")
cds
gprofiler2::gconvert(query,
organism = "hsapiens",
target = "ENSG",
numeric_ns = "",
mthreshold = Inf,
filter_na = TRUE)
gene.orthology <- gprofiler2::gorth(query,
source_organism = "hsapiens",
target_organism = "mmusculus",
numeric_ns = "",
mthreshold = Inf,
filter_na = TRUE)
gprof.rs <-gprofiler2::gost(query = query,
organism = "hsapiens",
include_graph=F,
png_fn="./gprofiler.png")
gprof.rs <-gprofiler2::gost(query = query,
organism = "hsapiens")
gprof.rs
gprof.rs$result
gprofiler2::gostplot(gprof.rs)
gostres <- gprofiler2::gost(query = query, organism = "hsapiens")
query <- subset(dge.dx, q_value<0.05)$gene_short_name %>% as.character()
gostres <- gprofiler2::gost(query = query, organism = "hsapiens")
gprofiler2::gostplot(gostres)
createDT(gprof.rs$result)
query <- subset(dge.clust, q_value<0.05)$gene_short_name %>% as.character()
gostres <- gprofiler2::gost(query = query, organism = "hsapiens")
gprofiler2::gostplot(gostres)
createDT(gprof.rs$result)
