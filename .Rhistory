data.table::fwrite(gene.lists, "./Results/curated_modules//curatedModules_genelists.tsv",sep="\t")
cds <- monocle3::preprocess_cds(cds,
num_dim = 30, #100 by default
return.only.var.genes=F,
use_genes = var.genes,
residual_model_formula_str = "~ nUMI + percent.mito")
monocle3::plot_pc_variance_explained(cds)
# c("UMAP", "tSNE", "PCA", "LSI")
cds <- monocle3::reduce_dimension(cds, reduction_method = "UMAP",
max_components = 3,
# umap.fast_sgd = T,
# cores=nCores
)
monocle3::plot_cells(cds, color_cells_by = "dx")
cds <- monocle3::preprocess_cds(cds,
num_dim = 30, #100 by default
return.only.var.genes=F,
# use_genes = var.genes,
residual_model_formula_str = "~ nUMI + percent.mito")
# c("UMAP", "tSNE", "PCA", "LSI")
cds <- monocle3::reduce_dimension(cds, reduction_method = "UMAP",
max_components = 3,
# umap.fast_sgd = T,
# cores=nCores
)
monocle3::plot_cells(cds, color_cells_by = "dx")
cds <- monocle3::preprocess_cds(cds,
# num_dim = 30, #100 by default
return.only.var.genes=F,
# use_genes = var.genes,
residual_model_formula_str = "~ nUMI + percent.mito")
monocle3::plot_pc_variance_explained(cds)
# c("UMAP", "tSNE", "PCA", "LSI")
cds <- monocle3::reduce_dimension(cds, reduction_method = "UMAP",
max_components = 3,
# umap.fast_sgd = T,
# cores=nCores
)
monocle3::plot_cells(cds, color_cells_by = "dx")
cds <- monocle3::preprocess_cds(cds,
num_dim = 30, #100 by default
return.only.var.genes=F,
use_genes = var.genes,
residual_model_formula_str = "~ nUMI + percent.mito")
monocle3::plot_pc_variance_explained(cds)
# c("UMAP", "tSNE", "PCA", "LSI")
cds <- monocle3::reduce_dimension(cds,
preprocess_method = "PCA",
reduction_method = "UMAP",
max_components = 3,
# umap.fast_sgd = T,
# cores=nCores
)
monocle3::plot_cells(cds, color_cells_by = "dx")
monocle3::plot_cells(cds, color_cells_by = "dx", genes = c("CD14","FCGR3A"))
# Method 1
# variable.genes <- cds@preprocess_aux@listData$gene_loadings[,1:3] %>%
#   abs() %>% rowSums() %>% base::sort(decreasing = T)
# head(variable.genes)
# Seurat v2 function
# varDAT <- Seurat::FindVariableGenes(object = protDAT,
#                              mean.function = ExpMean,
#                              dispersion.function = LogVMR,
#                              selection.method ="dispersion", do.plot = T,
#                              top.genes = 2000)
# var.genes <- varDAT@var.genes
# Seurat v3 function
# protNEW <- UpdateSeuratObject(protDAT)
# varDAT <- Seurat:::FindVariableFeatures(object = protNEW,
#                                         selection.method = "vst",
#                                         mean.function = "FastExpMean",
#                                         dispersion.function = "FastLogVMR",
#                                         nfeatures = 2000)
# var.genes <- varDAT@assays$RNA@var.features
# head(var.genes)
#
# Using only monocle3
length(unique(row.names(cds@preprocess_aux$gene_loadings[,1:10])))
var.genes <- names(sort(rowSums(abs(cds@preprocess_aux$gene_loadings[,1:10]), na.rm = T), T))#[1:2000]
cds <- monocle3::cluster_cells(cds,
resolution = 1e-4,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
clustering_genes = var.genes
)
# Add cluster info to metadata (for easier DGE analysis)
pData(cds)$Cluster <- monocle3::clusters(cds)
pData(cds)$Partition <- monocle3::partitions(cds)
# 3D plot
p3d <- plot_cells_3d(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p3d
# Save each cluster as a separate OBJ file that can later be
# imported into a 3D modeling platform (e.g. Blender, Meshlab) for more advanced visualization
## save_3D_clusters(cds)
p <- monocle3::plot_cells(cds, label_cell_groups=F, show_trajectory_graph = F)
p
cds <- monocle3::preprocess_cds(cds,
# num_dim = 30, #100 by default
return.only.var.genes=F,
use_genes = var.genes,
residual_model_formula_str = "~ nUMI + percent.mito")
length(v)
length(var.genes)
# c("UMAP", "tSNE", "PCA", "LSI")
cds <- monocle3::reduce_dimension(cds,
preprocess_method = "PCA",
reduction_method = "UMAP",
max_components = 3,
# umap.fast_sgd = T,
# cores=nCores
)
monocle3::plot_cells(cds, genes = c("CD14","FCGR3A"))
# Method 1
# variable.genes <- cds@preprocess_aux@listData$gene_loadings[,1:3] %>%
#   abs() %>% rowSums() %>% base::sort(decreasing = T)
# head(variable.genes)
# Seurat v2 function
# varDAT <- Seurat::FindVariableGenes(object = protDAT,
#                              mean.function = ExpMean,
#                              dispersion.function = LogVMR,
#                              selection.method ="dispersion", do.plot = T,
#                              top.genes = 2000)
# var.genes <- varDAT@var.genes
# Seurat v3 function
# protNEW <- UpdateSeuratObject(protDAT)
# varDAT <- Seurat:::FindVariableFeatures(object = protNEW,
#                                         selection.method = "vst",
#                                         mean.function = "FastExpMean",
#                                         dispersion.function = "FastLogVMR",
#                                         nfeatures = 2000)
# var.genes <- varDAT@assays$RNA@var.features
# head(var.genes)
#
# Using only monocle3
length(unique(row.names(cds@preprocess_aux$gene_loadings[,1:10])))
var.genes <- names(sort(rowSums(abs(cds@preprocess_aux$gene_loadings[,1:10]), na.rm = T), T))#[1:2000]
cds <- monocle3::cluster_cells(cds,
# resolution = 1e-4,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
clustering_genes = var.genes
)
# Add cluster info to metadata (for easier DGE analysis)
pData(cds)$Cluster <- monocle3::clusters(cds)
pData(cds)$Partition <- monocle3::partitions(cds)
# 3D plot
p3d <- plot_cells_3d(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p3d
cds <- monocle3::cluster_cells(cds,
resolution = 1e-4,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
clustering_genes = var.genes
)
cds <- monocle3::cluster_cells(cds,
resolution = 1e-4,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
clustering_genes = var.genes
)
# Add cluster info to metadata (for easier DGE analysis)
pData(cds)$Cluster <- monocle3::clusters(cds)
pData(cds)$Partition <- monocle3::partitions(cds)
# 3D plot
p3d <- plot_cells_3d(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p3d
# 3D plot
p3d <- plot_cells_3d(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p3d
p2d <- plot_cells(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p2d
cds <- monocle3::cluster_cells(cds,
resolution = 1e-4,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
# clustering_genes = var.genes
)
cds <- monocle3::cluster_cells(cds,
# resolution = 1e-4,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
# clustering_genes = var.genes
)
# Add cluster info to metadata (for easier DGE analysis)
pData(cds)$Cluster <- monocle3::clusters(cds)
pData(cds)$Partition <- monocle3::partitions(cds)
p2d <- plot_cells(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p2d
cds <- monocle3::cluster_cells(cds,
resolution = 1e-8,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
# clustering_genes = var.genes
)
cds <- monocle3::cluster_cells(cds,
resolution = 1e-8,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
# clustering_genes = var.genes
)
# Add cluster info to metadata (for easier DGE analysis)
pData(cds)$Cluster <- monocle3::clusters(cds)
pData(cds)$Partition <- monocle3::partitions(cds)
p2d <- plot_cells(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p2d <- plot_cells(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p2d
cds <- monocle3::cluster_cells(cds,
resolution = 1e-5,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
# clustering_genes = var.genes
)
# Add cluster info to metadata (for easier DGE analysis)
pData(cds)$Cluster <- monocle3::clusters(cds)
pData(cds)$Partition <- monocle3::partitions(cds)
p2d <- plot_cells(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p2d
cds <- monocle3::cluster_cells(cds,
resolution = 1e-4,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
# clustering_genes = var.genes
)
# Add cluster info to metadata (for easier DGE analysis)
pData(cds)$Cluster <- monocle3::clusters(cds)
pData(cds)$Partition <- monocle3::partitions(cds)
p2d <- plot_cells(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p2d
cds <- monocle3::cluster_cells(cds,
resolution = 5e-5,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
# clustering_genes = var.genes
)
cds <- monocle3::cluster_cells(cds,
resolution = 5e-5,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
# clustering_genes = var.genes
)
# Add cluster info to metadata (for easier DGE analysis)
pData(cds)$Cluster <- monocle3::clusters(cds)
pData(cds)$Partition <- monocle3::partitions(cds)
p2d <- plot_cells(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p2d
# 3D plot
p3d <- plot_cells_3d(cds, color_cells_by = "cluster", show_trajectory_graph = F)
# 3D plot
p3d <- plot_cells_3d(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p3d
cds <- monocle3::preprocess_cds(cds,
# num_dim = 30, #100 by default
return.only.var.genes=F,
use_genes = var.genes)
# residual_model_formula_str = "~ nUMI + percent.mito")
monocle3::plot_pc_variance_explained(cds)
# c("UMAP", "tSNE", "PCA", "LSI")
cds <- monocle3::reduce_dimension(cds,
preprocess_method = "PCA",
reduction_method = "UMAP",
max_components = 3,
# umap.fast_sgd = T,
# cores=nCores
)
monocle3::plot_cells(cds, genes = c("CD14","FCGR3A"))
cds <- monocle3::cluster_cells(cds,
resolution = 5e-5,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
# clustering_genes = var.genes
)
# Add cluster info to metadata (for easier DGE analysis)
pData(cds)$Cluster <- monocle3::clusters(cds)
pData(cds)$Partition <- monocle3::partitions(cds)
p2d <- plot_cells(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p2d
cds <- monocle3::cluster_cells(cds,
resolution = 9e-5,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
# clustering_genes = var.genes
)
# Add cluster info to metadata (for easier DGE analysis)
pData(cds)$Cluster <- monocle3::clusters(cds)
pData(cds)$Partition <- monocle3::partitions(cds)
p2d <- plot_cells(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p2d
cds <- monocle3::cluster_cells(cds,
resolution = 1e-5,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
# clustering_genes = var.genes
)
# Add cluster info to metadata (for easier DGE analysis)
pData(cds)$Cluster <- monocle3::clusters(cds)
pData(cds)$Partition <- monocle3::partitions(cds)
p2d <- plot_cells(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p2d <- plot_cells(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p2d
cds <- monocle3::cluster_cells(cds,
resolution = 2e-5,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
# clustering_genes = var.genes
)
cds <- monocle3::cluster_cells(cds,
resolution = 2e-5,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
# clustering_genes = var.genes
)
# Add cluster info to metadata (for easier DGE analysis)
pData(cds)$Cluster <- monocle3::clusters(cds)
pData(cds)$Partition <- monocle3::partitions(cds)
p2d <- plot_cells(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p2d
cds <- monocle3::cluster_cells(cds,
resolution = 2e-5,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
clustering_genes = var.genes
)
# Add cluster info to metadata (for easier DGE analysis)
pData(cds)$Cluster <- monocle3::clusters(cds)
pData(cds)$Partition <- monocle3::partitions(cds)
p2d <- plot_cells(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p2d <- plot_cells(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p2d
load(file.path(resultsPath, "3-11-2019/scRNAseq_results.RData"))
DAT
# load("./Data/seurat_object_add_HTO_ids.Rdata")
DAT <- Seurat::UpdateSeuratObject(DAT)
DAT@assays$RNA@var.features
DAT@assays$RNA@data
DAT
# DAT <- readRDS("./Data/processed_seurat_obj.RDS")
# Find variable genes
# DAT <- FindVariableFeatures(object = DAT,
#                             mean.function = ExpMean,
#                             dispersion.function = LogVMR,
#                             x.low.cutoff = 0.0125,
#                             x.high.cutoff = 3,
#                             y.cutoff = 0.5)
var.genes <- Seurat::VariableFeatures(object = DAT)
var.genes <- unique(c(var.genes, "CD14", "FCGR3A"))
biotypes <- get_biotypes(DAT)
proteins <- biotypes[biotypes$gene_biotype=="protein_coding",]$hgnc_symbol %>% droplevels()
cds <- seurat_to_monocle(seurat_object = DAT,
seurat_version = 3,
monocle_version = 3)
cds <- seurat_to_monocle(seurat_object = DAT,
seurat_version = 3,
monocle_version = 3)
cds <- cds[levels(proteins),]
cds <- monocle3::cluster_cells(cds,
resolution = 2e-5,#c(10^seq(-6,-1)), # Do NOT set to high number
reduction_method = "UMAP",
cores = nCores,
# clustering_genes = var.genes
)
# Add cluster info to metadata (for easier DGE analysis)
pData(cds)$Cluster <- monocle3::clusters(cds)
start_time <- Sys.time()
#### #### Load Objects & Functions #### ####
######################################################
# Import functions
root = "./"
source(file.path(root,"MAIN.R"))
import_parameters(params)
# load("Data/seurat_object_add_HTO_ids.Rdata")
load(file.path("Data", "monocle3_CDS.RData"))
######################################################
#### #### PACKAGES #### ####
######################################################
print("Written using: Seurat version* 2.3.4 2018-07-17")
# https://satijalab.org/seurat/install.html
# source("http://bit.ly/archived-seurat")
library(Seurat)
paste("Seurat", packageVersion("Seurat"))
# library(monocle) # BiocManager::install("monocle")
# paste("monocle", packageVersion("monocle"))
## WARNING! There's currently bugs in the Bioconductor installation of Monocle3, so install the dev version from GitHub instead (see https://github.com/cole-trapnell-lab/monocle3/issues/272)
library(monocle3); # devtools::install_github('cole-trapnell-lab/monocle3', ref="develop")
paste("monocle3", packageVersion("monocle3"))
# library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
# paste("garnett", packageVersion("garnett"))
library(cowplot)
library(ggplot2)
library(dplyr)
library(data.table)
library(readxl)
library(reshape2)
library(ggrepel)
library(plotly)
######################################################
# Exporting 3D plots
knitr::knit_hooks$set(webgl = rgl::hook_webgl)
dge_limit <- F # 100
nCores <- 4#parallel::detectCores()
set.seed(2019)
p2d <- plot_cells(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p2d
cds
start_time <- Sys.time()
#### #### Load Objects & Functions #### ####
######################################################
# Import functions
root = "./"
source(file.path(root,"MAIN.R"))
import_parameters(params)
######################################################
#### #### PACKAGES #### ####
######################################################
print("Written using: Seurat version* 2.3.4 2018-07-17")
# https://satijalab.org/seurat/install.html
# source("http://bit.ly/archived-seurat")
library(Seurat)
paste("Seurat", packageVersion("Seurat"))
# library(monocle) # BiocManager::install("monocle")
# paste("monocle", packageVersion("monocle"))
## WARNING! There's currently bugs in the Bioconductor installation of Monocle3, so install the dev version from GitHub instead (see https://github.com/cole-trapnell-lab/monocle3/issues/272)
library(monocle3); # devtools::install_github('cole-trapnell-lab/monocle3', ref="develop")
paste("monocle3", packageVersion("monocle3"))
# library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
# paste("garnett", packageVersion("garnett"))
library(cowplot)
library(ggplot2)
library(dplyr)
library(data.table)
library(readxl)
library(reshape2)
library(ggrepel)
library(plotly)
######################################################
# Exporting 3D plots
knitr::knit_hooks$set(webgl = rgl::hook_webgl)
dge_limit <- F # 100
nCores <- 4#parallel::detectCores()
set.seed(2019)
ggsave(plot = p2d, filename = "./Results/Monocle3/UMAP_clusters.pdf", dpi = 600)
p2d <- plot_cells(cds, color_cells_by = "cluster", show_trajectory_graph = F, group_label_size = 5)
p2d
p2d <- plot_cells(cds, color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5, cell_size = 2)
p2d
p2d <- plot_cells(cds, color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5, cell_size = 1)
p2d
p2d <- plot_cells(cds, color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5, cell_size = 1, alpha = .5)
p2d
p2d <- plot_cells(cds, color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5,
cell_size = .75, alpha = .5)
p2d
p2d
p2d <- plot_cells(cds, color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5,
cell_size = .75, alpha = .25)
p2d
p2d <- plot_cells(cds, color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5,
cell_size = .75, alpha = .25, rasterize = T)
p2d
p2d <- plot_cells(cds, color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5,
cell_size = .75, alpha = .25,
rasterize = F)
p2d
p2d <- plot_cells(cds, color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5,
cell_size = .75,
alpha = .35,
rasterize = T)
p2d
ggsave(plot = p2d, filename = "./Results/Monocle3/UMAP_clusters.pdf", dpi = 600)
ggsave(plot = p2d, filename = "./Results/Monocle3/UMAP1-2_clusters.pdf", dpi = 600)
p2d <- plot_cells(cds,
x = 4, y = 4,
color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5,
cell_size = .75,
alpha = .35,
rasterize = T)
p2d <- plot_cells(cds,
x = 3, y = 4,
color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5,
cell_size = .75,
alpha = .35,
rasterize = T)
p2d <- plot_cells(cds,
# x = 1, y = 1,
color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5,
cell_size = .75,
alpha = .5,
rasterize = T)
p2d
ggsave(plot = p2d, filename = "./Results/Monocle3/UMAP1-2_clusters.pdf", dpi = 600)
ggsave(plot = p2d, filename = "./Results/Monocle3/UMAP_clusters.pdf", dpi = 600)
