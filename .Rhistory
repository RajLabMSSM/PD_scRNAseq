library(ggrepel)
library(plotly)
######################################################
# Exporting 3D plots
knitr::knit_hooks$set(webgl = rgl::hook_webgl)
dge_limit <- F # 100
nCores <- 4#parallel::detectCores()
set.seed(2019)
p2d <- plot_cells(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p2d
cds
start_time <- Sys.time()
#### #### Load Objects & Functions #### ####
######################################################
# Import functions
root = "./"
source(file.path(root,"MAIN.R"))
import_parameters(params)
######################################################
#### #### PACKAGES #### ####
######################################################
print("Written using: Seurat version* 2.3.4 2018-07-17")
# https://satijalab.org/seurat/install.html
# source("http://bit.ly/archived-seurat")
library(Seurat)
paste("Seurat", packageVersion("Seurat"))
# library(monocle) # BiocManager::install("monocle")
# paste("monocle", packageVersion("monocle"))
## WARNING! There's currently bugs in the Bioconductor installation of Monocle3, so install the dev version from GitHub instead (see https://github.com/cole-trapnell-lab/monocle3/issues/272)
library(monocle3); # devtools::install_github('cole-trapnell-lab/monocle3', ref="develop")
paste("monocle3", packageVersion("monocle3"))
# library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
# paste("garnett", packageVersion("garnett"))
library(cowplot)
library(ggplot2)
library(dplyr)
library(data.table)
library(readxl)
library(reshape2)
library(ggrepel)
library(plotly)
######################################################
# Exporting 3D plots
knitr::knit_hooks$set(webgl = rgl::hook_webgl)
dge_limit <- F # 100
nCores <- 4#parallel::detectCores()
set.seed(2019)
ggsave(plot = p2d, filename = "./Results/Monocle3/UMAP_clusters.pdf", dpi = 600)
p2d <- plot_cells(cds, color_cells_by = "cluster", show_trajectory_graph = F, group_label_size = 5)
p2d
p2d <- plot_cells(cds, color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5, cell_size = 2)
p2d
p2d <- plot_cells(cds, color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5, cell_size = 1)
p2d
p2d <- plot_cells(cds, color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5, cell_size = 1, alpha = .5)
p2d
p2d <- plot_cells(cds, color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5,
cell_size = .75, alpha = .5)
p2d
p2d
p2d <- plot_cells(cds, color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5,
cell_size = .75, alpha = .25)
p2d
p2d <- plot_cells(cds, color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5,
cell_size = .75, alpha = .25, rasterize = T)
p2d
p2d <- plot_cells(cds, color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5,
cell_size = .75, alpha = .25,
rasterize = F)
p2d
p2d <- plot_cells(cds, color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5,
cell_size = .75,
alpha = .35,
rasterize = T)
p2d
ggsave(plot = p2d, filename = "./Results/Monocle3/UMAP_clusters.pdf", dpi = 600)
ggsave(plot = p2d, filename = "./Results/Monocle3/UMAP1-2_clusters.pdf", dpi = 600)
p2d <- plot_cells(cds,
x = 4, y = 4,
color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5,
cell_size = .75,
alpha = .35,
rasterize = T)
p2d <- plot_cells(cds,
x = 3, y = 4,
color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5,
cell_size = .75,
alpha = .35,
rasterize = T)
p2d <- plot_cells(cds,
# x = 1, y = 1,
color_cells_by = "cluster",
show_trajectory_graph = F,
group_label_size = 5,
cell_size = .75,
alpha = .5,
rasterize = T)
p2d
ggsave(plot = p2d, filename = "./Results/Monocle3/UMAP1-2_clusters.pdf", dpi = 600)
ggsave(plot = p2d, filename = "./Results/Monocle3/UMAP_clusters.pdf", dpi = 600)
start_time <- Sys.time()
#### #### Load Objects & Functions #### ####
######################################################
# Import functions
root = "./"
source(file.path(root,"MAIN.R"))
import_parameters(params)
######################################################
#### #### PACKAGES #### ####
######################################################
print("Written using: Seurat version* 2.3.4 2018-07-17")
# https://satijalab.org/seurat/install.html
# source("http://bit.ly/archived-seurat")
library(Seurat)
paste("Seurat", packageVersion("Seurat"))
# library(monocle) # BiocManager::install("monocle")
# paste("monocle", packageVersion("monocle"))
## WARNING! There's currently bugs in the Bioconductor installation of Monocle3, so install the dev version from GitHub instead (see https://github.com/cole-trapnell-lab/monocle3/issues/272)
library(monocle3); # devtools::install_github('cole-trapnell-lab/monocle3', ref="develop")
paste("monocle3", packageVersion("monocle3"))
# library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
# paste("garnett", packageVersion("garnett"))
library(cowplot)
library(ggplot2)
library(dplyr)
library(data.table)
library(readxl)
library(reshape2)
library(ggrepel)
library(plotly)
######################################################
# Exporting 3D plots
knitr::knit_hooks$set(webgl = rgl::hook_webgl)
dge_limit <- F # 100
nCores <- 4#parallel::detectCores()
set.seed(2019)
# load("Data/seurat_object_add_HTO_ids.Rdata")
load(file.path("Data", "monocle3_CDS.RData"))
monocle3::plot_cells(cds, genes = c("CD14","FCGR3A"))
gg_markers <- monocle3::plot_cells(cds, genes = c("CD14","FCGR3A"),show_trajectory_graph = F)
print(gg_markers)
ggsave("Results/Monocle3/UMAP_CD14_FCGR3A.png", plot = gg_markers, dpi = 400)
ggsave("Results/Monocle3/UMAP_CD14_FCGR3A.pdf", plot = gg_markers, dpi = 400)
gg_markers <- monocle3::plot_cells(cds, genes = c("CD14","FCGR3A"),
show_trajectory_graph = F, alpha = .8, cell_size = 1)
print(gg_markers)
gg_markers <- monocle3::plot_cells(cds, genes = c("CD14","FCGR3A"),
show_trajectory_graph = F, alpha = .8, cell_size = .5)
ggsave("Results/Monocle3/UMAP_CD14_FCGR3A.pdf", plot = gg_markers, dpi = 400, width = 12)
gg_markers <- monocle3::plot_cells(cds, genes = c("CD14","FCGR3A"),
show_trajectory_graph = F, alpha = .8, cell_size = .75)
ggsave("Results/Monocle3/UMAP_CD14_FCGR3A.pdf", plot = gg_markers, dpi = 400, width = 12)
p <- monocle3::plot_cells(cds, label_cell_groups=F, show_trajectory_graph = F)
p
p_dx <- monocle3::plot_cells(cds,color_cells_by = "dx"  , show_trajectory_graph = F)
print(p_dx)
ggsave(plot = p_dx, filename = "./Results/Monocle3/UMAP_dx.pdf", dpi = 600)
p_dx <- monocle3::plot_cells(cds,color_cells_by = "dx", label_cell_groups = "cluster",
show_trajectory_graph = F)
p_dx <- monocle3::plot_cells(cds,color_cells_by = "dx", label_cell_groups = F,
show_trajectory_graph = F)
print(p_dx)
ggsave(plot = p_dx, filename = "./Results/Monocle3/UMAP_dx.pdf", dpi = 600)
p_dx <- monocle3::plot_cells(cds,color_cells_by = "dx", label_cell_groups = F,
show_trajectory_graph = F, cell_size = .75, alpha = .8)
ggsave(plot = p_dx, filename = "./Results/Monocle3/UMAP_dx.pdf", dpi = 600)
meta <- data.frame(pData(cds))
# By dx
cell_proportions <- meta %>%
group_by(dx, Cluster) %>%
summarise(Proportion=n()) %>%
group_by(dx) %>%
mutate(Proportion=Proportion/sum(Proportion))
createDT(cell_proportions)
prop.dx <- ggplot(cell_proportions, aes(x=dx, y=Proportion, fill = Cluster)) +
geom_col() + # position="dodge"
ylab("Proportion of Cells")
print(prop.dx)
clust.key <- list("1"="Canonical Monocytes", "2"="Intermediate Monocytes")
for(clust in 1:2){
clust1.diff <- (subset(cell_proportions, Cluster==clust & dx=="PD")$Proportion - subset(cell_proportions, Cluster==clust & dx=="control")$Proportion)*100
# print(paste("There is a",round(clust1.diff, 2),"% difference in the number of Cluster",clust,"cells (",clust.key[[as.character(clust)]], ") in Controls compared to PD."))
}
subset(meta, dx=="control")
avg.cells.per.ID <- meta %>% dplyr::group_by(ID, dx, Cluster) %>%
tally() %>%
dplyr::group_by(dx, Cluster) %>%
summarise(N = mean(n))
avg.cell.filt <- avg.cells.per.ID[avg.cells.per.ID$Cluster %in% c(1,2),] %>% droplevels()
avg.table <- xtabs(N ~ dx+Cluster, data=avg.cell.filt)
chisq.test(avg.table)
prop.dx <- ggplot(cell_proportions, aes(x=dx, y=Proportion, fill = Cluster)) +
geom_col() + # position="dodge"
ylab("Proportion of Cells") +
theme_bw()
print(prop.dx)
ggsave("Results/Monocle3/cell_proportions.pdf",plot = p_dx, dpi = 400)
ggsave("Results/Monocle3/cell_proportions.pdf",plot = prop.dx, dpi = 400)
ggsave("Results/Monocle3/cell_proportions.pdf",plot = prop.dx, dpi = 400, height=5)
ggsave("Results/Monocle3/cell_proportions.pdf",plot = prop.dx, dpi = 400, height=6, width=5)
pData(cds)
write.csv(pData(cds), file="Results/Monocle3/processed_metadata.csv")
R.utils::gzip("Results/Monocle3/processed_metadata.csv")
pc_var_exp <- monocle3::plot_pc_variance_explained(cds)
pc_var <- monocle3::plot_pc_variance_explained(cds)
print(pc_var)
ggsave("Results/Monocle3/PCA_variance_explained.pdf",plot = pc_var, dpi = 400, height=5)
# 3D plot
p3d <- plot_cells_3d(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p3d
ggsave("Results/Monocle3/UMAP_3D.pdf",plot = p3d, dpi = 400)
# Violin
p_viol <- monocle3::plot_genes_violin(cds[c("CD14","FCGR3A"),], group_cells_by = "dx")
print(p_viol)
# Violin
p_viol <- monocle3::plot_genes_violin(cds[c("CD14","FCGR3A"),], group_cells_by = "cluster")
# Violin
p_viol <- monocle3::plot_genes_violin(cds[c("CD14","FCGR3A"),], group_cells_by = "Cluster")
# Violin
p_viol <- monocle3::plot_genes_violin(cds[c("CD14","FCGR3A"),], group_cells_by = "dx") + geom_point(alpha(.2))
# Violin
p_viol <- monocle3::plot_genes_violin(cds[c("CD14","FCGR3A"),], group_cells_by = "dx") + geom_point(alpha=.2
# Violin
p_viol <- monocle3::plot_genes_violin(cds[c("CD14","FCGR3A"),], group_cells_by = "dx") + geom_point(alpha=.2)
# Violin
p_viol <- monocle3::plot_genes_violin(cds[c("CD14","FCGR3A"),], group_cells_by = "dx") + geom_point(alpha=.2)
qc_counts <-
p_viol_qc <- ggplot(pData(cds), aes(x=dx, y=nGene)) + geom_histogram()
qc_counts <-
p_viol_qc <- ggplot(data.frame(pData(cds)), aes(x=dx, y=nGene)) + geom_histogram()
print(p_viol_qc)
qc_counts <-
p_viol_qc <- ggplot(data.frame(pData(cds)), aes(x=dx, y=nGene)) +
geom_histogram(stat = "count")
print(p_viol_qc)
qc_counts <-
p_viol_qc <- ggplot(data.frame(pData(cds)), aes(x=dx, y=nGene)) +
geom_histogram(stat = "identity")
print(p_viol_qc)
qc_counts <-
p_viol_qc <- ggplot(data.frame(pData(cds)), aes(x=nGene)) +
geom_histogram(stat = "identity")
qc_counts <-
p_viol_qc <- ggplot(data.frame(pData(cds)), aes(x=nGene)) +
geom_histogram(stat = "identity")
print(p_viol_qc)
qc_counts <-
p_viol_qc <- ggplot(data.frame(pData(cds)), aes(x=nGene)) +
geom_histogram()
print(p_viol_qc)
qc_counts <-
p_viol_qc <- ggplot(data.frame(pData(cds)), aes(x=nGene, fill=dx)) +
geom_histogram()
print(p_viol_qc)
qc_counts <-
p_viol_qc <- ggplot(data.frame(pData(cds)), aes(x=nGene, fill=dx)) +
geom_histogram(alpha=.5) +
theme_bw()
print(p_viol_qc)
qc_counts <-
p_viol_qc <- ggplot(data.frame(pData(cds)), aes(x=nGene, fill=dx)) +
geom_histogram(alpha=.75) +
theme_bw()
print(p_viol_qc)
qc_counts <-
p_viol_qc <- ggplot(data.frame(pData(cds)), aes(x=nGene)) +
geom_histogram(data=subset(pData(cds),dx == 'control'),fill = "red", alpha = 0.2) +
geom_histogram(data=subset(pData(cds),yy == 'PD'),fill = "blue", alpha = 0.2)
qc_counts <-
pdata <- data.frame(pData(cds))
p_viol_qc <- ggplot(pdata, aes(x=nGene)) +
geom_histogram(data=subset(pdata,dx == 'control'),fill = "red", alpha = 0.2) +
geom_histogram(data=subset(pdata,dx == 'PD'),fill = "blue", alpha = 0.2)
p_viol_qc <- ggplot(pdata, aes(x=nGene)) +
geom_histogram(data=subset(pdata,dx == 'control'),fill = "red", alpha = 0.2) +
geom_histogram(data=subset(pdata,dx == 'PD'),fill = "blue", alpha = 0.2)  +
geom_histogram(alpha=.75) +
theme_bw()
print(p_viol_qc)
p_viol_qc <- ggplot(pdata, aes(x=nGene), fill="transparent") +
geom_histogram(data=subset(pdata,dx == 'control'),fill = "red", alpha = 0.2) +
geom_histogram(data=subset(pdata,dx == 'PD'),fill = "blue", alpha = 0.2)  +
geom_histogram(alpha=.75) +
theme_bw()
print(p_viol_qc)
qc_counts <-
p_viol_qc <- ggplot(data.frame(pData(cds)), aes(x=nGene, fill=dx)) +
geom_histogram(alpha=.75, position = 'identity') +
theme_bw()
print(p_viol_qc)
pdata <- data.frame(pData(cds))
pdata$dx <- factor(pdata$dx, levels=c("control","PD"), ordered = T)
p_viol_qc <- ggplot(pdata, aes(x=nGene, fill=dx)) +
geom_histogram(alpha=.75, position = 'identity') +
theme_bw()
print(p_viol_qc)
pdata$dx <- factor(pdata$dx, levels=c("PD","control"), ordered = T)
p_viol_qc <- ggplot(pdata, aes(x=nGene, fill=dx)) +
geom_histogram(alpha=.75, position = 'identity') +
theme_bw()
print(p_viol_qc)
ggsave("Results/Monocle3/histogram_dx.pdf",p_viol_qc,dpi=400)
ggsave("Results/Monocle3/histogram_dx.pdf", p_viol_qc, dpi=400, height=5)
p_viol_qc <- ggplot(pdata, aes(x=nGene, fill=dx)) +
geom_histogram(alpha=.75, position = 'identity') +
theme_bw() +
labs(y="nGene count frequency")
print(p_viol_qc)
ggsave("Results/Monocle3/histogram_dx.pdf", p_viol_qc, dpi=400, height=5)
p_viol_qc <- ggplot(pdata, aes(x=nGene, fill=dx)) +
geom_histogram(alpha=.75, position = 'identity') +
theme_bw() +
labs(y="Frequency")
print(p_viol_qc)
print(p_viol_qc)
ggsave("Results/Monocle3/histogram_dx.pdf", p_viol_qc, dpi=400, height=5)
ggplot(pdata, aes(x=dx, y=percent.mito)) + geom_violin()
ggplot(pdata, aes(x=dx, y=percent.mito, fill=dx)) +
geom_violin() +
geom_jitter(alpha=.2)
mito_dx  <- ggplot(pdata, aes(x=dx, y=percent.mito, fill=Cluster)) +
geom_violin() +
geom_jitter(alpha=.2)
mito_dx
mito_dx  <- ggplot(pdata, aes(x=dx, y=percent.mito, fill=Cluster)) +
geom_violin() +
geom_jitter(alpha=.2, position = "identity")
mito_dx
mito_dx  <- ggplot(pdata, aes(x=dx, y=percent.mito, fill=Cluster)) +
geom_violin() +
geom_jitter(alpha=.2, position = "dodge")
mito_dx
mito_dx  <- ggplot(pdata, aes(x=dx, y=percent.mito, fill=Cluster)) +
geom_violin(draw_quantiles = T)
# geom_jitter(alpha=.2, position = "dodge")
mito_dx
mito_dx  <- ggplot(pdata, aes(x=dx, y=percent.mito, fill=Cluster)) +
geom_boxplot()
# geom_jitter(alpha=.2, position = "dodge")
mito_dx
mito_dx_clust  <- ggplot(pdata, aes(x=dx, y=percent.mito, fill=Cluster)) +
geom_boxplot()
mito_dx_clust  <- ggplot(pdata, aes(x=dx, y=percent.mito, fill=Cluster)) +
geom_boxplot() +
theme_bw()
mito_dx_clust
ggsave("Results/Monocle3/percentMito_dx_cluster_boxplot.pdf", mito_dx_clust, dpi=400, height=5)
start_time <- Sys.time()
#### #### Load Objects & Functions #### ####
######################################################
# Import functions
root = "./"
source(file.path(root,"MAIN.R"))
import_parameters(params)
######################################################
#### #### PACKAGES #### ####
######################################################
print("Written using: Seurat version* 2.3.4 2018-07-17")
# https://satijalab.org/seurat/install.html
# source("http://bit.ly/archived-seurat")
library(Seurat)
paste("Seurat", packageVersion("Seurat"))
# library(monocle) # BiocManager::install("monocle")
# paste("monocle", packageVersion("monocle"))
## WARNING! There's currently bugs in the Bioconductor installation of Monocle3, so install the dev version from GitHub instead (see https://github.com/cole-trapnell-lab/monocle3/issues/272)
library(monocle3); # devtools::install_github('cole-trapnell-lab/monocle3', ref="develop")
paste("monocle3", packageVersion("monocle3"))
# library(garnett) # devtools::install_github("cole-trapnell-lab/garnett")
# paste("garnett", packageVersion("garnett"))
library(cowplot)
library(ggplot2)
library(dplyr)
library(data.table)
library(readxl)
library(reshape2)
library(ggrepel)
library(plotly)
######################################################
# Exporting 3D plots
knitr::knit_hooks$set(webgl = rgl::hook_webgl)
dge_limit <- F # 100
nCores <- 4#parallel::detectCores()
set.seed(2019)
# load("Data/seurat_object_add_HTO_ids.Rdata")
load(file.path("Data", "monocle3_CDS.RData"))
# write.csv(pData(cds), file="Results/Monocle3/processed_metadata.csv")
# R.utils::gzip("Results/Monocle3/processed_metadata.csv")
# 3D plot
p3d <- plot_cells_3d(cds, color_cells_by = "cluster", show_trajectory_graph = F)
p3d
# Save each cluster as a separate OBJ file that can later be
# imported into a 3D modeling platform (e.g. Blender, Meshlab) for more advanced visualization
## save_3D_clusters(cds)
class(p3d)
p3d + plotly::layout(
camera = list(eye = list(x = cos(i)*cam.zoom,y = sin(i)*cam.zoom, z=0.2),
center = list(x = 0,
y = 0,
z = 0
)
)
)
for(i in seq(0,6.3,by=0.1)){
p3d + plotly::layout(
camera = list(eye = list(x = cos(i)*cam.zoom,y = sin(i)*cam.zoom, z=0.2),
center = list(x = 0,
y = 0,
z = 0
)
)
)
}
for(i in seq(0,6.3,by=0.1)){
cam.zoom = 2
ver.angle = 0
p3d + plotly::layout(
camera = list(eye = list(x = cos(i)*cam.zoom,y = sin(i)*cam.zoom, z=0.2),
center = list(x = 0,
y = 0,
z = 0
)
)
)
}
p3d$x
p3d$x + plotly::layout(
camera = list(eye = list(x = cos(i)*cam.zoom,y = sin(i)*cam.zoom, z=0.2),
center = list(x = 0,
y = 0,
z = 0
)
)
)
p3d %>% plotly::layout(
camera = list(eye = list(x = cos(i)*cam.zoom,y = sin(i)*cam.zoom, z=0.2),
center = list(x = 0,
y = 0,
z = 0
)
)
)
n
for(i in seq(0,6.3,by=0.1)){
cam.zoom = 2
ver.angle = 0
p3d %>% plotly::layout(
camera = list(eye = list(x = cos(i)*cam.zoom,y = sin(i)*cam.zoom, z=0.2),
center = list(x = 0,
y = 0,
z = 0
)
)
)
}
for(i in seq(0,6.3,by=0.1)){
cam.zoom = 2
ver.angle = 0
graph <- p3d %>% plotly::layout(
camera = list(eye = list(x = cos(i)*cam.zoom,y = sin(i)*cam.zoom, z=0.2),
center = list(x = 0,
y = 0,
z = 0
)
)
)
cat("Now rendering iteration:", i,"\n")
plotly_IMAGE(graph,
width = 1200,
height = 1050,
format = "png",
username="xxx",
key="xxxx",
scale = 1,
out_file = paste("./plotly_test","png", sep="."))
}
plotly_IMAGE(graph,
width = 1200,
height = 1050,
format = "png",
username="bschilder",
key="spiderman",
scale = 1,
out_file = paste("./plotly_test","png", sep="."))
plotly_IMAGE(graph,
width = 1200,
height = 1050,
format = "png",
username="bschilder",
key="vCq0X23Hws3tIHhJpU9I",
scale = 1,
out_file = paste("./plotly_test","png", sep="."))
p3d
